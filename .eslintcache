[{"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\auth\\SignUp.js":"1","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SidebarPersonal.js":"2","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\Schedular\\CalendarModal.js":"3","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\members\\TeamMembers.js":"4","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SidebarProfile.js":"5","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SidebarTeams.js":"6","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TeamTodo.js":"7","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Discussion.js":"8","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SIdebarTimeline.js":"9","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\Board.js":"10","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\PersonalTodo.js":"11","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\notification\\Notification.js":"12","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\TimelineEdit.js":"13","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\Timeline.js":"14","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Delete.js":"15","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\index.js":"16","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\home\\Home.js":"17","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\Endo.js":"18","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Chat.js":"19","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\imagesModal\\DownloadImageModal.js":"20","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\slogger\\Slogger.js":"21","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\DonutChart.js":"22","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\context\\AuthContext.js":"23","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\navBar\\NavBar.js":"24","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\EndoCards.js":"25","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\Schedular\\TeamSchedular.js":"26","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Material.js":"27","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\firebase.js":"28","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\helpPage\\EmailDialog.js":"29","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TeamCard.js":"30","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\BoardSection.js":"31","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TeamTodoCard.js":"32","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\helpPage\\HelpPage.js":"33","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Dialog.js":"34","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\BoardTodo.js":"35","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\snackbar\\SnackBar.js":"36","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\Feedback.js":"37","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TodoCard.js":"38","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\App.js":"39","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\slogger\\ContactUs.js":"40","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\slogger\\Extension.js":"41","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\reportWebVitals.js":"42","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\imagesModal\\ImagesModal.js":"43","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\Schedular\\Schedular.js":"44","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\notification\\FeedbackModal.js":"45","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\AddTeamTodo.js":"46","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\members\\TeamMemberCard.js":"47","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\MemberProfile.js":"48","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\utils\\theme.js":"49","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\members\\ChatMemberCard.js":"50"},{"size":17679,"mtime":1624184903091,"results":"51","hashOfConfig":"52"},{"size":12112,"mtime":1622362119839,"results":"53","hashOfConfig":"52"},{"size":9923,"mtime":1622362119259,"results":"54","hashOfConfig":"52"},{"size":7242,"mtime":1624121601966,"results":"55","hashOfConfig":"52"},{"size":17564,"mtime":1622362119852,"results":"56","hashOfConfig":"52"},{"size":24325,"mtime":1624199916214,"results":"57","hashOfConfig":"52"},{"size":41705,"mtime":1624115940304,"results":"58","hashOfConfig":"52"},{"size":22029,"mtime":1624198566326,"results":"59","hashOfConfig":"52"},{"size":10530,"mtime":1622364825490,"results":"60","hashOfConfig":"52"},{"size":5669,"mtime":1624123300164,"results":"61","hashOfConfig":"52"},{"size":31040,"mtime":1624105181799,"results":"62","hashOfConfig":"52"},{"size":11220,"mtime":1624120145398,"results":"63","hashOfConfig":"52"},{"size":7003,"mtime":1622372167989,"results":"64","hashOfConfig":"52"},{"size":11268,"mtime":1623591498714,"results":"65","hashOfConfig":"52"},{"size":8452,"mtime":1622372445923,"results":"66","hashOfConfig":"52"},{"size":465,"mtime":1622362119925,"results":"67","hashOfConfig":"52"},{"size":11300,"mtime":1624118016657,"results":"68","hashOfConfig":"52"},{"size":1958,"mtime":1622362119516,"results":"69","hashOfConfig":"52"},{"size":9858,"mtime":1624185729920,"results":"70","hashOfConfig":"52"},{"size":6787,"mtime":1622362119766,"results":"71","hashOfConfig":"52"},{"size":19750,"mtime":1623599562646,"results":"72","hashOfConfig":"52"},{"size":3314,"mtime":1622362119650,"results":"73","hashOfConfig":"52"},{"size":1128,"mtime":1622362119901,"results":"74","hashOfConfig":"52"},{"size":8078,"mtime":1623591181682,"results":"75","hashOfConfig":"52"},{"size":3591,"mtime":1622362119524,"results":"76","hashOfConfig":"52"},{"size":3727,"mtime":1622362119283,"results":"77","hashOfConfig":"52"},{"size":17173,"mtime":1622362119658,"results":"78","hashOfConfig":"52"},{"size":530,"mtime":1622362119910,"results":"79","hashOfConfig":"52"},{"size":2911,"mtime":1624103941374,"results":"80","hashOfConfig":"52"},{"size":4269,"mtime":1622362119705,"results":"81","hashOfConfig":"52"},{"size":11474,"mtime":1622362119365,"results":"82","hashOfConfig":"52"},{"size":20260,"mtime":1624121480397,"results":"83","hashOfConfig":"52"},{"size":16981,"mtime":1622362119442,"results":"84","hashOfConfig":"52"},{"size":6394,"mtime":1622362119627,"results":"85","hashOfConfig":"52"},{"size":19285,"mtime":1622362119380,"results":"86","hashOfConfig":"52"},{"size":1135,"mtime":1622362119594,"results":"87","hashOfConfig":"52"},{"size":2206,"mtime":1622362119532,"results":"88","hashOfConfig":"52"},{"size":9856,"mtime":1622362119745,"results":"89","hashOfConfig":"52"},{"size":1843,"mtime":1624118997139,"results":"90","hashOfConfig":"52"},{"size":2367,"mtime":1623599038779,"results":"91","hashOfConfig":"52"},{"size":1915,"mtime":1623599838383,"results":"92","hashOfConfig":"52"},{"size":375,"mtime":1622362119931,"results":"93","hashOfConfig":"52"},{"size":3975,"mtime":1622362119779,"results":"94","hashOfConfig":"52"},{"size":4516,"mtime":1622362119271,"results":"95","hashOfConfig":"52"},{"size":3009,"mtime":1624197440838,"results":"96","hashOfConfig":"52"},{"size":9134,"mtime":1622362119333,"results":"97","hashOfConfig":"52"},{"size":3021,"mtime":1624121615535,"results":"98","hashOfConfig":"52"},{"size":10524,"mtime":1624197793515,"results":"99","hashOfConfig":"52"},{"size":1875,"mtime":1624116524793,"results":"100","hashOfConfig":"52"},{"size":5878,"mtime":1624197075374,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"v7u82j",{"filePath":"104","messages":"105","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"110","usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"107"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"127","usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"107"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"128"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"128"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"111"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"128"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"155","messages":"156","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"107"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"107"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"118"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"107"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"128"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"147"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"180","messages":"181","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"107"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"107"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"188","messages":"189","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"111"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"107"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"128"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"107"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"128"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"212"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"107"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"128"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"223","messages":"224","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"225","usedDeprecatedRules":"128"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\auth\\SignUp.js",["235","236","237","238","239","240","241","242"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SidebarPersonal.js",["243","244","245","246","247","248","249"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport \"./sidebar.css\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\nimport { useHistory } from \"react-router\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport {\r\n  DatePicker,\r\n  DateTimePicker,\r\n  MuiPickersUtilsProvider,\r\n} from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport { createMuiTheme, Slider } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport AlarmIcon from \"@material-ui/icons/AddAlarm\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport { db } from \"../../../firebase\";\r\nimport firebase from \"firebase\";\r\nimport DonutChart from \"../DonutChart\";\r\nimport green from \"@material-ui/core/colors/green\";\r\nimport styled from \"styled-components\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n    color: \"#fff\",\r\n    background: \"rgba(0, 145, 96, 0.9)\",\r\n    boxShadow: \"none\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst defaultMaterialTheme = createMuiTheme({\r\n  palette: {\r\n    primary: green,\r\n    width: \"100%\",\r\n    cursor: \"pointer\",\r\n  },\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function SidebarPersonal() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const { currentUser, logOut } = useAuth();\r\n  const history = useHistory();\r\n  const [selectedStartDate, handleStartDateChange] = useState(new Date());\r\n  const [selectedEndDate, handleEndDateChange] = useState(new Date());\r\n  const [priority, setPriority] = useState(0);\r\n  const [inputTodo, setInputTodo] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [loader, setLoader] = useState(false);\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [todoLength, setTodoLength] = useState(0);\r\n\r\n  const PrettoSlider = createMuiTheme({\r\n    overrides: {\r\n      MuiSlider: {\r\n        root: {\r\n          color:\r\n            priority < 33\r\n              ? \"rgb(1, 112, 75)\"\r\n              : priority > 66\r\n              ? \"rgba(185, 5, 5)\"\r\n              : \"rgba(185, 86, 5)\",\r\n          height: 8,\r\n          transition: \"all 0.5s ease-in-out\",\r\n          transform: \"scale(0.6)\",\r\n        },\r\n\r\n        thumb: {\r\n          height: 24,\r\n          width: 24,\r\n          backgroundColor: \"#fff\",\r\n          border: \"2px solid currentColor\",\r\n          marginTop: -8,\r\n          marginLeft: -12,\r\n          \"&:focus, &:hover, &$active\": {\r\n            boxShadow: \"inherit\",\r\n          },\r\n        },\r\n        active: {},\r\n        valueLabel: {\r\n          left: \"calc(-50% + 4px)\",\r\n        },\r\n        track: {\r\n          height: 8,\r\n          borderRadius: 4,\r\n        },\r\n        rail: {\r\n          height: 8,\r\n          borderRadius: 4,\r\n        },\r\n      },\r\n    },\r\n  });\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSignOut = async () => {\r\n    await logOut();\r\n    history.push(\"/signUp\");\r\n  };\r\n  const handleInputChange = (value) => {\r\n    setInputTodo(value);\r\n    setError(false);\r\n  };\r\n  function labelText(value) {\r\n    return priority < 33 ? \"Low\" : priority > 66 ? \"Top\" : \"Med\";\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    if (inputTodo !== \"\") {\r\n      setLoader(true);\r\n      db.collection(\"users\")\r\n        .doc(currentUser.uid)\r\n        .collection(\"todos\")\r\n        .add({\r\n          todoText: inputTodo,\r\n          todoStartDate: selectedStartDate.toISOString(),\r\n          todoEndDate: selectedEndDate.toISOString(),\r\n          checked: false,\r\n          priority: priority < 33 ? 1 : priority > 66 ? 3 : 2,\r\n          timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n      setInputTodo(\"\");\r\n      setLoader(false);\r\n      handleClose();\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const handleTodoLength = (list) => {\r\n    const l = list.length;\r\n    setTodoLength(l);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"todos\")\r\n      .orderBy(\"timeStamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const list = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          todoText: doc.data().todoText,\r\n          todoDate: doc.data().todoDate,\r\n          checked: doc.data().checked,\r\n        }));\r\n        console.log(list);\r\n        handleTodoLength(list);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"addItemsPersonal\" onClick={handleClickOpen}>\r\n        Add Items +\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Slogger\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <TodoLeftContainer>\r\n          <TodoLeftUpBox>\r\n            <div className=\"inputField\">\r\n              <CreateIcon className=\"todoIcon\" />\r\n              <input\r\n                value={inputTodo}\r\n                className=\"todoInputPersonal\"\r\n                type=\"text\"\r\n                placeholder=\"Write here...\"\r\n                onChange={(e) => handleInputChange(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <div className=\"dataContainerSide\">\r\n                <h3 className=\"timeHeading\">Start date</h3>\r\n                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                  <div className=\"dateBoxSide\">\r\n                    <ThemeProvider theme={defaultMaterialTheme}>\r\n                      <DatePicker\r\n                        variant=\"dialog\"\r\n                        //format=\"DD/MM/YYYY\"\r\n                        value={selectedStartDate}\r\n                        onChange={handleStartDateChange}\r\n                        style={{\r\n                          width: \"100%\",\r\n                          textAlign: \"center\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: <AlarmIcon className=\"AlarmIcon\" />,\r\n                          disableUnderline: true,\r\n                        }}\r\n                      />\r\n                    </ThemeProvider>\r\n                  </div>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n              <div className=\"dataContainerSide\">\r\n                <h3 className=\"timeHeading\">End date</h3>\r\n                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                  <div className=\"dateBoxSide\">\r\n                    <ThemeProvider theme={defaultMaterialTheme}>\r\n                      <DatePicker\r\n                        variant=\"dialog\"\r\n                        value={selectedEndDate}\r\n                        //  format=\"DD/MM/YYYY\"\r\n                        onChange={handleEndDateChange}\r\n                        style={{\r\n                          width: \"100%\",\r\n                          textAlign: \"center\",\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        InputProps={{\r\n                          endAdornment: <AlarmIcon className=\"AlarmIcon\" />,\r\n                          disableUnderline: true,\r\n                        }}\r\n                      />\r\n                    </ThemeProvider>\r\n                  </div>\r\n                </MuiPickersUtilsProvider>\r\n              </div>\r\n            </div>\r\n            <Button\r\n              disabled={loader}\r\n              endIcon={<AddIcon />}\r\n              className={loader ? \"AddButtonDisabled\" : \"AddButton\"}\r\n              onClick={() => handleSubmit()}\r\n            >\r\n              ADD\r\n            </Button>\r\n            <p\r\n              style={{\r\n                color: \"rgb(0, 90, 60)\",\r\n                fontSize: \"0.6rem\",\r\n                marginTop: \"0.5rem\",\r\n                textAlign: \"center\",\r\n              }}\r\n            >\r\n              Set priority\r\n            </p>\r\n            <ThemeProvider theme={PrettoSlider}>\r\n              <Slider\r\n                getAriaValueText={labelText}\r\n                defaultValue={priority}\r\n                value={priority}\r\n                valueLabelFormat={labelText}\r\n                valueLabelDisplay=\"auto\"\r\n                onChange={(e, data) => {\r\n                  setPriority(data);\r\n                }}\r\n              />\r\n            </ThemeProvider>\r\n          </TodoLeftUpBox>\r\n          <TodoLeftDownBox>\r\n            {todoLength !== 0 ? (\r\n              <DonutChart todoLength={todoLength} />\r\n            ) : (\r\n              <h3\r\n                style={{\r\n                  fontWeight: 600,\r\n                  padding: \"1rem\",\r\n                  color: \"rgba(0, 141, 94, 0.695)\",\r\n                }}\r\n              >\r\n                NO ITEMS\r\n              </h3>\r\n            )}\r\n          </TodoLeftDownBox>\r\n        </TodoLeftContainer>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst TodoLeftContainer = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  width: 94%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 0.5rem;\r\n`;\r\n\r\nconst TodoLeftUpBox = styled.div`\r\n  flex: 0.4 !important;\r\n  border-bottom: 2px solid rgba(0, 141, 94, 0.295);\r\n  display: flex;\r\n  flex-direction: column;\r\n  @media (max-height: 400px) {\r\n    flex: 1 !important;\r\n    border: none;\r\n  }\r\n\r\n  .inputField {\r\n    width: 90%;\r\n    height: 2rem;\r\n    background-color: rgba(3, 185, 124, 0.308);\r\n    border-radius: 0.5rem;\r\n    border: none;\r\n    padding: 1rem;\r\n    padding-left: 0.5rem;\r\n    margin: 0.5rem;\r\n    margin-bottom: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    overflow: hidden;\r\n  }\r\n  input {\r\n    width: 100%;\r\n    height: 100%;\r\n    outline: none;\r\n    border: none;\r\n    background: transparent;\r\n    color: rgb(0, 90, 60);\r\n    font-size: 1rem;\r\n    flex: 0.9;\r\n    padding-left: 0.5rem;\r\n    overflow: hidden;\r\n  }\r\n  input::placeholder {\r\n    color: rgb(3, 185, 124);\r\n    font-size: 1rem;\r\n    @media (max-height: 700px) {\r\n      font-size: 0.5rem;\r\n    }\r\n  }\r\n  .todoIcon {\r\n    color: rgb(3, 185, 124);\r\n    font-size: 1.5rem;\r\n    flex: 0.1;\r\n    padding-right: 0.3rem;\r\n    transform: rotateY(180deg) !important;\r\n  }\r\n  .AlarmIcon {\r\n    color: rgb(3, 185, 124);\r\n    font-size: 1.5rem;\r\n    flex: 0.1;\r\n    padding-right: 0.3rem;\r\n    cursor: pointer;\r\n  }\r\n  .dateBox {\r\n    overflow: hidden;\r\n    width: 88%;\r\n    height: 2rem;\r\n    background-color: rgba(3, 185, 124, 0.308);\r\n    border-radius: 1rem;\r\n    border: none;\r\n    padding: 1rem;\r\n    margin: 0.5rem;\r\n    display: flex;\r\n    align-items: center;\r\n    cursor: pointer;\r\n  }\r\n  .AddButton {\r\n    width: 95.5%;\r\n    color: #fff;\r\n    font-weight: 600;\r\n    background-color: rgb(5, 185, 125);\r\n    margin: 0.5rem;\r\n    overflow: hidden;\r\n  }\r\n  .AddButton:hover {\r\n    background-color: rgb(5, 185, 125);\r\n  }\r\n  .AddButtonDisabled {\r\n    opacity: 0.7;\r\n    width: 95.5%;\r\n    color: #fff;\r\n    font-weight: 600;\r\n    background-color: rgb(5, 185, 125);\r\n    margin: 0.5rem;\r\n  }\r\n`;\r\nconst TodoLeftDownBox = styled.div`\r\n  overflow: hidden;\r\n  @media (max-height: 400px) {\r\n    display: none;\r\n  }\r\n`;\r\n",["250","251"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\Schedular\\CalendarModal.js",["252","253","254","255","256"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { db } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport firebase from \"firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  createMuiTheme,\r\n  Fade,\r\n  useMediaQuery,\r\n  useTheme,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport \"./style.css\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport AlarmIcon from \"@material-ui/icons/AddAlarm\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nconst defaultMaterialTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(2, 88, 60)\",\r\n    },\r\n  },\r\n  width: \"100%\",\r\n\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n      },\r\n      input: {\r\n        color: \"rgb(0, 90, 60)\",\r\n        fontSize: \"1.2rem\",\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    MuiDialog: {\r\n      paperWidthSm: {\r\n        width: \"300px\",\r\n      },\r\n    },\r\n    MuiPickersDay: {\r\n      daySelected: {\r\n        backgroundColor: \"rgb(2, 88, 60)\",\r\n        [\":hover\"]: {\r\n          backgroundColor: \"rgb(2, 88, 60)\",\r\n        },\r\n      },\r\n    },\r\n    MuiButton: {\r\n      textPrimary: {\r\n        color: \"rgb(2, 88, 60)\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  const theme = useTheme();\r\n  return useMediaQuery(theme.breakpoints.down(\"sm\")) ? (\r\n    <Slide direction=\"left\" ref={ref} {...props} />\r\n  ) : (\r\n    <Fade direction=\"\" ref={ref} {...props} />\r\n  );\r\n});\r\n\r\nexport default function CalendarModal({\r\n  open,\r\n  handleClose,\r\n  event,\r\n  getAllEvents,\r\n  getChild,\r\n  setPersonalTabValue,\r\n  team,\r\n  urlTeamName,\r\n  setOpenSchedular,\r\n  board,\r\n}) {\r\n  const [todoText, setTodoText] = useState(event.title);\r\n  const [selectedStartDate, handleStartDateChange] = useState(event.start);\r\n  const [selectedEndDate, handleEndDateChange] = useState(event.end);\r\n  const [priority, setPriority] = useState(\r\n    event.backgroundColor === \"rgba(185, 5, 5, 0.8)\"\r\n      ? 100\r\n      : event.backgroundColor === \"rgba(185, 86, 5, 0.8)\"\r\n      ? 50\r\n      : 0\r\n  );\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const PrettoSlider = withStyles({\r\n    root: {\r\n      color:\r\n        priority < 33\r\n          ? \"rgb(1, 112, 75)\"\r\n          : priority > 66\r\n          ? \"rgba(185, 5, 5)\"\r\n          : \"rgba(185, 86, 5)\",\r\n      height: 8,\r\n      transition: \"all 0.5s ease-in-out\",\r\n      transform: \"scale(0.6)\",\r\n      marginLeft: \"1rem\",\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: \"#fff\",\r\n      border: \"2px solid currentColor\",\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      \"&:focus, &:hover, &$active\": {\r\n        boxShadow: \"inherit\",\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: \"calc(-50% + 4px)\",\r\n    },\r\n    track: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);\r\n\r\n  const handleSubmit = () => {\r\n    if (\r\n      todoText !== \"\" &&\r\n      new Date(selectedStartDate).getTime() <=\r\n        new Date(selectedEndDate).getTime()\r\n    ) {\r\n      console.log(event._def.publicId);\r\n      if (team) {\r\n        db.collection(\"teams\")\r\n          .doc(urlTeamName)\r\n          .collection(\"teamTodos\")\r\n          .doc(event._def.publicId)\r\n          .set(\r\n            {\r\n              todoText: todoText,\r\n              todoStartTime: selectedStartDate.toISOString(),\r\n              todoEndTime: selectedEndDate.toISOString(),\r\n              priority: priority < 33 ? 1 : priority > 66 ? 3 : 2,\r\n            },\r\n            { merge: true }\r\n          );\r\n        setOpenSchedular(false);\r\n      } else {\r\n        db.collection(\"users\")\r\n          .doc(currentUser.uid)\r\n          .collection(\"todos\")\r\n          .doc(event._def.publicId)\r\n          .set(\r\n            {\r\n              todoText: todoText,\r\n              todoStartDate: selectedStartDate.toISOString(),\r\n              todoEndDate: selectedEndDate.toISOString(),\r\n              priority: priority < 33 ? 1 : priority > 66 ? 3 : 2,\r\n            },\r\n            { merge: true }\r\n          );\r\n        setPersonalTabValue(0);\r\n      }\r\n\r\n      // getChild(getAllEvents());\r\n      setPriority(0);\r\n      handleClose();\r\n    }\r\n  };\r\n  function labelText(value) {\r\n    return priority < 33 ? \"Low\" : priority > 66 ? \"Top\" : \"Med\";\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (\r\n      new Date(selectedEndDate).getTime() <\r\n      new Date(selectedStartDate).getTime()\r\n    ) {\r\n      handleEndDateChange(selectedStartDate);\r\n    }\r\n    // if (new Date(selectedStartDate).getTime() < new Date().getTime()) {\r\n    //   handleStartDateChange(new Date());\r\n    // }\r\n  }, [selectedEndDate]);\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      onClose={handleClose}\r\n      fullScreen={!isSmall}\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle\r\n        id=\"alert-dialog-slide-title\"\r\n        className=\"modalTitle\"\r\n        style={{ paddingLeft: \"30px\" }}\r\n      >\r\n        Edit\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          <p\r\n            style={{\r\n              marginLeft: \"0.5rem\",\r\n              fontSize: \"15px\",\r\n              color: \"rgb(0, 90, 60)\",\r\n              marginBottom: \"0.5rem\",\r\n            }}\r\n          >\r\n            {event._def.extendedProps.teamName}\r\n          </p>\r\n          <textarea\r\n            className=\"todoTextarea\"\r\n            value={todoText}\r\n            onChange={(e) => setTodoText(e.target.value)}\r\n          />\r\n          <div style={{ display: isSmall && \"flex\" }}>\r\n            <div className=\"dataContainer\">\r\n              <h3 className=\"timeHeading\">Start date</h3>\r\n              <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                <div className=\"dateBox\">\r\n                  <ThemeProvider theme={defaultMaterialTheme}>\r\n                    <DatePicker\r\n                      variant=\"dialog\"\r\n                      // format=\"DD/MM/YYYY\"\r\n                      value={selectedStartDate}\r\n                      orientation=\"portrait\"\r\n                      onChange={handleStartDateChange}\r\n                      style={{\r\n                        width: \"100%\",\r\n                        textAlign: \"center\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: <AlarmIcon className=\"alarmModalIcon\" />,\r\n                        disableUnderline: true,\r\n                      }}\r\n                    />\r\n                  </ThemeProvider>\r\n                </div>\r\n              </MuiPickersUtilsProvider>\r\n            </div>\r\n            <div className=\"dataContainer\" style={{ marginLeft: isSmall && 0 }}>\r\n              <h3 className=\"timeHeading\">End date</h3>\r\n              <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                <div className=\"dateBox\">\r\n                  <ThemeProvider theme={defaultMaterialTheme}>\r\n                    <DatePicker\r\n                      variant=\"dialog\"\r\n                      orientation=\"portrait\"\r\n                      value={selectedEndDate}\r\n                      //  format=\"DD/MM/YYYY\"\r\n                      onChange={handleEndDateChange}\r\n                      style={{\r\n                        width: \"100%\",\r\n                        textAlign: \"center\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: <AlarmIcon className=\"alarmModalIcon\" />,\r\n                        disableUnderline: true,\r\n                      }}\r\n                    />\r\n                  </ThemeProvider>\r\n                </div>\r\n              </MuiPickersUtilsProvider>\r\n            </div>\r\n          </div>\r\n\r\n          {!board && (\r\n            <>\r\n              <p\r\n                style={{\r\n                  color: \"rgb(0, 90, 60)\",\r\n                  fontSize: \"0.6rem\",\r\n                  marginTop: \"0.7rem\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                Set priority\r\n              </p>\r\n              <div style={{ width: \"90%\" }}>\r\n                <PrettoSlider\r\n                  getAriaValueText={labelText}\r\n                  defaultValue={priority}\r\n                  value={priority}\r\n                  valueLabelFormat={labelText}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={(e, data) => {\r\n                    setPriority(data);\r\n                  }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions style={{ paddingRight: \"22px\" }}>\r\n        <Button\r\n          className=\"addButtonModal\"\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          className=\"addButtonModal\"\r\n          color=\"primary\"\r\n          onClick={handleSubmit}\r\n        >\r\n          save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n",["257","258"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\members\\TeamMembers.js",["259","260","261","262"],"import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { useMediaQuery, useTheme, Zoom } from \"@material-ui/core\";\r\nimport { db } from \"../../../firebase\";\r\nimport selectTeam from \"../../../assets/images/selectTeam.svg\";\r\nimport TeamMemberCard from \"./TeamMemberCard\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\nimport firebase from \"firebase\";\r\nimport emailjs from \"emailjs-com\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Zoom direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function TeamMembers({\r\n  open,\r\n  handleClose,\r\n  urlTeamName,\r\n  todoId,\r\n  assigned,\r\n  userName,\r\n  todo,\r\n  endDate,\r\n  setTabValue,\r\n}) {\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const [allMemberIdList, setAllMemberIdList] = useState([]);\r\n  const [allSelectedMemberList, setAllSelectedMemberList] = useState([]);\r\n  const [selected, setSelected] = useState(assigned.map((mem) => mem.memberId));\r\n  const { currentUser } = useAuth();\r\n\r\n  const getAllMembers = () => {\r\n    db.collection(\"teams\")\r\n      .doc(urlTeamName)\r\n      .collection(\"members\")\r\n      .onSnapshot((snapshot) => {\r\n        const memberIdList = snapshot.docs.map((doc) => ({\r\n          id: doc.data().id,\r\n        }));\r\n        console.log(memberIdList);\r\n        setAllMemberIdList(memberIdList);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllMembers();\r\n  }, []);\r\n\r\n  const handleSubmit = () => {\r\n    var _list = [];\r\n    if (selected.length !== 0) {\r\n      selected.forEach((selectedId) => {\r\n        db.collection(\"users\")\r\n          .doc(selectedId)\r\n          .collection(\"profile\")\r\n          .onSnapshot((snapshot) => {\r\n            const profile = snapshot.docs.map((doc) => ({\r\n              id: doc.id,\r\n              memberId: selectedId,\r\n              name: doc.data().name,\r\n              profileImage: doc.data().profileImage,\r\n              email: doc.data().email,\r\n            }));\r\n            _list.push(profile[0]);\r\n\r\n            window.Email.send({\r\n              Host: \"smtp.gmail.com\",\r\n              Username: \"withslogger@gmail.com\",\r\n              Password: \"slogger2220\",\r\n              To: profile[0].email,\r\n              From: \"withslogger@gmail.com\",\r\n              Subject: `Task assigned - ${urlTeamName}/SLOGGER[${new Date().getTime()}]`,\r\n              Body: `You have been assigned a task: <br /><br />${todo}<br /><br /><b>ASSIGNED BY: ${userName} (${urlTeamName})<br />DEADLINE: ${endDate?.substring(\r\n                8,\r\n                10\r\n              )}\r\n              ${\"/\"}\r\n              ${endDate?.substring(5, 7)}\r\n              ${\"/\"}\r\n              ${endDate?.substring(\r\n                0,\r\n                4\r\n              )} </b><br /><br /><br />Thank you,<br />Slogger`,\r\n            }).then(console.log(\"Mail sent to assignees\"));\r\n\r\n            db.collection(\"teams\")\r\n              .doc(urlTeamName)\r\n              .collection(\"teamTodos\")\r\n              .doc(todoId)\r\n              .set(\r\n                {\r\n                  assignedTo: [..._list],\r\n                },\r\n                { merge: true }\r\n              );\r\n          });\r\n\r\n        db.collection(\"users\").doc(selectedId).collection(\"notifications\").add({\r\n          todoId: todoId,\r\n          assignedByName: userName,\r\n          notificationType: \"taskAssigned\",\r\n          assignedById: currentUser.uid,\r\n          teamName: urlTeamName,\r\n          todo: todo,\r\n          endDate: endDate,\r\n          notiDate: new Date().toISOString(),\r\n          timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        });\r\n      });\r\n      setAllSelectedMemberList(_list);\r\n    } else {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(todoId)\r\n        .set(\r\n          {\r\n            assignedTo: [],\r\n          },\r\n          { merge: true }\r\n        );\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        fullScreen={!isSmall}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogTitle\r\n          id=\"alert-dialog-slide-title\"\r\n          className=\"title\"\r\n          style={{ marginTop: !isSmall && \"2rem\" }}\r\n        >\r\n          {\"Select Assignees\"}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText\r\n            id=\"alert-dialog-slide-description\"\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              overflow: \"hidden\",\r\n            }}\r\n          >\r\n            <div\r\n              style={{\r\n                width: \"450px\",\r\n                height: !isSmall ? \"500px\" : \"200px\",\r\n                overflowY: \"scroll\",\r\n              }}\r\n            >\r\n              {!allMemberIdList.length === 0 ? (\r\n                <img\r\n                  src={selectTeam}\r\n                  style={{\r\n                    height: \"5rem\",\r\n                    width: \"5rem\",\r\n                    objectFit: \"contain\",\r\n                    margin: \"2rem\",\r\n                  }}\r\n                />\r\n              ) : (\r\n                allMemberIdList?.map((memberId) => (\r\n                  <TeamMemberCard\r\n                    key={memberId.id}\r\n                    id={memberId.id}\r\n                    setSelected={setSelected}\r\n                    selected={selected}\r\n                    setTabValue={setTabValue}\r\n                    handleTeamMembersModalClose={handleClose}\r\n                  />\r\n                ))\r\n              )}\r\n            </div>\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={() => handleClose()}\r\n            className=\"uploadView\"\r\n            style={{\r\n              overflow: \"hidden\",\r\n              fontSize: \"0.7rem\",\r\n              height: \"1.5rem\",\r\n              color: \"#fff\",\r\n              width: \"10%\",\r\n              backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n              marginRight: \"0.5rem\",\r\n              marginBottom: \"0.5rem\",\r\n            }}\r\n          >\r\n            cancel\r\n          </Button>\r\n          <Button\r\n            onClick={() => handleSubmit()}\r\n            className=\"uploadView\"\r\n            style={{\r\n              overflow: \"hidden\",\r\n              fontSize: \"0.7rem\",\r\n              height: \"1.5rem\",\r\n              color: \"#fff\",\r\n              width: \"10%\",\r\n              backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n              marginRight: \"1rem\",\r\n              marginBottom: \"0.5rem\",\r\n            }}\r\n          >\r\n            done\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SidebarProfile.js",["263","264","265","266","267","268","269","270","271","272","273","274"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport \"./sidebar.css\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\nimport CreateIcon from \"@material-ui/icons/Create\";\r\nimport FacebookIcon from \"@material-ui/icons/Facebook\";\r\nimport InstagramIcon from \"@material-ui/icons/Instagram\";\r\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\r\nimport LinkedInIcon from \"@material-ui/icons/LinkedIn\";\r\nimport { db, storage } from \"../../../firebase\";\r\nimport { Avatar, Paper } from \"@material-ui/core\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport SnackBar from \"../../snackbar/SnackBar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n    color: \"#fff\",\r\n    background: \"rgba(0, 145, 96, 0.9)\",\r\n    boxShadow: \"none\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function SidebarProfile() {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const { currentUser, logOut } = useAuth();\r\n  const [profileImage, setProfileImage] = useState(\"\");\r\n  const [profilePath, setProfilePath] = useState(\"\");\r\n  const [openSnack, setOpenSnack] = useState(false);\r\n  const [profileError, setProfileError] = useState(false);\r\n  const [profileSetter, setProfileSetter] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [contact, setContact] = useState(\"\");\r\n  const [skills, setSkills] = useState(\"\");\r\n  const [skillList, setSkillList] = useState([]);\r\n  const [bio, setBio] = useState(\"\");\r\n  const [facebook, setFacebook] = useState(\"\");\r\n  const [instagram, setInstagram] = useState(\"\");\r\n  const [github, setGithub] = useState(\"\");\r\n  const [linkedin, setLinkedin] = useState(\"\");\r\n  const [teams, setTeams] = useState([]);\r\n  const [allMemberIdList, setAllMemberIdList] = useState([]);\r\n  const [team, handleChangeTeam] = React.useState(\"\");\r\n  const [endorsementList, setEndorsementList] = useState([]);\r\n\r\n  const handleSignOut = async () => {\r\n    await logOut();\r\n    history.push(\"/signUp\");\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSaveProfile = () => {\r\n    const _skillList = skills.split(\",\");\r\n    setSkillList(_skillList);\r\n\r\n    setProfileSetter(!profileSetter);\r\n\r\n    if (profileSetter) {\r\n      if (name !== \"\" && email !== \"\") {\r\n        setProfileError(false);\r\n        db.collection(\"users\")\r\n          .doc(currentUser.uid)\r\n          .collection(\"profile\")\r\n          .onSnapshot((snapshot) => {\r\n            if (snapshot.docs.length === 0) {\r\n              db.collection(\"users\")\r\n                .doc(currentUser.uid)\r\n                .collection(\"profile\")\r\n                .add({\r\n                  name: name,\r\n                  email: email,\r\n                  contact: contact,\r\n                  bio: bio,\r\n                  skills: skills,\r\n                  facebook: facebook,\r\n                  instagram: instagram,\r\n                  github: github,\r\n                  linkedin: linkedin,\r\n                  profileImage: profileImage,\r\n                });\r\n            } else {\r\n              const prevProfile = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n              }));\r\n\r\n              db.collection(\"users\")\r\n                .doc(currentUser.uid)\r\n                .collection(\"profile\")\r\n                .doc(prevProfile[0].id)\r\n                .set(\r\n                  {\r\n                    name: name,\r\n                    email: email,\r\n                    bio: bio === \"\" ? \"NoContact\" : bio,\r\n                    contact: contact === \"\" ? \"NoContact\" : contact,\r\n                    skills: skills === \"\" ? \"NoSkill\" : skills,\r\n                    facebook: facebook === \"\" ? \"NoLink\" : facebook,\r\n                    instagram: instagram === \"\" ? \"NoLink\" : instagram,\r\n                    github: github === \"\" ? \"NoLink\" : github,\r\n                    linkedin: linkedin === \"\" ? \"NoLink\" : linkedin,\r\n                    profileImage: profileImage === \"\" ? \"NoLink\" : profileImage,\r\n                  },\r\n                  { merge: true }\r\n                );\r\n            }\r\n          });\r\n      } else {\r\n        setProfileError(true);\r\n      }\r\n    } else {\r\n      console.log(\"Not\");\r\n    }\r\n  };\r\n\r\n  const onSelectFile = async (event) => {\r\n    var path = (window.URL || window.webkitURL).createObjectURL(\r\n      event.target.files[0]\r\n    );\r\n    setProfilePath(path.slice(5));\r\n    setOpenSnack(true);\r\n    try {\r\n      const image = event.target.files[0];\r\n      const uploadTask = await storage\r\n        .ref(`profileImages/${image.name}`)\r\n        .put(image);\r\n      storage\r\n        .ref(\"profileImages\")\r\n        .child(image.name)\r\n        .getDownloadURL()\r\n        .then((url) => {\r\n          console.log(url);\r\n          setProfileImage(url);\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setOpenSnack(false);\r\n  };\r\n\r\n  const handleDelete = (id) => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"endorsement\")\r\n      .doc(id)\r\n      .delete();\r\n  };\r\n\r\n  const getAllMembers = (selectedTeamName) => {\r\n    db.collection(\"teams\")\r\n      .doc(selectedTeamName)\r\n      .collection(\"members\")\r\n      .onSnapshot((snapshot) => {\r\n        const memberIdList = snapshot.docs.map((doc) => ({\r\n          id: doc.data().id,\r\n        }));\r\n\r\n        setAllMemberIdList(memberIdList);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"profile\")\r\n      .onSnapshot((snapshot) => {\r\n        if (snapshot.docs.length === 0) {\r\n          console.log(\"New User\");\r\n        } else {\r\n          const profile = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            name: doc.data().name,\r\n            email: doc.data().email,\r\n            profileImage: doc.data().profileImage,\r\n            skills: doc.data().skills,\r\n            contact: doc.data().contact,\r\n            facebook: doc.data().facebook,\r\n            instagram: doc.data().instagram,\r\n            linkedin: doc.data().linkedin,\r\n            github: doc.data().github,\r\n            bio: doc.data().bio,\r\n          }));\r\n          setProfileImage(profile[0].profileImage);\r\n          setName(profile[0].name);\r\n          setEmail(profile[0].email);\r\n          setSkills(profile[0].skills);\r\n          setContact(profile[0].contact);\r\n          setFacebook(profile[0].facebook);\r\n          setInstagram(profile[0].instagram);\r\n          setBio(profile[0].bio);\r\n          setGithub(profile[0].github);\r\n          setLinkedin(profile[0].linkedin);\r\n          setSkillList(profile[0].skills.split(\",\"));\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"endorsement\")\r\n      .onSnapshot((snapshot) => {\r\n        const list = snapshot.docs.map((doc) => ({\r\n          profileImage: doc.data().GiverProfileImage,\r\n          name: doc.data().GiverName,\r\n          email: doc.data().GiverEmail,\r\n          endorsement: doc.data().GiverEndorsement,\r\n          GiverId: doc.data().GiverId,\r\n        }));\r\n        console.log(list);\r\n        setEndorsementList(list);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"addItemsProfile\" onClick={handleClickOpen}>\r\n        My profile\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Slogger\r\n            </Typography>\r\n            {/* <Button\r\n              autoFocus\r\n              color=\"inherit\"\r\n              onClick={() => history.push(\"/help\")}\r\n            >\r\n              Help\r\n            </Button>\r\n            <Button autoFocus color=\"inherit\" onClick={() => handleSignOut()}>\r\n              Log out\r\n            </Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n        <div className=\"sidebarProfileMyProfile\">\r\n          <div className=\"sidebarProfileTopBar\">\r\n            <div className=\"avatarBox\">\r\n              <input\r\n                hidden\r\n                id=\"profile-image-file\"\r\n                type=\"file\"\r\n                accept=\"image/*\"\r\n                onChange={(e) => onSelectFile(e)}\r\n              />\r\n              {profileSetter ? (\r\n                <IconButton\r\n                  className=\"avatarEdit\"\r\n                  onClick={() => {\r\n                    document.getElementById(\"profile-image-file\").click();\r\n                  }}\r\n                >\r\n                  <CreateIcon />\r\n                </IconButton>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <Avatar className=\"avatar\" alt={name} src={profileImage} />\r\n            </div>\r\n\r\n            <Button\r\n              className=\"sidebarProfileProfileEdit\"\r\n              onClick={() => handleSaveProfile()}\r\n            >\r\n              {profileSetter ? \"done\" : \"edit\"}\r\n            </Button>\r\n          </div>\r\n          <div className=\"sidebarProfileInputBox\">\r\n            <label>Name:</label>\r\n            <input\r\n              disabled={!profileSetter}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={(e) => setName(e.target.value)}\r\n              className=\"sidebarProfileInput\"\r\n              placeholder=\"Full name...\"\r\n            />\r\n          </div>\r\n          <div className=\"sidebarProfileInputBox\">\r\n            <label>Email:</label>\r\n            <input\r\n              disabled={!profileSetter}\r\n              type=\"text\"\r\n              value={email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n              className=\"sidebarProfileInput\"\r\n              placeholder=\"Email given on slogger...\"\r\n            />\r\n          </div>\r\n          <div className=\"sidebarProfileInputBox\">\r\n            <label>Contact:</label>\r\n            <input\r\n              disabled={!profileSetter}\r\n              type=\"text\"\r\n              value={contact}\r\n              onChange={(e) => setContact(e.target.value)}\r\n              className=\"sidebarProfileInput\"\r\n              placeholder=\"Phone number...\"\r\n            />\r\n          </div>\r\n          <div className=\"sidebarProfileInputBox\" style={{ height: \"auto\" }}>\r\n            <label>Bio:</label>\r\n            <textarea\r\n              style={{\r\n                resize: \"none\",\r\n                padding: \"7px\",\r\n              }}\r\n              rows=\"5\"\r\n              cols=\"5\"\r\n              disabled={!profileSetter}\r\n              type=\"text\"\r\n              value={bio}\r\n              onChange={(e) => setBio(e.target.value)}\r\n              className=\"sidebarProfileInput\"\r\n              placeholder=\"Say something about yourself...\"\r\n            />\r\n          </div>\r\n          {profileSetter ? (\r\n            <>\r\n              <div className=\"sidebarProfileInputBox\">\r\n                <label>Skills:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={skills}\r\n                  onChange={(e) => setSkills(e.target.value)}\r\n                  className=\"sidebarProfileInput\"\r\n                  placeholder=\"Skills with comma separated...\"\r\n                />\r\n              </div>\r\n              <div className=\"sidebarProfileInputBox\">\r\n                <label>Facebook Link:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={facebook}\r\n                  onChange={(e) => setFacebook(e.target.value)}\r\n                  className=\"sidebarProfileInput\"\r\n                  placeholder=\"Give your profile page URL...\"\r\n                />\r\n              </div>\r\n              <div className=\"sidebarProfileInputBox\">\r\n                <label>Instagram Link:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={instagram}\r\n                  onChange={(e) => setInstagram(e.target.value)}\r\n                  className=\"sidebarProfileInput\"\r\n                  placeholder=\"Give your profile page URL...\"\r\n                />\r\n              </div>\r\n              <div className=\"sidebarProfileInputBox\">\r\n                <label>Github Link:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={github}\r\n                  onChange={(e) => setGithub(e.target.value)}\r\n                  className=\"sidebarProfileInput\"\r\n                  placeholder=\"Give your profile page URL...\"\r\n                />\r\n              </div>\r\n              <div className=\"sidebarProfileInputBox\">\r\n                <label>Linkedin Link:</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={linkedin}\r\n                  onChange={(e) => setLinkedin(e.target.value)}\r\n                  className=\"sidebarProfileInput\"\r\n                  placeholder=\"Give your profile page URL...\"\r\n                />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"skillListAndLinkBox\">\r\n              {skillList.length !== 0 ? (\r\n                <div className=\"skillContainer\">\r\n                  <p>Skills: </p>\r\n                  <div className=\"skillBox\">\r\n                    {skillList?.map((skill) => (\r\n                      <div className=\"skill\">{skill}</div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n\r\n              <div className=\"linkContainer\">\r\n                {facebook === \"\" || facebook === \"NoLink\" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <a href={facebook}>\r\n                    <FacebookIcon className=\"linkIcon\" />\r\n                  </a>\r\n                )}\r\n                {instagram === \"\" || instagram === \"NoLink\" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <a href={instagram}>\r\n                    <InstagramIcon className=\"linkIcon\" />\r\n                  </a>\r\n                )}\r\n                {github === \"\" || github === \"NoLink\" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <a href={github}>\r\n                    <GitHubIcon className=\"linkIcon\" />\r\n                  </a>\r\n                )}\r\n                {linkedin === \"\" || linkedin === \"NoLink\" ? (\r\n                  \"\"\r\n                ) : (\r\n                  <a href={linkedin}>\r\n                    <LinkedInIcon className=\"linkIcon\" />\r\n                  </a>\r\n                )}\r\n              </div>\r\n              <p className=\"endorsementHeading\">My Endorsements</p>\r\n              {endorsementList?.map((data) => (\r\n                <Paper elevation={3} className=\"sidebarEndContainer\">\r\n                  <div className=\"sidebarEndTopContainer\">\r\n                    <div className=\"sidebarEndCircle\">\r\n                      <Avatar\r\n                        className=\"sidebarEndProfileImage\"\r\n                        alt={data.name}\r\n                        src={data.profileImage}\r\n                      />\r\n                    </div>\r\n                    <div className=\"sidebarEndNameContainer\">\r\n                      <p>\r\n                        <PersonIcon className=\"sidebarEndIcon\" />\r\n                        {data.name}\r\n                      </p>\r\n                      <p>\r\n                        <EmailIcon className=\"sidebarEndIcon\" />\r\n                        {data.email}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"sidebarEndLinkContainer\">\r\n                      <DeleteIcon\r\n                        className=\"memberIcon\"\r\n                        style={{ cursor: \"pointer\" }}\r\n                        onClick={() => handleDelete(data.GiverId)}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"sidebarEndEndContainer\"\r\n                    style={{ color: \"#40856e\" }}\r\n                  >\r\n                    <p>{data.endorsement}</p>\r\n                  </div>\r\n                </Paper>\r\n              ))}\r\n            </div>\r\n          )}\r\n          {openSnack && (\r\n            <SnackBar\r\n              open={openSnack}\r\n              handleClose={() => setOpenSnack(false)}\r\n              text={\"Uploading...\"}\r\n              material={true}\r\n            />\r\n          )}\r\n        </div>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",["275","276"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SidebarTeams.js",["277","278","279","280","281"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TeamTodo.js",["282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Discussion.js",["303","304","305","306","307","308","309","310","311","312","313","314","315"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\sidebar\\SIdebarTimeline.js",["316","317","318"],"import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport \"./sidebar.css\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport { createMuiTheme, DialogActions } from \"@material-ui/core\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport styled from \"styled-components\";\r\nimport TimelineEdit from \"../../board/TimelineEdit\";\r\nimport { db } from \"../../../firebase\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"right\" ref={ref} {...props} />;\r\n});\r\n\r\nconst defaultMaterialTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(2, 88, 60)\",\r\n    },\r\n  },\r\n  width: \"100%\",\r\n\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n      },\r\n      input: {\r\n        color: \"rgb(0, 90, 60)\",\r\n        fontSize: \"1.2rem\",\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    MuiDialog: {\r\n      paperWidthSm: {\r\n        width: \"300px !important\",\r\n      },\r\n    },\r\n    MuiPickersDay: {\r\n      daySelected: {\r\n        backgroundColor: \"rgb(2, 88, 60)\",\r\n        [\":hover\"]: {\r\n          backgroundColor: \"rgb(2, 88, 60)\",\r\n        },\r\n      },\r\n    },\r\n    MuiButton: {\r\n      textPrimary: {\r\n        color: \"rgb(2, 88, 60)\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default function SidebarTimeline({ urlTeamName }) {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [timelineText, setTimelineText] = useState(\"\");\r\n  const [selectedStartDate, handleStartDateChange] = useState(new Date());\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n  const [openDelete, setOpenDelete] = useState(false);\r\n  const [currId, setCurrId] = useState(\"\");\r\n  const [currCardDetailedText, setCurrCardDetailedText] = useState(\"\");\r\n  const [currTimeStamp, setCurrTimeStamp] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n  const [items2, setItems2] = useState([]);\r\n  const [sort, setSort] = useState(true);\r\n  const [transitionIn, setTransitionIn] = useState(true);\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const handleSubmit = () => {\r\n    if (timelineText !== \"\") {\r\n      const date = selectedStartDate.toISOString();\r\n      let m = new Date(date).getMonth();\r\n      let x = new Date(date).getDate();\r\n      if (x < 10) {\r\n        x = \"0\" + x;\r\n      }\r\n      const year = new Date(date).getFullYear();\r\n\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .add({\r\n          cardDetailedText: timelineText,\r\n          title: monthNames[m] + \" \" + x + \",\" + \" \" + year,\r\n          timeStamp: selectedStartDate.toISOString(),\r\n        });\r\n      setTransitionIn(true);\r\n      setTimelineText(\"\");\r\n      handleStartDateChange(new Date());\r\n    }\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sort) {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .orderBy(\"timeStamp\", \"asc\")\r\n        .onSnapshot((snapshot) => {\r\n          const list = snapshot.docs.map((doc) => ({\r\n            cardDetailedText: doc.data().cardDetailedText,\r\n            title: doc.data().title,\r\n            timeStamp: doc.data().timeStamp,\r\n            id: doc.id,\r\n          }));\r\n          setItems(list);\r\n        });\r\n    } else {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .orderBy(\"timeStamp\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n          const list = snapshot.docs.map((doc) => ({\r\n            cardDetailedText: doc.data().cardDetailedText,\r\n            title: doc.data().title,\r\n            id: doc.id,\r\n            timeStamp: doc.data().timeStamp,\r\n          }));\r\n          setItems2(list);\r\n        });\r\n    }\r\n  }, [sort]);\r\n\r\n  return (\r\n    <div>\r\n      <Button className=\"addItemsTimeline\" onClick={handleClickOpen}>\r\n        Add Card\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <TimelineLeft>\r\n          <textarea\r\n            placeholder=\"Write...\"\r\n            className=\"timelineTextarea\"\r\n            value={timelineText}\r\n            onChange={(e) => setTimelineText(e.target.value)}\r\n          />\r\n          <div className=\"dataContainerTimeline\">\r\n            <h3 className=\"timeHeading\">Date</h3>\r\n            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n              <div className=\"dateBox\">\r\n                <ThemeProvider theme={defaultMaterialTheme}>\r\n                  <DatePicker\r\n                    variant=\"dialog\"\r\n                    format=\"MMMM DD, YYYY\"\r\n                    value={selectedStartDate}\r\n                    orientation=\"portrait\"\r\n                    onChange={handleStartDateChange}\r\n                    style={{\r\n                      width: \"100%\",\r\n                      textAlign: \"center\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <DateRangeIcon\r\n                          className=\"alarmModalIcon\"\r\n                          style={{ marginBottom: \"0.5rem\" }}\r\n                        />\r\n                      ),\r\n                      disableUnderline: true,\r\n                    }}\r\n                  />\r\n                </ThemeProvider>\r\n              </div>\r\n            </MuiPickersUtilsProvider>\r\n          </div>\r\n          <div style={{ display: \"flex\", width: \"96%\", marginTop: \"0.3rem\" }}>\r\n            <Button\r\n              style={{ marginRight: \"0.3rem\", flex: 0.7 }}\r\n              className=\"addButtonTimeline\"\r\n              color=\"primary\"\r\n              onClick={handleSubmit}\r\n            >\r\n              add\r\n            </Button>\r\n            <Button\r\n              style={{ flex: 0.3 }}\r\n              className=\"addButtonTimeline\"\r\n              color=\"primary\"\r\n              onClick={() => setSort(!sort)}\r\n            >\r\n              {sort ? \"Reverse\" : \"undo\"}\r\n            </Button>\r\n          </div>\r\n          <div className=\"editTimelineContainer\">\r\n            {sort\r\n              ? items?.map((item) => (\r\n                  <Slide\r\n                    in={transitionIn}\r\n                    timeout={400}\r\n                    key={item.id}\r\n                    direction=\"down\"\r\n                  >\r\n                    <div key={item.id} className=\"timelineContentBox\">\r\n                      <p className=\"timelineText\">{item.title}</p>\r\n                      <EditIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenEdit(true);\r\n                        }}\r\n                      />\r\n                      <DeleteIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenDelete(true);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </Slide>\r\n                ))\r\n              : items2?.map((item) => (\r\n                  <Slide\r\n                    in={transitionIn}\r\n                    timeout={400}\r\n                    key={item.id}\r\n                    direction=\"down\"\r\n                  >\r\n                    <div className=\"timelineContentBox\">\r\n                      <p className=\"timelineText\">{item.title}</p>\r\n                      <EditIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenEdit(true);\r\n                        }}\r\n                      />\r\n                      <DeleteIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenDelete(true);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </Slide>\r\n                ))}\r\n          </div>\r\n        </TimelineLeft>\r\n        <DialogActions>\r\n          <Button\r\n            className=\"addButtonModal\"\r\n            onClick={handleClose}\r\n            color=\"primary\"\r\n          >\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n        {openEdit && (\r\n          <TimelineEdit\r\n            open={openEdit}\r\n            handleClose={() => setOpenEdit(false)}\r\n            del={false}\r\n            urlTeamName={urlTeamName}\r\n            id={currId}\r\n            date={currTimeStamp}\r\n            content={currCardDetailedText}\r\n            setTransitionIn={setTransitionIn}\r\n          />\r\n        )}\r\n        {openDelete && (\r\n          <TimelineEdit\r\n            open={openDelete}\r\n            handleClose={() => setOpenDelete(false)}\r\n            del={true}\r\n            urlTeamName={urlTeamName}\r\n            id={currId}\r\n            date={currTimeStamp}\r\n            content={currCardDetailedText}\r\n            setTransitionIn={setTransitionIn}\r\n          />\r\n        )}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst TimelineLeft = styled.div`\r\n  width: 95.5%;\r\n  height: 100%;\r\n  flex: 1;\r\n  border-right: 2px solid rgba(0, 141, 94, 0.295);\r\n  padding: 1rem;\r\n  @media (max-height: 400px) {\r\n  }\r\n`;\r\n",["319","320"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\Board.js",["321","322"],"import {\r\n  AppBar,\r\n  Box,\r\n  Button,\r\n  makeStyles,\r\n  Tab,\r\n  Tabs,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport BoardSection from \"./BoardSection\";\r\nimport selectTeam from \"../../assets/images/selectTeam.svg\";\r\nimport Timeline from \"./Timeline\";\r\nimport { generateMedia } from \"styled-media-query\";\r\nimport { db } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport SidebarTeams from \"../todo/sidebar/SidebarTeams\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={1}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: \"transparent\",\r\n    width: \"100%\",\r\n    overflow: \"hidden\",\r\n  },\r\n  AppBar: {\r\n    backgroundColor: \"transparent !important\",\r\n    boxShadow: \"none\",\r\n    color: \"#000\",\r\n    marginTop: \"-1rem\",\r\n    paddingTop: \"0.5rem\",\r\n    maxWidth: \"20rem\",\r\n  },\r\n  Tabs: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    padding: 0,\r\n    minHeight: \"1rem\",\r\n  },\r\n  indicator: {\r\n    backgroundColor: \"rgb(5, 185, 125)\",\r\n    height: 3,\r\n    borderRadius: \"7px\",\r\n    width: \"9rem\",\r\n  },\r\n  label: {\r\n    fontStyle: \"normal\",\r\n    fontWeight: \"500\",\r\n    fontSize: \"0.6rem\",\r\n    color: \"#565656\",\r\n    textTransform: \"uppercase\",\r\n    paddingTop: \"10px\",\r\n    borderRadius: \"10px 10px 0 0\",\r\n  },\r\n  flexContainer: {\r\n    borderBottom: \"2px solid rgba(196, 196, 196, 0.5)\",\r\n  },\r\n}));\r\n\r\nfunction Board({ urlTeamName, userName, setTabValue, profileImage }) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const [currTeamAdmin, setCurrTeamAdmin] = React.useState(false);\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  useEffect(() => {\r\n    db.collection(\"teams\").onSnapshot((snapshot) => {\r\n      snapshot.docs.filter(\r\n        (doc) =>\r\n          doc.id === urlTeamName &&\r\n          doc.data().admin === currentUser.uid &&\r\n          setCurrTeamAdmin(true)\r\n      );\r\n    });\r\n  }, [urlTeamName]);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  return urlTeamName === undefined || urlTeamName.split(\"-\")[0] === \"chats\" ? (\r\n    <div\r\n      style={{\r\n        height: \"89%\",\r\n        width: \"100%\",\r\n        position: \"absolute\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <img src={selectTeam} style={{ height: \"13rem\", width: \"13rem\" }} />\r\n\r\n      <Button\r\n        className=\"uploadView\"\r\n        style={{\r\n          padding: \"0.5rem\",\r\n          marginTop: \"1rem\",\r\n          fontSize: \"0.8rem\",\r\n          height: \"1.2rem\",\r\n          color: \"#fff\",\r\n          backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n          marginBottom: \"0.2rem\",\r\n          textTransform: \"none\",\r\n        }}\r\n        onClick={() => setTabValue(1)}\r\n      >\r\n        Select a team to view\r\n      </Button>\r\n    </div>\r\n  ) : (\r\n    <BoardContainer>\r\n      {!isSmall ? (\r\n        <SidebarTeams\r\n          UrlTeamName={urlTeamName}\r\n          userName={userName}\r\n          discussion={true}\r\n        />\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <AppBar className={classes.AppBar} position=\"static\">\r\n        <Tabs\r\n          classes={{\r\n            indicator: classes.indicator,\r\n            flexContainer: classes.flexContainer,\r\n          }}\r\n          variant=\"fullWidth\"\r\n          scrollButtons=\"auto\"\r\n          className={classes.Tabs}\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n          style={{ position: \"relative\" }}\r\n        >\r\n          <Tab className={classes.label} label=\"PLAN\" {...a11yProps(0)} />\r\n          <Tab className={classes.label} label=\"TIMELINE\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel\r\n        style={{\r\n          width: \"100%\",\r\n          marginBottom: \"0.5rem\",\r\n        }}\r\n        value={value}\r\n        index={0}\r\n      >\r\n        <BoardSection\r\n          urlTeamName={urlTeamName}\r\n          userName={userName}\r\n          profileImage={profileImage}\r\n          setTabValue={setTabValue}\r\n          currTeamAdmin={currTeamAdmin}\r\n        />\r\n      </TabPanel>\r\n      <TabPanel\r\n        style={{\r\n          width: \"100%\",\r\n          marginBottom: \"0.5rem\",\r\n        }}\r\n        value={value}\r\n        index={1}\r\n      >\r\n        <Timeline\r\n          urlTeamName={urlTeamName}\r\n          userName={userName}\r\n          profileImage={profileImage}\r\n          setTabValue={setTabValue}\r\n        />\r\n      </TabPanel>\r\n    </BoardContainer>\r\n  );\r\n}\r\n\r\nexport default Board;\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: \"1350px\",\r\n  mdDesktop: \"1150px\",\r\n  tablet: \"820px\",\r\n  smTablet: \"600px\",\r\n});\r\n\r\nconst BoardContainer = styled.div`\r\n  width: 100%;\r\n  height: 89%;\r\n  position: absolute;\r\n  overflow: \"hidden\";\r\n  ${customMedia.lessThan(\"tablet\")`\r\n      overflow-x:scroll;\r\n    `};\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\PersonalTodo.js",["323","324","325","326","327","328","329","330","331","332","333","334","335","336"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\notification\\Notification.js",["337","338","339","340"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\TimelineEdit.js",["341","342","343","344","345"],"import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { db } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport firebase from \"firebase\";\r\nimport {\r\n  createMuiTheme,\r\n  Fade,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport \"./style.css\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport AlarmIcon from \"@material-ui/icons/AddAlarm\";\r\n\r\nconst defaultMaterialTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(2, 88, 60)\",\r\n    },\r\n  },\r\n  width: \"100%\",\r\n\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n      },\r\n      input: {\r\n        color: \"rgb(0, 90, 60)\",\r\n        fontSize: \"1.2rem\",\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    MuiDialog: {\r\n      paperWidthSm: {\r\n        width: \"300px !important\",\r\n      },\r\n    },\r\n    MuiPickersDay: {\r\n      daySelected: {\r\n        backgroundColor: \"rgb(2, 88, 60)\",\r\n        [\":hover\"]: {\r\n          backgroundColor: \"rgb(2, 88, 60)\",\r\n        },\r\n      },\r\n    },\r\n    MuiButton: {\r\n      textPrimary: {\r\n        color: \"rgb(2, 88, 60)\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  const theme = useTheme();\r\n  return useMediaQuery(theme.breakpoints.down(\"sm\")) ? (\r\n    <Slide direction=\"left\" ref={ref} {...props} />\r\n  ) : (\r\n    <Fade direction=\"\" ref={ref} {...props} />\r\n  );\r\n});\r\n\r\nexport default function TimelineEdit({\r\n  open,\r\n  handleClose,\r\n  del,\r\n  urlTeamName,\r\n  id,\r\n  date,\r\n  content,\r\n  title,\r\n}) {\r\n  const [todoText, setTodoText] = useState(content);\r\n  const [selectedStartDate, handleStartDateChange] = useState(new Date(date));\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  const handleSubmit = () => {\r\n    if (todoText !== \"\") {\r\n      const date = selectedStartDate.toISOString();\r\n      let m = new Date(date).getMonth();\r\n      let x = new Date(date).getDate();\r\n      if (x < 10) {\r\n        x = \"0\" + x;\r\n      }\r\n      const year = new Date(date).getFullYear();\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .doc(id)\r\n        .set(\r\n          {\r\n            cardDetailedText: todoText,\r\n            title: monthNames[m] + \" \" + x + \",\" + \" \" + year,\r\n            timeStamp: selectedStartDate.toISOString(),\r\n          },\r\n          { merge: true }\r\n        );\r\n      handleClose();\r\n    }\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    db.collection(\"teams\")\r\n      .doc(urlTeamName)\r\n      .collection(\"timeline\")\r\n      .doc(id)\r\n      .delete();\r\n\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      onClose={handleClose}\r\n      fullScreen={!isSmall}\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle\r\n        id=\"alert-dialog-slide-title\"\r\n        className=\"modalTitle\"\r\n        style={{ paddingLeft: \"30px\" }}\r\n      >\r\n        {del ? \"Are you sure?\" : `Edit card   ( ${title} )`}\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          {del ? (\r\n            `The content with the date ( ${title} ) will the deleted and cannot be retrieved. `\r\n          ) : (\r\n            <>\r\n              <textarea\r\n                placeholder=\"Write...\"\r\n                className=\"todoTextarea\"\r\n                value={todoText}\r\n                onChange={(e) => setTodoText(e.target.value)}\r\n                style={{ height: \"5rem\" }}\r\n              />\r\n              <div style={{ display: isSmall && \"flex\" }}>\r\n                <div className=\"dataContainer\">\r\n                  <h3 className=\"timeHeading\">Date</h3>\r\n                  <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                    <div className=\"dateBox\">\r\n                      <ThemeProvider theme={defaultMaterialTheme}>\r\n                        <DatePicker\r\n                          variant=\"dialog\"\r\n                          format=\"MMMM DD, YYYY\"\r\n                          value={selectedStartDate}\r\n                          orientation=\"portrait\"\r\n                          onChange={handleStartDateChange}\r\n                          style={{\r\n                            width: \"100%\",\r\n                            textAlign: \"center\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                          InputProps={{\r\n                            endAdornment: (\r\n                              <AlarmIcon className=\"alarmModalIcon\" />\r\n                            ),\r\n                            disableUnderline: true,\r\n                          }}\r\n                        />\r\n                      </ThemeProvider>\r\n                    </div>\r\n                  </MuiPickersUtilsProvider>\r\n                </div>\r\n                <div style={{ flex: 1 }}></div>\r\n                <div style={{ display: \"flex\" }}>\r\n                  {\" \"}\r\n                  <Button\r\n                    className=\"addButtonModal\"\r\n                    onClick={handleClose}\r\n                    color=\"primary\"\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  <Button\r\n                    className=\"addButtonModal\"\r\n                    color=\"primary\"\r\n                    onClick={handleSubmit}\r\n                  >\r\n                    save\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions style={{ paddingRight: \"22px\" }}>\r\n        {del && (\r\n          <>\r\n            {\" \"}\r\n            <Button\r\n              className=\"addButtonModal\"\r\n              onClick={handleClose}\r\n              color=\"primary\"\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button\r\n              className=\"addButtonModal\"\r\n              color=\"primary\"\r\n              onClick={handleDelete}\r\n            >\r\n              delete\r\n            </Button>\r\n          </>\r\n        )}\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\Timeline.js",["346","347","348"],"import React, { useEffect, useState } from \"react\";\r\nimport styled, { ThemeProvider } from \"styled-components\";\r\nimport { Chrono } from \"react-chrono\";\r\nimport \"./style.css\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport {\r\n  Button,\r\n  createMuiTheme,\r\n  Slide,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport DateRangeIcon from \"@material-ui/icons/DateRange\";\r\nimport { db } from \"../../firebase\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport TimelineEdit from \"./TimelineEdit\";\r\nimport SidebarTimeline from \"../todo/sidebar/SIdebarTimeline\";\r\nimport { generateMedia } from \"styled-media-query\";\r\n\r\nconst defaultMaterialTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(2, 88, 60)\",\r\n    },\r\n  },\r\n  width: \"100%\",\r\n\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n      },\r\n      input: {\r\n        color: \"rgb(0, 90, 60)\",\r\n        fontSize: \"1.2rem\",\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    MuiDialog: {\r\n      paperWidthSm: {\r\n        width: \"300px !important\",\r\n      },\r\n    },\r\n    MuiPickersDay: {\r\n      daySelected: {\r\n        backgroundColor: \"rgb(2, 88, 60)\",\r\n        [\":hover\"]: {\r\n          backgroundColor: \"rgb(2, 88, 60)\",\r\n        },\r\n      },\r\n    },\r\n    MuiButton: {\r\n      textPrimary: {\r\n        color: \"rgb(2, 88, 60)\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nfunction Timeline({ urlTeamName }) {\r\n  const [timelineText, setTimelineText] = useState(\"\");\r\n  const [selectedStartDate, handleStartDateChange] = useState(new Date());\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n  const [openDelete, setOpenDelete] = useState(false);\r\n  const [currId, setCurrId] = useState(\"\");\r\n  const [currCardDetailedText, setCurrCardDetailedText] = useState(\"\");\r\n  const [currTimeStamp, setCurrTimeStamp] = useState(\"\");\r\n  const [currTitle, setCurrTitle] = useState(\"\");\r\n  const [items, setItems] = useState([]);\r\n  const [items2, setItems2] = useState([]);\r\n  const [sort, setSort] = useState(true);\r\n  const [transitionIn, setTransitionIn] = useState(true);\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n  const handleSubmit = () => {\r\n    if (timelineText !== \"\") {\r\n      const date = selectedStartDate.toISOString();\r\n      let m = new Date(date).getMonth();\r\n      let x = new Date(date).getDate();\r\n      if (x < 10) {\r\n        x = \"0\" + x;\r\n      }\r\n      const year = new Date(date).getFullYear();\r\n\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .add({\r\n          cardDetailedText: timelineText,\r\n          title: monthNames[m] + \" \" + x + \",\" + \" \" + year,\r\n          timeStamp: selectedStartDate.toISOString(),\r\n        });\r\n      setTransitionIn(true);\r\n      setTimelineText(\"\");\r\n      handleStartDateChange(new Date());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sort) {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .orderBy(\"timeStamp\", \"asc\")\r\n        .onSnapshot((snapshot) => {\r\n          const list = snapshot.docs.map((doc) => ({\r\n            cardDetailedText: doc.data().cardDetailedText,\r\n            title: doc.data().title,\r\n            timeStamp: doc.data().timeStamp,\r\n            id: doc.id,\r\n          }));\r\n          setItems(list);\r\n        });\r\n    } else {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"timeline\")\r\n        .orderBy(\"timeStamp\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n          const list = snapshot.docs.map((doc) => ({\r\n            cardDetailedText: doc.data().cardDetailedText,\r\n            title: doc.data().title,\r\n            id: doc.id,\r\n            timeStamp: doc.data().timeStamp,\r\n          }));\r\n          setItems2(list);\r\n        });\r\n    }\r\n  }, [sort]);\r\n  return (\r\n    <TimelineContainer>\r\n      {!isSmall ? (\r\n        <SidebarTimeline urlTeamName={urlTeamName} />\r\n      ) : (\r\n        <TimelineLeft>\r\n          <textarea\r\n            placeholder=\"Write...\"\r\n            className=\"timelineTextarea\"\r\n            value={timelineText}\r\n            onChange={(e) => setTimelineText(e.target.value)}\r\n          />\r\n          <div className=\"dataContainerTimeline\">\r\n            <h3 className=\"timeHeading\">Date</h3>\r\n            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n              <div className=\"dateBox\">\r\n                <ThemeProvider theme={defaultMaterialTheme}>\r\n                  <DatePicker\r\n                    variant=\"dialog\"\r\n                    format=\"MMMM DD, YYYY\"\r\n                    value={selectedStartDate}\r\n                    orientation=\"portrait\"\r\n                    onChange={handleStartDateChange}\r\n                    style={{\r\n                      width: \"100%\",\r\n                      textAlign: \"center\",\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <DateRangeIcon\r\n                          className=\"alarmModalIcon\"\r\n                          style={{ marginBottom: \"0.5rem\" }}\r\n                        />\r\n                      ),\r\n                      disableUnderline: true,\r\n                    }}\r\n                  />\r\n                </ThemeProvider>\r\n              </div>\r\n            </MuiPickersUtilsProvider>\r\n          </div>\r\n          <div style={{ display: \"flex\", width: \"96%\", marginTop: \"0.3rem\" }}>\r\n            <Button\r\n              style={{ flex: 0.3 }}\r\n              className=\"addButtonTimeline\"\r\n              color=\"primary\"\r\n              onClick={() => setSort(!sort)}\r\n            >\r\n              {sort ? \"Reverse\" : \"undo\"}\r\n            </Button>\r\n            <Button\r\n              style={{ marginLeft: \"0.3rem\", flex: 0.7 }}\r\n              className=\"addButtonTimeline\"\r\n              color=\"primary\"\r\n              onClick={handleSubmit}\r\n            >\r\n              add\r\n            </Button>\r\n          </div>\r\n          <div className=\"editTimelineContainer\">\r\n            {sort\r\n              ? items?.map((item) => (\r\n                  <Slide\r\n                    in={transitionIn}\r\n                    timeout={400}\r\n                    key={item.id}\r\n                    direction=\"down\"\r\n                  >\r\n                    <div key={item.id} className=\"timelineContentBox\">\r\n                      <p className=\"timelineText\">{item.title}</p>\r\n                      <EditIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrTitle(item.title);\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenEdit(true);\r\n                        }}\r\n                      />\r\n                      <DeleteIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrTitle(item.title);\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenDelete(true);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </Slide>\r\n                ))\r\n              : items2?.map((item) => (\r\n                  <Slide\r\n                    in={transitionIn}\r\n                    timeout={400}\r\n                    key={item.id}\r\n                    direction=\"down\"\r\n                  >\r\n                    <div className=\"timelineContentBox\">\r\n                      <p className=\"timelineText\">{item.title}</p>\r\n                      <EditIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenEdit(true);\r\n                        }}\r\n                      />\r\n                      <DeleteIcon\r\n                        className=\"timelineEditIcons\"\r\n                        onClick={() => {\r\n                          setCurrId(item.id);\r\n                          setCurrTimeStamp(item.timeStamp);\r\n                          setCurrCardDetailedText(item.cardDetailedText);\r\n                          setOpenDelete(true);\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </Slide>\r\n                ))}\r\n          </div>\r\n        </TimelineLeft>\r\n      )}\r\n      {isSmall && <TimelineSpace></TimelineSpace>}\r\n      <TimelineRight>\r\n        <Chrono\r\n          items={sort ? items : items2}\r\n          mode={!isSmall ? \"VERTICAL\" : \"VERTICAL_ALTERNATING\"}\r\n          slideShow\r\n          cardHeight={150}\r\n          slideItemDuration={4000}\r\n          allowDynamicUpdate={true}\r\n          disableNavOnKey={true}\r\n          theme={{ primary: \"#0FBB82\", secondary: \"rgba(3, 185, 124, 0.308)\" }}\r\n        />\r\n      </TimelineRight>\r\n      {isSmall && <TimelineSpace></TimelineSpace>}\r\n      {openEdit && (\r\n        <TimelineEdit\r\n          open={openEdit}\r\n          handleClose={() => setOpenEdit(false)}\r\n          del={false}\r\n          urlTeamName={urlTeamName}\r\n          id={currId}\r\n          title={currTitle}\r\n          date={currTimeStamp}\r\n          content={currCardDetailedText}\r\n          setTransitionIn={setTransitionIn}\r\n        />\r\n      )}\r\n      {openDelete && (\r\n        <TimelineEdit\r\n          open={openDelete}\r\n          handleClose={() => setOpenDelete(false)}\r\n          del={true}\r\n          urlTeamName={urlTeamName}\r\n          id={currId}\r\n          title={currTitle}\r\n          date={currTimeStamp}\r\n          content={currCardDetailedText}\r\n          setTransitionIn={setTransitionIn}\r\n        />\r\n      )}\r\n    </TimelineContainer>\r\n  );\r\n}\r\n\r\nexport default Timeline;\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: \"1350px\",\r\n  mdDesktop: \"1150px\",\r\n  tablet: \"960px\",\r\n  smTablet: \"600px\",\r\n});\r\n\r\nconst TimelineContainer = styled.div`\r\n  width: 97.5%;\r\n  height: 93%;\r\n  position: absolute;\r\n  display: flex;\r\n  ${customMedia.lessThan(\"smTablet\")`\r\n      flex-direction:column;\r\n      width: 92.5%;\r\n  `};\r\n`;\r\n\r\nconst TimelineLeft = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  flex: 3;\r\n  border-right: 2px solid rgba(0, 141, 94, 0.295);\r\n`;\r\n\r\nconst TimelineRight = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  flex: 6;\r\n  position: relative;\r\n  z-index: 100;\r\n  ${customMedia.lessThan(\"smTablet\")`\r\n   flex: 0.9;\r\n    height: 93%;\r\n  `};\r\n  @media (max-height: 550px) {\r\n    height: 85% !important;\r\n  }\r\n`;\r\n\r\nconst TimelineSpace = styled.div`\r\n  flex: 0.5;\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Delete.js",["349","350","351","352","353","354","355","356"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport \"./style.css\";\r\nimport { db, storage } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport firebase from \"firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Fade } from \"@material-ui/core\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Fade direction=\"\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function Delete({\r\n  open,\r\n  handleClose,\r\n  teamName,\r\n  id,\r\n  setCurrentTeamName,\r\n  setOpenDeleteSnackBar,\r\n}) {\r\n  const [cannotDelete, setCannotDelete] = React.useState(false);\r\n  const [ModalOpen, setModalOpen] = React.useState(false);\r\n\r\n  const handleCloseDeleteListModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const { currentUser } = useAuth();\r\n  const handleJoinDelete = () => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"joinTeams\")\r\n      .doc(id)\r\n      .delete();\r\n    handleClose();\r\n    setOpenDeleteSnackBar(true);\r\n    setCurrentTeamName(teamName);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    db.collection(\"teams\").onSnapshot((snapshot) => {\r\n      const tempTeamList = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        admin: doc.data().admin,\r\n      }));\r\n      var count = 0;\r\n      tempTeamList.filter((team) => {\r\n        if (team.id === teamName) {\r\n          if (team.admin === currentUser.uid) {\r\n            count = count + 1;\r\n          }\r\n        }\r\n      });\r\n      if (count !== 0) {\r\n        // callDelete();\r\n      } else {\r\n        setCannotDelete(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      onClose={handleClose}\r\n      keepMounted\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-slide-title\" className=\"title\">\r\n        {cannotDelete ? <p>Are you sure? </p> : <p>Are you sure?</p>}\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          {cannotDelete ? (\r\n            <p>\r\n              Team will be deleted on your side only. All the items and todos\r\n              will be delete for this team for you only. This will not affect\r\n              the other members.\r\n            </p>\r\n          ) : (\r\n            <p>\r\n              All the items and todo will be delete for this team and cannot be\r\n              retrieved. This will also affect the other members.\r\n            </p>\r\n          )}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button\r\n          className=\"addButtonDelete\"\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          className=\"addButtonDelete\"\r\n          onClick={\r\n            cannotDelete ? () => handleJoinDelete() : () => setModalOpen(true)\r\n          }\r\n          color=\"primary\"\r\n        >\r\n          Delete\r\n        </Button>\r\n      </DialogActions>\r\n      {ModalOpen && (\r\n        <DeleteUserTeamModal\r\n          open={ModalOpen}\r\n          handleThisClose={handleCloseDeleteListModal}\r\n          teamName={teamName}\r\n          id={id}\r\n          closeBackModal={handleClose}\r\n          currentUser={currentUser.uid}\r\n          setOpenDeleteSnackBar={setOpenDeleteSnackBar}\r\n          setCurrentTeamName={setCurrentTeamName}\r\n        />\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nfunction DeleteUserTeamModal({\r\n  open,\r\n  handleThisClose,\r\n  teamName,\r\n  id,\r\n  closeBackModal,\r\n  currentUser,\r\n  setOpenDeleteSnackBar,\r\n  setCurrentTeamName,\r\n}) {\r\n  const [todoSideDelete, setTodoSideDelete] = React.useState(false);\r\n  const [userSideDelete, setUserSideDelete] = React.useState(false);\r\n  const [databaseSideDelete, setDatabaseSideDelete] = React.useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const userTeamDelete = () => {\r\n    db.collection(\"teams\").doc(teamName).set(\r\n      {\r\n        teamDeleted: true,\r\n      },\r\n      { merge: true }\r\n    );\r\n\r\n    db.collection(\"users\")\r\n      .doc(currentUser)\r\n      .collection(\"userTeams\")\r\n      .doc(id)\r\n      .delete();\r\n\r\n    setUserSideDelete(true);\r\n    setOpenDeleteSnackBar(true);\r\n    setCurrentTeamName(teamName);\r\n    history.push(\"/home\");\r\n  };\r\n\r\n  const databaseDelete = () => {\r\n    db.collection(\"teams\").doc(teamName).delete();\r\n    setDatabaseSideDelete(true);\r\n  };\r\n\r\n  const deleteAllTodo = (todo) => {\r\n    todo.map((doc) => {\r\n      db.collection(\"teams\")\r\n        .doc(teamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(doc.id)\r\n        .collection(\"teamTodoImages\")\r\n        .onSnapshot((snapshot) => {\r\n          const list = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            todoImage: doc.data().todoImage,\r\n          }));\r\n          if (list.length !== 0) {\r\n            list.forEach((file) => {\r\n              storage.refFromURL(file.todoImage).delete();\r\n            });\r\n          }\r\n        });\r\n\r\n      db.collection(\"teams\")\r\n        .doc(teamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(doc.id)\r\n        .delete();\r\n    });\r\n  };\r\n\r\n  const todoDelete = () => {\r\n    db.collection(\"teams\")\r\n      .doc(teamName)\r\n      .collection(\"teamTodos\")\r\n      .onSnapshot((snapshot) => {\r\n        const todoDeleteList = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          todoImage: doc.data().todoImage,\r\n        }));\r\n\r\n        console.log(todoDeleteList);\r\n        deleteAllTodo(todoDeleteList);\r\n      });\r\n\r\n    setTodoSideDelete(true);\r\n  };\r\n\r\n  const handleCompleteClose = () => {\r\n    handleThisClose();\r\n    closeBackModal();\r\n  };\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      keepMounted\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle\r\n        id=\"alert-dialog-slide-title\"\r\n        className=\"title\"\r\n      ></DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n            <h3 style={{ paddingBottom: \"1rem\" }}>\r\n              Help us to delete it from both place\r\n            </h3>\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <p style={{ flex: 0.7 }}>Delete all todos: </p>\r\n              <Button\r\n                disabled={todoSideDelete ? true : false}\r\n                // className=\"addButton\"\r\n                className={todoSideDelete ? \"addButtonDisabled\" : \"addButton\"}\r\n                style={{ flex: 0.3 }}\r\n                onClick={() => todoDelete()}\r\n              >\r\n                {todoSideDelete ? \"deleted\" : \"delete\"}\r\n              </Button>\r\n            </div>\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <p style={{ flex: 0.7 }}>Delete from your side: </p>\r\n              <Button\r\n                disabled={\r\n                  todoSideDelete ? (userSideDelete ? true : false) : true\r\n                }\r\n                // className=\"addButton\"\r\n\r\n                className={\r\n                  todoSideDelete\r\n                    ? userSideDelete\r\n                      ? \"addButtonDisabled\"\r\n                      : \"addButton\"\r\n                    : \"addButtonDisabled\"\r\n                }\r\n                style={{ flex: 0.3 }}\r\n                onClick={() => userTeamDelete()}\r\n              >\r\n                {userSideDelete ? \"deleted\" : \"delete\"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n\r\n      <DialogActions>\r\n        <Button\r\n          className=\"addButton\"\r\n          onClick={() => handleCompleteClose()}\r\n          color=\"primary\"\r\n          disabled={userSideDelete && todoSideDelete ? false : true}\r\n          className={\r\n            todoSideDelete && userSideDelete ? \"addButton\" : \"addButtonDisabled\"\r\n          }\r\n        >\r\n          Done\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\index.js",[],["357","358"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\home\\Home.js",["359","360","361"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\Endo.js",["362","363"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { db } from \"../../firebase\";\r\nimport EndoCards from \"./EndoCards\";\r\nimport { useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport nothing from \"../../assets/images/nothing.svg\";\r\n\r\nfunction Endo() {\r\n  const [allEndoIdList, setAllEndoIdList] = useState([]);\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const getAllMembers = () => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"endorsement\")\r\n      .onSnapshot((snapshot) => {\r\n        const endoIdList = snapshot.docs.map((doc) => ({\r\n          giverId: doc.data().giverId,\r\n          giverEndorsement: doc.data().giverEndorsement,\r\n        }));\r\n        setAllEndoIdList(endoIdList);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllMembers();\r\n  }, []);\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        overflowY: \"scroll\",\r\n        marginBottom: \"0.5rem\",\r\n        height: \"74vh\",\r\n      }}\r\n    >\r\n      {allEndoIdList.length === 0 && (\r\n        <div\r\n          style={{\r\n            height: \"60%\",\r\n            width: isSmall ? \"60%\" : \"89%\",\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"column\",\r\n            color: \"rgb(5, 185, 125)\",\r\n          }}\r\n        >\r\n          <img src={nothing} style={{ height: \"13rem\", width: \"13rem\" }} />\r\n\r\n          <p style={{ marginLeft: \"2rem\" }}>Nothing to show</p>\r\n        </div>\r\n      )}\r\n      {allEndoIdList?.map((endo) => (\r\n        <EndoCards\r\n          key={endo.giverId}\r\n          memberId={currentUser.uid}\r\n          giverId={endo.giverId}\r\n          giverEndorsement={endo.giverEndorsement}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Endo;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Chat.js",["364","365","366","367","368","369"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\imagesModal\\DownloadImageModal.js",["370","371","372","373"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport { Fade } from \"@material-ui/core\";\r\nimport OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useAuth } from \"../../../context/AuthContext\";\r\nimport { db, storage } from \"../../../firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Fade direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function DownloadImageModal({\r\n  open,\r\n  handleClose,\r\n  link,\r\n  senderId,\r\n  imageId,\r\n  urlTeamName,\r\n  id,\r\n  imageList,\r\n  handleCloseImageModal,\r\n  setImageList,\r\n  todoText,\r\n  userName,\r\n  profileImage,\r\n  setTabValue,\r\n}) {\r\n  const { currentUser } = useAuth();\r\n  const [sure, setSure] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [imageChatText, setImageChatText] = useState(\"\");\r\n\r\n  const handleDeleteImage = async () => {\r\n    var desertRef = storage.refFromURL(link);\r\n    desertRef\r\n      .delete()\r\n      .then(function () {\r\n        console.log(\"File deleted successfully\");\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n\r\n    db.collection(\"teams\")\r\n      .doc(urlTeamName)\r\n      .collection(\"teamTodos\")\r\n      .doc(id)\r\n      .collection(\"teamTodoImages\")\r\n      .doc(imageId)\r\n      .delete();\r\n\r\n    let _list = [...imageList];\r\n    setImageList(_list.filter((img) => imageId !== img.id));\r\n    if (imageList.length === 1) {\r\n      handleCloseImageModal();\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  const sentToDiscussion = () => {\r\n    if (imageChatText !== \"\") {\r\n      db.collection(\"teams\").doc(urlTeamName).collection(\"discussion\").add({\r\n        discussionText: imageChatText,\r\n        teamTodoText: todoText,\r\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        senderId: currentUser.uid,\r\n        senderProfileImage: profileImage,\r\n        senderName: userName,\r\n        discussionTime: new Date().toISOString(),\r\n        help: true,\r\n        teamTodoImage: link,\r\n      });\r\n      setTabValue(2);\r\n      handleClose();\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={open}\r\n        TransitionComponent={Transition}\r\n        keepMounted\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-slide-title\"\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <DialogContent>\r\n          {currentUser.uid === senderId && !sure && (\r\n            <Button\r\n              endIcon={\r\n                <DeleteIcon\r\n                  style={{ color: \"#fff\", transform: \"scale(0.7)\" }}\r\n                />\r\n              }\r\n              className=\"uploadView\"\r\n              style={{\r\n                overflow: \"hidden\",\r\n                fontSize: \"0.7rem\",\r\n                height: \"1.5rem\",\r\n                color: \"#fff\",\r\n                backgroundColor: \"#019966\",\r\n                marginTop: \"1rem\",\r\n                marginRight: \"1rem\",\r\n              }}\r\n              onClick={() => setSure(true)}\r\n            >\r\n              Delete Image\r\n            </Button>\r\n          )}\r\n\r\n          {sure && (\r\n            <Button\r\n              className=\"uploadView\"\r\n              style={{\r\n                overflow: \"hidden\",\r\n                fontSize: \"0.7rem\",\r\n                height: \"1.5rem\",\r\n                color: \"#fff\",\r\n                backgroundColor: \"#019966\",\r\n                marginTop: \"1rem\",\r\n              }}\r\n              onClick={() => setSure(false)}\r\n            >\r\n              back\r\n            </Button>\r\n          )}\r\n          {sure && (\r\n            <Button\r\n              className=\"uploadView\"\r\n              style={{\r\n                overflow: \"hidden\",\r\n                fontSize: \"0.7rem\",\r\n                height: \"1.5rem\",\r\n                color: \"#fff\",\r\n                backgroundColor: \"#019966\",\r\n                marginTop: \"1rem\",\r\n                marginLeft: \"1rem\",\r\n              }}\r\n              onClick={handleDeleteImage}\r\n            >\r\n              sure ?\r\n            </Button>\r\n          )}\r\n\r\n          {!sure && (\r\n            <a href={link} target=\"_blank\" style={{ textDecoration: \"none\" }}>\r\n              <Button\r\n                endIcon={\r\n                  <OpenInNewIcon\r\n                    style={{ color: \"#fff\", transform: \"scale(0.7)\" }}\r\n                  />\r\n                }\r\n                className=\"uploadView\"\r\n                style={{\r\n                  overflow: \"hidden\",\r\n                  fontSize: \"0.7rem\",\r\n                  height: \"1.5rem\",\r\n                  color: \"#fff\",\r\n                  backgroundColor: \"#019966\",\r\n                  marginTop: \"1rem\",\r\n                }}\r\n              >\r\n                Open in new tab\r\n              </Button>\r\n            </a>\r\n          )}\r\n        </DialogContent>\r\n        <DialogContent style={{ color: \"#019966\" }}>\r\n          Ask in chat\r\n          {error && (\r\n            <p style={{ color: \"rgba(185, 5, 5, 0.7)\", fontSize: \"10px\" }}>\r\n              *Please add some description or title\r\n            </p>\r\n          )}\r\n          <textarea\r\n            defaultValue={imageChatText}\r\n            className=\"helperTextBox\"\r\n            placeholder=\"Add some description...\"\r\n            onChange={(e) => {\r\n              setError(false);\r\n              setImageChatText(e.target.value);\r\n            }}\r\n          />\r\n        </DialogContent>\r\n        <DialogContent style={{ display: \"flex\" }}>\r\n          <div style={{ flex: 1 }}></div>\r\n          <Button\r\n            className=\"uploadView\"\r\n            style={{\r\n              overflow: \"hidden\",\r\n              fontSize: \"0.7rem\",\r\n              height: \"1.5rem\",\r\n              color: \"#fff\",\r\n              backgroundColor: \"#019966\",\r\n              marginRight: \"0.5rem\",\r\n            }}\r\n            onClick={handleClose}\r\n          >\r\n            close\r\n          </Button>\r\n          <Button\r\n            className=\"uploadView\"\r\n            style={{\r\n              overflow: \"hidden\",\r\n              fontSize: \"0.7rem\",\r\n              height: \"1.5rem\",\r\n              color: \"#fff\",\r\n              backgroundColor: \"#019966\",\r\n              marginRight: \"0.5rem\",\r\n            }}\r\n            onClick={sentToDiscussion}\r\n          >\r\n            Ask\r\n          </Button>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\slogger\\Slogger.js",["374","375","376","377","378","379","380","381","382"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\DonutChart.js",["383","384","385"],"import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\nimport { db } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport CustomTooltip from \"../CustomTooltip\";\r\nimport { generateMedia } from \"styled-media-query\";\r\n\r\nfunction DonutChart({ todoLength }) {\r\n  const [data, setData] = useState({});\r\n  const [checkCount, setCheckCount] = useState(0);\r\n  const { currentUser } = useAuth();\r\n  var array = [];\r\n  var colors = [];\r\n\r\n  function getRandomColor() {\r\n    var letters = \"0123456789ABCDEF\";\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (todoLength !== 0) {\r\n      for (var i = 0; i < todoLength; i++) {\r\n        array.push(10);\r\n        const color = getRandomColor();\r\n        colors.push(color);\r\n      }\r\n    }\r\n    setData({\r\n      datasets: [\r\n        {\r\n          data: array,\r\n          backgroundColor: colors,\r\n        },\r\n      ],\r\n    });\r\n  }, [todoLength]);\r\n\r\n  const handleCheckLength = (list) => {\r\n    const check = list.filter((check) => {\r\n      if (check.checked === true) {\r\n        return check;\r\n      }\r\n    });\r\n    const c = check.length;\r\n    setCheckCount(c);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"todos\")\r\n      .onSnapshot((snapshot) => {\r\n        const list = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          todoText: doc.data().todoText,\r\n          todoDate: doc.data().todoDate,\r\n          checked: doc.data().checked,\r\n        }));\r\n\r\n        handleCheckLength(list);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <CustomTooltip title=\"Visual representation of total work\" placement=\"top\">\r\n      <ChartContainer>\r\n        <Doughnut\r\n          data={data}\r\n          options={{\r\n            maintainAspectRatio: false,\r\n            tooltips: {\r\n              enabled: false,\r\n            },\r\n          }}\r\n          height={200}\r\n          width={200}\r\n        ></Doughnut>\r\n\r\n        <CustomTooltip\r\n          title={\r\n            Math.floor((checkCount / todoLength) * 100) === 0\r\n              ? `${Math.floor(\r\n                  (checkCount / todoLength) * 100\r\n                )}% of work is done`\r\n              : `Congrats: ${Math.floor(\r\n                  (checkCount / todoLength) * 100\r\n                )}% of work is done`\r\n          }\r\n          placement=\"top\"\r\n        >\r\n          <Percentage>\r\n            {Math.floor((checkCount / todoLength) * 100)}%\r\n          </Percentage>\r\n        </CustomTooltip>\r\n      </ChartContainer>\r\n    </CustomTooltip>\r\n  );\r\n}\r\n\r\nexport default DonutChart;\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: \"1350px\",\r\n  mdDesktop: \"1150px\",\r\n  tablet: \"960px\",\r\n  smTablet: \"600px\",\r\n});\r\n\r\nconst ChartContainer = styled.div`\r\n  margin-top: 1rem;\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n\r\n  ${customMedia.lessThan(\"smTablet\")`\r\n  margin-top:2rem;\r\n    `};\r\n`;\r\n\r\nconst Percentage = styled.p`\r\n  position: absolute;\r\n  top: 43%;\r\n  left: 43%;\r\n  font-size: 1.7rem;\r\n  font-weight: 600;\r\n  color: rgb(0, 82, 52);\r\n  cursor: pointer;\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\context\\AuthContext.js",[],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\navBar\\NavBar.js",["386","387","388"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\EndoCards.js",["389"],"import { Avatar, useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { db } from \"../../firebase\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\n\r\nfunction EndoCards({\r\n  giverId,\r\n  giverEndorsement,\r\n  memberId,\r\n  feedback,\r\n  task,\r\n  id,\r\n  teamName,\r\n}) {\r\n  const [member, setMember] = useState({});\r\n  const [loader, setLoader] = useState(false);\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  useEffect(() => {\r\n    setLoader(true);\r\n    db.collection(\"users\")\r\n      .doc(giverId)\r\n      .collection(\"profile\")\r\n      .onSnapshot((snapshot) => {\r\n        const memberDetails = snapshot.docs.map((doc) => ({\r\n          name: doc.data().name,\r\n          email: doc.data().email,\r\n          profileImage: doc.data().profileImage,\r\n        }));\r\n        setMember(memberDetails[0]);\r\n        setLoader(false);\r\n      });\r\n  }, []);\r\n\r\n  const handleDelete = () => {\r\n    if (feedback) {\r\n      db.collection(\"users\")\r\n        .doc(currentUser.uid)\r\n        .collection(\"feedback\")\r\n        .doc(id)\r\n        .delete();\r\n    } else {\r\n      db.collection(\"users\")\r\n        .doc(memberId)\r\n        .collection(\"endorsement\")\r\n        .doc(currentUser.uid)\r\n        .delete();\r\n    }\r\n  };\r\n\r\n  return loader ? (\r\n    <PuffLoader loading={loader} color=\"#2ec592\" size={30} />\r\n  ) : (\r\n    <div\r\n      style={{\r\n        margin: isSmall ? \"0.5rem 2rem\" : \"0.5rem\",\r\n        boxShadow: \"rgba(0, 0, 0, 0.24) 0px 3px 8px\",\r\n        padding: \"0.5rem\",\r\n        borderRadius: \"10px\",\r\n        overflow: \"hidden\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          padding: \"0.3rem\",\r\n        }}\r\n      >\r\n        <Avatar\r\n          src={member.profileImage}\r\n          style={{\r\n            marginRight: \"1rem\",\r\n          }}\r\n        />\r\n        <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n          <p\r\n            style={{\r\n              overflow: \"hidden\",\r\n              whiteSpace: \"nowrap\",\r\n              textOverflow: \"ellipsis\",\r\n              color: \"rgb(4, 110, 75)\",\r\n            }}\r\n          >\r\n            {member.name}\r\n          </p>\r\n          <p\r\n            style={{\r\n              overflow: \"hidden\",\r\n              whiteSpace: \"nowrap\",\r\n              textOverflow: \"ellipsis\",\r\n              color: \"rgb(4, 110, 75,0.8)\",\r\n              fontSize: \"xx-small\",\r\n            }}\r\n          >\r\n            {feedback ? teamName : member.email}\r\n          </p>\r\n        </div>\r\n        <div style={{ flex: 1 }}></div>\r\n        {giverId === currentUser.uid && (\r\n          <DeleteIcon\r\n            style={{\r\n              transform: \"scale(0.7)\",\r\n              cursor: \"pointer\",\r\n              color: \"grey\",\r\n            }}\r\n            onClick={() => handleDelete()}\r\n          />\r\n        )}\r\n      </div>\r\n      {feedback && (\r\n        <p\r\n          style={{\r\n            fontSize: \"0.7rem\",\r\n            padding: \"0.5rem\",\r\n            margin: \"0.2rem 0\",\r\n            borderRadius: \"10px\",\r\n            background: \"rgb(182, 181, 181,0.3)\",\r\n            marginRight: \"2rem\",\r\n            color: \"grey\",\r\n            wordBreak: \"break-word\",\r\n          }}\r\n        >\r\n          {task}\r\n        </p>\r\n      )}\r\n      <p style={{ fontSize: \"0.7rem\" }}>{giverEndorsement}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EndoCards;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\Schedular\\TeamSchedular.js",["390","391","392","393"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Calendar as FCalendar } from \"@fullcalendar/core\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport \"./style.css\";\r\nimport CalendarModal from \"./CalendarModal\";\r\n\r\nfunction TeamSchedular(props) {\r\n  const calendarRef = useRef(null);\r\n  const [event, setEvent] = useState([]);\r\n  const [openCalendarModal, setOpenCalendarModal] = useState(false);\r\n  const day = 60 * 60 * 24 * 1000;\r\n\r\n  React.useEffect(() => {\r\n    console.log(props.todoList);\r\n  }, []);\r\n\r\n  const getAllEvents = () => {\r\n    return props.todoList?.map((todo) => {\r\n      if (todo.priority === 3) {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.todoText,\r\n          start: new Date(todo.todoStartTime),\r\n          end: new Date(todo.todoEndTime),\r\n          backgroundColor: \"rgba(185, 5, 5, 0.8)\",\r\n          display: \"block\",\r\n        };\r\n      }\r\n      if (todo.priority === 2) {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.todoText,\r\n          start: new Date(todo.todoStartTime),\r\n          end: new Date(todo.todoEndTime),\r\n          backgroundColor: \"rgba(185, 86, 5, 0.8)\",\r\n          display: \"block\",\r\n        };\r\n      }\r\n      if (todo.priority === 1) {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.todoText,\r\n          start: new Date(todo.todoStartTime),\r\n          end: new Date(todo.todoEndTime),\r\n          backgroundColor: \"rgba(0, 99, 66, 0.8)\",\r\n          display: \"block\",\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChild(getAllEvents());\r\n    console.log(getAllEvents());\r\n  }, []);\r\n\r\n  const getChild = (data) => {\r\n    var calendarEl = document.getElementById(\"calendar\");\r\n    var calendar = new FCalendar(calendarEl, {\r\n      aspectRatio: 1.8,\r\n      weekends: true,\r\n      contentWidth: \"100%\",\r\n      height: \"auto\",\r\n      themeSystem: \"bootstrap\",\r\n      plugins: [listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n\r\n      headerToolbar: {\r\n        left: \"prev,next,today\",\r\n        center: \"title\",\r\n        right: \"listYear,dayGridMonth\",\r\n        ...props.options,\r\n      },\r\n      views: {\r\n        listYear: { buttonText: \"Schedule\" },\r\n        dayGridMonth: { buttonText: \"Month\" },\r\n      },\r\n      eventClick: function (info) {\r\n        modalFunction(info.event);\r\n\r\n        console.log(info.event);\r\n      },\r\n\r\n      defaultView: \"listWeek\",\r\n      editable: false,\r\n      selectable: false,\r\n      selectMirror: false,\r\n      dayMaxEvents: false,\r\n      customButtons: \"\",\r\n      initialEvents: data,\r\n      navLinks: true,\r\n      initialView: props.initialView,\r\n    });\r\n    console.log(calendar.getOption(\"aspectRatio\"));\r\n    calendar.render();\r\n    calendarRef.current = calendar;\r\n  };\r\n  const modalFunction = (e) => {\r\n    setEvent(e);\r\n    setOpenCalendarModal(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"schedularContainer\">\r\n      <div className=\"demo-app\">\r\n        <div className=\"demo-app-main\">\r\n          <div id=\"calendar\"></div>\r\n        </div>\r\n      </div>\r\n      {openCalendarModal && (\r\n        <CalendarModal\r\n          open={CalendarModal}\r\n          handleClose={() => setOpenCalendarModal(false)}\r\n          event={event}\r\n          getAllEvents={getAllEvents}\r\n          getChild={getChild}\r\n          setPersonalTabValue={props.setPersonalTabValue}\r\n          team={true}\r\n          urlTeamName={props.urlTeamName}\r\n          setOpenSchedular={props.setOpenSchedular}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeamSchedular;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Material.js",["394","395","396","397","398"],"import React, { useState, useEffect } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport \"./style.css\";\r\nimport \"./heightMedia.css\";\r\nimport { db, storage } from \"../../firebase\";\r\nimport SnackBar from \"../snackbar/SnackBar\";\r\nimport { Fade, useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport firebase from \"firebase\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport ImagesModal from \"./imagesModal/ImagesModal\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  const theme = useTheme();\r\n  return useMediaQuery(theme.breakpoints.down(\"sm\")) ? (\r\n    <Slide direction=\"left\" ref={ref} {...props} />\r\n  ) : (\r\n    <Fade direction=\"\" ref={ref} {...props} />\r\n  );\r\n});\r\n\r\nexport default function Material({\r\n  open,\r\n  handleClose,\r\n  id,\r\n  admin,\r\n  currentUser,\r\n  comment,\r\n  urlTeamName,\r\n  checkedBy,\r\n  todoText,\r\n  todoEndDate,\r\n  userName,\r\n  profileImage,\r\n  setTabValue,\r\n  assignedBy,\r\n  completed,\r\n}) {\r\n  const [editComment, setEditComment] = useState(comment);\r\n  const [done, setDone] = useState(false);\r\n  const [openSnack, setOpenSnack] = useState(false);\r\n  const [added, setAdded] = useState(false);\r\n  const [sent, setSent] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [openSmallTextBox, setOpenSmallTextBox] = useState(false);\r\n  const [personal, setPersonal] = useState(false);\r\n  const [discussion, setDiscussion] = useState(false);\r\n  const [showImages, setShowImages] = useState(false);\r\n  const [deadlinePassed, setDeadlinePasses] = useState(false);\r\n  const [imageList, setImageList] = useState([]);\r\n  const [imageText, setImageText] = useState(\"\");\r\n  const [openImagesModal, setOpenImagesModal] = useState(false);\r\n  const [helperText, setHelperText] = useState(\"\");\r\n  const [adminTodoText, setAdminTodoText] = useState(todoText);\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const setText = (e) => {\r\n    setEditComment(e.target.value);\r\n    setDone(true);\r\n  };\r\n\r\n  const handleSet = () => {\r\n    setDone(true);\r\n    db.collection(\"teams\").doc(urlTeamName).collection(\"teamTodos\").doc(id).set(\r\n      {\r\n        comment: editComment,\r\n      },\r\n      { merge: true }\r\n    );\r\n    setEditComment(\"\");\r\n  };\r\n\r\n  const onSelectFile = async (event) => {\r\n    setOpenSnack(true);\r\n    try {\r\n      const image = event.target.files[0];\r\n      const uploadTask = await storage\r\n        .ref(`todoImages/${image.name}`)\r\n        .put(image);\r\n      storage\r\n        .ref(\"todoImages\")\r\n        .child(image.name)\r\n        .getDownloadURL()\r\n        .then((url) => {\r\n          console.log(url);\r\n          db.collection(\"teams\")\r\n            .doc(urlTeamName)\r\n            .collection(\"teamTodos\")\r\n            .doc(id)\r\n            .collection(\"teamTodoImages\")\r\n            .add({\r\n              todoImage: url,\r\n              todoImageText: imageText,\r\n              senderId: currentUser.uid,\r\n              senderName: userName,\r\n            });\r\n        });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    setShowImages(false);\r\n    setOpenSnack(false);\r\n    setImageText(\"\");\r\n  };\r\n\r\n  const addToPersonal = () => {\r\n    if (new Date().getTime() - new Date(todoEndDate).getTime() > 86400000) {\r\n      setDeadlinePasses(true);\r\n    } else {\r\n      console.log(todoText);\r\n      db.collection(\"users\").doc(currentUser.uid).collection(\"todos\").add({\r\n        todoText: helperText,\r\n        teamTodoText: todoText,\r\n        teamName: urlTeamName,\r\n        todoStartDate: new Date().toISOString(),\r\n        todoEndDate: todoEndDate,\r\n        checked: false,\r\n        priority: 3,\r\n        timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        help: true,\r\n      });\r\n      setAdded(true);\r\n      setTabValue(0);\r\n    }\r\n  };\r\n\r\n  const sentToDiscussion = () => {\r\n    db.collection(\"teams\").doc(urlTeamName).collection(\"discussion\").add({\r\n      discussionText: helperText,\r\n      teamTodoText: todoText,\r\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      senderId: currentUser.uid,\r\n      senderProfileImage: profileImage,\r\n      senderName: userName,\r\n      discussionTime: new Date().toISOString(),\r\n      help: true,\r\n      teamTodoImage: \"\",\r\n    });\r\n    setSent(true);\r\n    setTabValue(3);\r\n  };\r\n\r\n  const handleAddTo = () => {\r\n    if (helperText.length !== 0 && helperText !== \"\" && helperText !== \" \") {\r\n      if (personal) {\r\n        addToPersonal();\r\n      } else if (discussion) {\r\n        sentToDiscussion();\r\n      }\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const getAllImages = () => {\r\n    db.collection(\"teams\")\r\n      .doc(urlTeamName)\r\n      .collection(\"teamTodos\")\r\n      .doc(id)\r\n      .collection(\"teamTodoImages\")\r\n      .onSnapshot((snapshot) => {\r\n        const list = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          todoImage: doc.data().todoImage,\r\n          todoImageText: doc.data().todoImageText,\r\n          senderId: doc.data().senderId,\r\n          senderName: doc.data().senderName,\r\n        }));\r\n\r\n        if (list.length !== 0) {\r\n          setImageList(list);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllImages();\r\n  }, []);\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      fullScreen={!isSmall}\r\n      onClose={handleClose}\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-slide-title\" className=\"title\">\r\n        Details\r\n        <div style={{ display: \"flex\" }}>\r\n          <p style={{ fontSize: \"x-small\" }}>\r\n            <span style={{ fontWeight: 600 }}>Assigned By:</span> {assignedBy}\r\n          </p>\r\n          {checkedBy !== \"\" && (\r\n            <p style={{ fontSize: \"x-small\", marginLeft: \"1rem\" }}>\r\n              <span style={{ fontWeight: 600 }}>Completed By:</span> {checkedBy}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </DialogTitle>\r\n\r\n      <DialogContent>\r\n        <DialogContentText\r\n          id=\"alert-dialog-slide-description\"\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            overflowX: \"hidden\",\r\n          }}\r\n        >\r\n          <div style={{ width: \"100%\", marginBottom: \"0.5rem\" }}>\r\n            <textarea\r\n              defaultValue={adminTodoText}\r\n              className=\"TodoTextBox\"\r\n              disabled={true}\r\n              //  onChange={(e) => setAdminTodoText(e.target.value)}\r\n            />\r\n\r\n            {error && (\r\n              <p style={{ color: \"rgba(185, 5, 5, 0.7)\", fontSize: \"10px\" }}>\r\n                *Please add some description or title\r\n              </p>\r\n            )}\r\n            {!openSmallTextBox && !showImages && !completed && (\r\n              <div style={{ flex: 1, width: \"100%\" }}>\r\n                <Button\r\n                  className=\"uploadView\"\r\n                  style={{\r\n                    overflow: \"hidden\",\r\n                    fontSize: \"0.7rem\",\r\n                    height: \"1.5rem\",\r\n                    color: \"#fff\",\r\n                    backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                    marginBottom: \"1rem\",\r\n                  }}\r\n                  onClick={() => {\r\n                    setPersonal(true);\r\n                    setDiscussion(false);\r\n                    setOpenSmallTextBox(true);\r\n                  }}\r\n                >\r\n                  {added ? \"Added\" : \"Add this to personal\"}\r\n                </Button>\r\n                <Button\r\n                  className=\"uploadView\"\r\n                  style={{\r\n                    overflow: \"hidden\",\r\n                    fontSize: \"0.7rem\",\r\n                    height: \"1.5rem\",\r\n                    color: \"#fff\",\r\n                    backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                    marginBottom: \"1rem\",\r\n                    marginLeft: \"1rem\",\r\n                  }}\r\n                  onClick={() => {\r\n                    setDiscussion(true);\r\n                    setPersonal(false);\r\n                    setOpenSmallTextBox(true);\r\n                  }}\r\n                >\r\n                  {sent ? \"Sent\" : \"Ask in group\"}\r\n                </Button>\r\n              </div>\r\n            )}\r\n            {openSmallTextBox && (\r\n              <div className=\"helperBox\">\r\n                <textarea\r\n                  defaultValue={helperText}\r\n                  className=\"helperTextBox\"\r\n                  placeholder=\"Add something more...\"\r\n                  onChange={(e) => {\r\n                    setError(false);\r\n                    setHelperText(e.target.value);\r\n                  }}\r\n                />\r\n                {deadlinePassed && (\r\n                  <p style={{ fontSize: \"0.5rem\", color: \"red\" }}>\r\n                    Deadline is passed, Cannot be added\r\n                  </p>\r\n                )}\r\n                <DialogActions>\r\n                  <Button\r\n                    startIcon={\r\n                      <ArrowBackIcon\r\n                        style={{ color: \"#fff\", transform: \"scale(0.7)\" }}\r\n                      />\r\n                    }\r\n                    onClick={() => {\r\n                      setError(false);\r\n                      setOpenSmallTextBox(false);\r\n                    }}\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      overflow: \"hidden\",\r\n                      fontSize: \"0.7rem\",\r\n                      height: \"1.5rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                      marginBottom: \"1rem\",\r\n                    }}\r\n                  >\r\n                    go back\r\n                  </Button>\r\n\r\n                  <Button\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      overflow: \"hidden\",\r\n                      fontSize: \"0.7rem\",\r\n                      height: \"1.5rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                      marginBottom: \"1rem\",\r\n                    }}\r\n                    onClick={handleAddTo}\r\n                  >\r\n                    {personal ? \"Add todo\" : \"send\"}\r\n                  </Button>\r\n                </DialogActions>\r\n              </div>\r\n            )}\r\n            {!showImages && !openSmallTextBox ? (\r\n              <>\r\n                {!completed && (\r\n                  <Button\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      overflow: \"hidden\",\r\n                      fontSize: \"0.7rem\",\r\n                      height: \"1.5rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                      marginBottom: \"1rem\",\r\n                    }}\r\n                    onClick={() => setShowImages(true)}\r\n                  >\r\n                    Add images\r\n                  </Button>\r\n                )}\r\n                {imageList.length !== 0 && (\r\n                  <Button\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      overflow: \"hidden\",\r\n                      fontSize: \"0.7rem\",\r\n                      height: \"1.5rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                      marginBottom: \"1rem\",\r\n                      marginLeft: \"1rem\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setError(false);\r\n                      setOpenImagesModal(true);\r\n                    }}\r\n                  >\r\n                    View Images {`(${imageList.length})`}\r\n                  </Button>\r\n                )}\r\n              </>\r\n            ) : (\r\n              !openSmallTextBox && (\r\n                <>\r\n                  <textarea\r\n                    defaultValue={imageText}\r\n                    className=\"helperTextBox\"\r\n                    placeholder=\"Add some description...\"\r\n                    onChange={(e) => {\r\n                      setError(false);\r\n                      setImageText(e.target.value);\r\n                    }}\r\n                  />\r\n                  <div className=\"materialMainBox\">\r\n                    <div style={{ flex: 1 }}>\r\n                      <Button\r\n                        startIcon={\r\n                          <ArrowBackIcon\r\n                            style={{ color: \"#fff\", transform: \"scale(0.7)\" }}\r\n                          />\r\n                        }\r\n                        className=\"uploadView\"\r\n                        style={{\r\n                          overflow: \"hidden\",\r\n                          fontSize: \"0.7rem\",\r\n                          height: \"1.5rem\",\r\n                          color: \"#fff\",\r\n                          backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                          marginBottom: \"1rem\",\r\n                          marginRight: \"0.5rem\",\r\n                        }}\r\n                        onClick={() => {\r\n                          setError(false);\r\n                          setShowImages(false);\r\n                        }}\r\n                      >\r\n                        go back\r\n                      </Button>\r\n                    </div>\r\n                    <div style={{ marginRight: \"0.5rem\" }}>\r\n                      {\" \"}\r\n                      <input\r\n                        hidden\r\n                        id=\"profile-image-file\"\r\n                        type=\"file\"\r\n                        accept=\"image/*\"\r\n                        onChange={(e) => onSelectFile(e, id)}\r\n                      />\r\n                      {!openSnack && (\r\n                        <Button\r\n                          className=\"uploadView\"\r\n                          style={{\r\n                            overflow: \"hidden\",\r\n                            fontSize: \"0.7rem\",\r\n                            height: \"1.5rem\",\r\n                            color: \"#fff\",\r\n                            backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                            marginBottom: \"0.5rem\",\r\n                          }}\r\n                          onClick={() => {\r\n                            if (imageText !== \"\") {\r\n                              document\r\n                                .getElementById(\"profile-image-file\")\r\n                                .click();\r\n                            } else {\r\n                              setError(true);\r\n                            }\r\n                          }}\r\n                        >\r\n                          Upload Image\r\n                        </Button>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </>\r\n              )\r\n            )}\r\n          </div>\r\n\r\n          {!openSmallTextBox && !showImages && (\r\n            <>\r\n              <textarea\r\n                defaultValue={editComment}\r\n                className=\"commentTextBox\"\r\n                placeholder=\"Add more to explain...\"\r\n                onChange={(e) => setText(e)}\r\n              />\r\n              <Button\r\n                className=\"uploadView\"\r\n                style={{\r\n                  overflow: \"hidden\",\r\n                  fontSize: \"0.7rem\",\r\n                  height: \"1.5rem\",\r\n                  color: \"#fff\",\r\n                  width: \"10%\",\r\n                  backgroundColor: \"rgb(5, 185, 125, 0.8)\",\r\n                  marginTop: \"0.5rem\",\r\n                }}\r\n                onClick={() => handleSet()}\r\n              >\r\n                {done ? \"Save\" : \"Add\"}\r\n              </Button>\r\n            </>\r\n          )}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      {openSnack && (\r\n        <SnackBar\r\n          open={openSnack}\r\n          handleClose={() => setOpenSnack(false)}\r\n          text={\"Uploading...\"}\r\n          material={true}\r\n        />\r\n      )}\r\n      <DialogActions>\r\n        <Button\r\n          className=\"closeMaterialModal\"\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </DialogActions>\r\n\r\n      {openImagesModal && (\r\n        <ImagesModal\r\n          handleOpen={openImagesModal}\r\n          setHandleOpen={setOpenImagesModal}\r\n          imageList={imageList}\r\n          urlTeamName={urlTeamName}\r\n          id={id}\r\n          setImageList={setImageList}\r\n          todoText={todoText}\r\n          userName={userName}\r\n          profileImage={profileImage}\r\n          setTabValue={setTabValue}\r\n        />\r\n      )}\r\n    </Dialog>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\firebase.js",[],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\helpPage\\EmailDialog.js",["399","400","401","402"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TeamCard.js",["403","404"],"import { Button, makeStyles, useMediaQuery, useTheme } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Delete from \"./Delete\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  Btn: {\r\n    minWidth: \"2.5rem\",\r\n  },\r\n}));\r\n\r\nfunction TeamCard({\r\n  id,\r\n  teamName,\r\n  UrlTeamName,\r\n  deleteBtn,\r\n  setOpenDeleteSnackBar,\r\n  setCurrentTeamName,\r\n  sidebarClose,\r\n  discussion,\r\n}) {\r\n  const [openDelete, setOpenDelete] = React.useState(false);\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const classes = useStyles();\r\n\r\n  const handleTeamChange = () => {\r\n    history.push(`/home/${teamName}`);\r\n    sidebarClose();\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    setOpenDelete(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpenDelete(false);\r\n  };\r\n\r\n  return UrlTeamName === teamName ? (\r\n    <div style={{ display: \"flex\", margin: \"0.1rem\" }} className=\"TeamButtons\">\r\n      <Button\r\n        className=\"TeamButtons\"\r\n        style={{\r\n          flex: discussion ? 1 : 0.95,\r\n          width: \"100%\",\r\n          height: \"auto\",\r\n          color: \"rgb(0, 94, 62)\",\r\n          fontWeight: 600,\r\n          backgroundColor: \"rgba(7, 190, 129, 0.534)\",\r\n          fontSize: \"0.7rem\",\r\n          padding: \"0.3rem\",\r\n          borderRadius: discussion ? \"5px\" : \"5px 0 0 5px\",\r\n          textAlign: \"center\",\r\n          wordBreak: \"break-word\",\r\n          border: \"2px solid rgb(0, 94, 62)\",\r\n          marginRight: 0,\r\n        }}\r\n        onClick={() => handleTeamChange()}\r\n      >\r\n        {teamName}\r\n      </Button>\r\n      {deleteBtn ? (\r\n        <Button\r\n          classes={{ root: classes.Btn }}\r\n          style={{\r\n            flex: 0.05,\r\n            background: \"rgb(2, 112, 75)\",\r\n            borderRadius: \"0 5px 5px 0\",\r\n            height: \"auto\",\r\n          }}\r\n          onClick={() => handleDelete()}\r\n        >\r\n          <DeleteIcon\r\n            style={{\r\n              fontSize: \"20px\",\r\n              color: \"#fff\",\r\n              cursor: \"pointer\",\r\n              transform: \"scale(0.8)\",\r\n            }}\r\n          />\r\n        </Button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      {openDelete && (\r\n        <Delete\r\n          open={openDelete}\r\n          handleClose={handleClose}\r\n          teamName={teamName}\r\n          id={id}\r\n          setOpenDeleteSnackBar={setOpenDeleteSnackBar}\r\n          setCurrentTeamName={setCurrentTeamName}\r\n        />\r\n      )}\r\n    </div>\r\n  ) : (\r\n    <div style={{ display: \"flex\", margin: \"0.1rem\" }}>\r\n      <Button\r\n        className=\"TeamButtons\"\r\n        style={{\r\n          flex: discussion ? 1 : 0.95,\r\n          width: \"100%\",\r\n          height: \"auto\",\r\n          color: \"rgb(0, 94, 62)\",\r\n          fontWeight: 600,\r\n          backgroundColor: \"rgba(7, 190, 129, 0.534)\",\r\n          padding: \"0.3rem\",\r\n          fontSize: \"0.7rem\",\r\n          borderRadius: discussion ? \"5px\" : \"5px 0 0 5px\",\r\n          textAlign: \"center\",\r\n          wordBreak: \"break-word\",\r\n          border: \"2px solid rgba(7, 190, 129, 0.534)\",\r\n          marginRight: 0,\r\n        }}\r\n        onClick={() => handleTeamChange()}\r\n      >\r\n        {teamName}\r\n      </Button>\r\n      {deleteBtn ? (\r\n        <Button\r\n          classes={{ root: classes.Btn }}\r\n          style={{\r\n            flex: 0.05,\r\n            background: \"rgb(2, 112, 75)\",\r\n            borderRadius: \"0 5px 5px 0\",\r\n            height: \"auto\",\r\n          }}\r\n          onClick={() => handleDelete()}\r\n        >\r\n          <DeleteIcon\r\n            style={{\r\n              fontSize: \"20px\",\r\n              color: \"#fff\",\r\n              cursor: \"pointer\",\r\n              transform: \"scale(0.8)\",\r\n            }}\r\n          />\r\n        </Button>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n\r\n      {openDelete && (\r\n        <Delete\r\n          open={openDelete}\r\n          handleClose={handleClose}\r\n          teamName={teamName}\r\n          setOpenDeleteSnackBar={setOpenDeleteSnackBar}\r\n          setCurrentTeamName={setCurrentTeamName}\r\n          id={id}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeamCard;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\BoardSection.js",["405","406","407","408"],"import { Button, makeStyles } from \"@material-ui/core\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport AddTeamTodo from \"./AddTeamTodo\";\r\nimport BoardTodo from \"./BoardTodo\";\r\nimport { db, storage } from \"../../firebase\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  addBtn: {\r\n    minWidth: \"1.3rem\",\r\n    padding: 0,\r\n    height: \"1.3rem\",\r\n  },\r\n}));\r\n\r\nfunction BoardSection({\r\n  urlTeamName,\r\n  userName,\r\n  setTabValue,\r\n  profileImage,\r\n  currTeamAdmin,\r\n}) {\r\n  const classes = useStyles();\r\n  const [openAddUpcoming, setOpenAddUpcoming] = useState(false);\r\n  const [openAddCurrent, setOpenAddCurrent] = useState(false);\r\n  const [\r\n    transitionDirectionUpcoming,\r\n    setTransitionDirectionUpcoming,\r\n  ] = useState(\"down\");\r\n  const [transitionDirectionCurrent, setTransitionDirectionCurrent] = useState(\r\n    \"down\"\r\n  );\r\n  const [teamsTodoList, setTeamsTodoList] = useState([]);\r\n\r\n  const handleDeleteAllTask = () => {\r\n    setTransitionDirectionUpcoming(\"right\");\r\n    teamsTodoList.forEach((list) => {\r\n      if (list.checked === true) {\r\n        setTimeout(() => {\r\n          db.collection(\"teams\")\r\n            .doc(urlTeamName)\r\n            .collection(\"teamTodos\")\r\n            .doc(list.id)\r\n            .collection(\"teamTodoImages\")\r\n            .onSnapshot((snapshot) => {\r\n              const list = snapshot.docs.map((doc) => ({\r\n                id: doc.id,\r\n                todoImage: doc.data().todoImage,\r\n              }));\r\n              if (list.length !== 0) {\r\n                list.forEach((file) => {\r\n                  storage.refFromURL(file.todoImage).delete();\r\n                });\r\n              }\r\n            });\r\n\r\n          db.collection(\"teams\")\r\n            .doc(urlTeamName)\r\n            .collection(\"teamTodos\")\r\n            .doc(list.id)\r\n            .delete();\r\n        }, 200);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    db.collection(\"teams\")\r\n      .doc(urlTeamName)\r\n      .collection(\"teamTodos\")\r\n      .orderBy(\"timeStamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const list = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          admin: doc.data().admin,\r\n          todoText: doc.data().todoText,\r\n          todoStartTime: doc.data().todoStartTime,\r\n          todoEndTime: doc.data().todoEndTime,\r\n          checked: doc.data().checked,\r\n          checkedBy: doc.data().checkedBy,\r\n          assignedTo: doc.data().assignedTo,\r\n          assignedBy: doc.data().assignedBy,\r\n          todoImage: doc.data().todoImage,\r\n          comment: doc.data().comment,\r\n          priority: doc.data().priority,\r\n          state: doc.data().state,\r\n          assignedById: doc.data().assignedById,\r\n          checkedByProfile: doc.data().checkedByProfile,\r\n        }));\r\n        setTeamsTodoList(list);\r\n      });\r\n  }, [urlTeamName]);\r\n\r\n  const emptyFunction = () => {};\r\n  return (\r\n    <BoardSectionContainer>\r\n      <UpcomingContainer>\r\n        <HeaderSection>\r\n          <p>UPCOMING</p>\r\n          <Button\r\n            classes={{ root: classes.addBtn }}\r\n            className=\"addButton1\"\r\n            //onClick={() => handleClickMakeTeam()}\r\n          >\r\n            <AddIcon\r\n              className=\"addIcon\"\r\n              onClick={() => setOpenAddUpcoming(true)}\r\n            />\r\n          </Button>\r\n        </HeaderSection>\r\n        <TaskContainer>\r\n          {teamsTodoList.length !== 0 &&\r\n            teamsTodoList\r\n              .filter((list) => {\r\n                if (list.state === \"upcoming\" && list.checked === false) {\r\n                  return list;\r\n                }\r\n              })\r\n              .map((todo) => (\r\n                <BoardTodo\r\n                  key={todo.id}\r\n                  id={todo.id}\r\n                  text={todo.todoText}\r\n                  startDate={todo.todoStartTime}\r\n                  endDate={todo.todoEndTime}\r\n                  checked={todo.checked}\r\n                  checkedBy={todo.checkedBy}\r\n                  admin={todo.admin}\r\n                  urlTeamName={urlTeamName}\r\n                  assigned={todo.assignedTo}\r\n                  assignedBy={todo.assignedBy}\r\n                  todoImage={todo.todoImage}\r\n                  comment={todo.comment}\r\n                  priority={todo.priority}\r\n                  userName={userName}\r\n                  assignedById={todo.assignedById}\r\n                  state={todo.state}\r\n                  transitionDirectionUpcoming={transitionDirectionUpcoming}\r\n                  setTransitionDirectionUpcoming={\r\n                    setTransitionDirectionUpcoming\r\n                  }\r\n                  setTransitionDirectionCurrent={setTransitionDirectionCurrent}\r\n                  profileImage={profileImage}\r\n                  setTabValue={setTabValue}\r\n                  checkedByProfile={todo.checkedByProfile}\r\n                  currTeamAdmin={currTeamAdmin}\r\n                />\r\n              ))}\r\n          <div style={{ height: \"2rem\", width: \"13rem\" }}></div>\r\n        </TaskContainer>\r\n      </UpcomingContainer>\r\n      <CurrentContainer>\r\n        <HeaderSection>\r\n          <p>CURRENT</p>\r\n          <Button\r\n            classes={{ root: classes.addBtn }}\r\n            className=\"addButton1\"\r\n            //onClick={() => handleClickMakeTeam()}\r\n          >\r\n            <AddIcon\r\n              className=\"addIcon\"\r\n              onClick={() => setOpenAddCurrent(true)}\r\n            />\r\n          </Button>\r\n        </HeaderSection>\r\n        <TaskContainer>\r\n          {teamsTodoList.length !== 0 &&\r\n            teamsTodoList\r\n              .filter((list) => {\r\n                if (list.state === \"current\" && list.checked === false) {\r\n                  return list;\r\n                }\r\n              })\r\n              .map((todo) => (\r\n                <BoardTodo\r\n                  key={todo.id}\r\n                  id={todo.id}\r\n                  text={todo.todoText}\r\n                  startDate={todo.todoStartTime}\r\n                  endDate={todo.todoEndTime}\r\n                  checked={todo.checked}\r\n                  checkedBy={todo.checkedBy}\r\n                  admin={todo.admin}\r\n                  urlTeamName={urlTeamName}\r\n                  assigned={todo.assignedTo}\r\n                  assignedBy={todo.assignedBy}\r\n                  todoImage={todo.todoImage}\r\n                  comment={todo.comment}\r\n                  priority={todo.priority}\r\n                  userName={userName}\r\n                  assignedById={todo.assignedById}\r\n                  state={todo.state}\r\n                  transitionDirectionUpcoming={transitionDirectionCurrent}\r\n                  setTransitionDirectionUpcoming={\r\n                    setTransitionDirectionUpcoming\r\n                  }\r\n                  setTransitionDirectionCurrent={setTransitionDirectionCurrent}\r\n                  profileImage={profileImage}\r\n                  setTabValue={setTabValue}\r\n                  checkedByProfile={todo.checkedByProfile}\r\n                  currTeamAdmin={currTeamAdmin}\r\n                />\r\n              ))}\r\n          <div style={{ height: \"2rem\", width: \"13rem\" }}></div>\r\n        </TaskContainer>\r\n      </CurrentContainer>\r\n      <CompletedContainer>\r\n        <HeaderSection>\r\n          <p>COMPLETED</p>\r\n          <Button\r\n            classes={{ root: classes.addBtn }}\r\n            className=\"addButton1\"\r\n            onClick={() => handleDeleteAllTask()}\r\n          >\r\n            <DeleteIcon\r\n              className=\"addIcon\"\r\n              style={{ transform: \"scale(0.7)\" }}\r\n            />\r\n          </Button>\r\n        </HeaderSection>\r\n        <TaskContainer>\r\n          {teamsTodoList.length !== 0 &&\r\n            teamsTodoList\r\n              .filter((list) => {\r\n                if (list.checked === true) {\r\n                  return list;\r\n                }\r\n              })\r\n              .map((todo) => (\r\n                <BoardTodo\r\n                  key={todo.id}\r\n                  id={todo.id}\r\n                  text={todo.todoText}\r\n                  startDate={todo.todoStartTime}\r\n                  endDate={todo.todoEndTime}\r\n                  checked={todo.checked}\r\n                  checkedBy={todo.checkedBy}\r\n                  admin={todo.admin}\r\n                  urlTeamName={urlTeamName}\r\n                  assigned={todo.assignedTo}\r\n                  assignedBy={todo.assignedBy}\r\n                  todoImage={todo.todoImage}\r\n                  comment={todo.comment}\r\n                  priority={todo.priority}\r\n                  userName={userName}\r\n                  assignedById={todo.assignedById}\r\n                  state={todo.state}\r\n                  transitionDirectionUpcoming={transitionDirectionUpcoming}\r\n                  setTransitionDirectionUpcoming={\r\n                    setTransitionDirectionUpcoming\r\n                  }\r\n                  setTransitionDirectionCurrent={setTransitionDirectionCurrent}\r\n                  profileImage={profileImage}\r\n                  setTabValue={setTabValue}\r\n                  checkedByProfile={todo.checkedByProfile}\r\n                  currTeamAdmin={currTeamAdmin}\r\n                />\r\n              ))}\r\n          <div style={{ height: \"2rem\", width: \"13rem\" }}></div>\r\n        </TaskContainer>\r\n      </CompletedContainer>\r\n      {openAddUpcoming && (\r\n        <AddTeamTodo\r\n          open={openAddUpcoming}\r\n          handleClose={() => setOpenAddUpcoming(false)}\r\n          urlTeamName={urlTeamName}\r\n          userName={userName}\r\n          setTransitionDirectionUpcoming={setTransitionDirectionUpcoming}\r\n        />\r\n      )}\r\n      {openAddCurrent && (\r\n        <AddTeamTodo\r\n          pri={true}\r\n          open={openAddCurrent}\r\n          handleClose={() => setOpenAddCurrent(false)}\r\n          urlTeamName={urlTeamName}\r\n          userName={userName}\r\n          setTransitionDirectionUpcoming={setTransitionDirectionCurrent}\r\n          current={true}\r\n        />\r\n      )}\r\n    </BoardSectionContainer>\r\n  );\r\n}\r\n\r\nexport default BoardSection;\r\n\r\nconst BoardSectionContainer = styled.div`\r\n  width: 100%;\r\n  height: 93%;\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\nconst UpcomingContainer = styled.div`\r\n  flex: 2.5;\r\n  width: 98%;\r\n  height: 100%;\r\n  padding: 0 0.5rem;\r\n  border-right: 2px solid rgba(0, 141, 94, 0.295);\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst HeaderSection = styled.div`\r\n  height: 1.5rem;\r\n  width: 98%;\r\n  display: flex;\r\n  align-items: center;\r\n  border-bottom: 2px solid rgba(0, 141, 94, 0.295);\r\n  p {\r\n    flex: 1;\r\n    font-size: 0.8rem;\r\n    text-align: center;\r\n    color: rgb(5, 185, 125, 0.8);\r\n  }\r\n  .addButton1 {\r\n    width: 10% !important;\r\n    color: #fff;\r\n    background-color: rgb(5, 185, 125, 0.8);\r\n    font-size: 0.9rem;\r\n    overflow: hidden;\r\n  }\r\n  .addButton1:hover {\r\n    background-color: rgb(5, 185, 125);\r\n  }\r\n  .addIcon {\r\n    transform: scale(0.8);\r\n  }\r\n`;\r\n\r\nconst TaskContainer = styled.div`\r\n  width: 98%;\r\n  height: 93%;\r\n  overflow-y: scroll;\r\n  overflow-x: hidden;\r\n`;\r\n\r\nconst CurrentContainer = styled.div`\r\n  flex: 3;\r\n  width: 98%;\r\n  height: 100%;\r\n  margin: 0 0.5rem;\r\n  padding: 0 0.5rem;\r\n  border-right: 2px solid rgba(0, 141, 94, 0.295);\r\n`;\r\nconst CompletedContainer = styled.div`\r\n  flex: 2.5;\r\n  width: 98%;\r\n  height: 100%;\r\n  margin-right: 2rem;\r\n  padding: 0 0.5rem;\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TeamTodoCard.js",["409","410"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\helpPage\\HelpPage.js",["411"],"import React, { useState } from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport { generateMedia } from \"styled-media-query\";\r\nimport styled from \"styled-components\";\r\nimport NavBar from \"../navBar/NavBar\";\r\nimport videoFaq from \"../../assets/videos/faqVideo.mp4\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { Button, useMediaQuery } from \"@material-ui/core\";\r\nimport EmailDialog from \"./EmailDialog\";\r\nimport EmailIcon from \"@material-ui/icons/Email\";\r\nimport SnackBar from \"../snackbar/SnackBar\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n    overflow: \"scroll\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nfunction HelpPage() {\r\n  const classes = useStyles();\r\n  const { resetPassword, logOut } = useAuth();\r\n  const [error, setError] = useState(false);\r\n  const [loader, setLoader] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [openEmail, setOpenEmail] = useState(false);\r\n  const [sent, setSent] = useState(false);\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const history = useHistory();\r\n\r\n  const handleChange = (set, value) => {\r\n    set(value);\r\n    setError(false);\r\n  };\r\n  const handleClose = () => {\r\n    setOpenEmail(false);\r\n  };\r\n\r\n  const handleSignOut = async () => {\r\n    await logOut();\r\n    history.push(\"/signUp\");\r\n  };\r\n\r\n  const handlePasswordChange = async () => {\r\n    if (email === \"\") {\r\n      setError(true);\r\n    } else {\r\n      try {\r\n        setLoader(true);\r\n        await resetPassword(email);\r\n        setEmail(\"\");\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <HelpPageContainer>\r\n        {!isSmall ? (\r\n          <div\r\n            style={{\r\n              width: \"92%\",\r\n              height: \"56px\",\r\n              color: \"#fff\",\r\n              background: \"rgba(0, 145, 96, 0.9)\",\r\n              paddingLeft: \"15px\",\r\n              paddingRight: \"15px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              zIndex: 100,\r\n              boxShadow:\r\n                \"rgba(50, 50, 93, 0.25) 0px 50px 100px -20px, rgba(0, 0, 0, 0.3) 0px 30px 60px -30px\",\r\n            }}\r\n          >\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Slogger\r\n            </Typography>\r\n            <Button\r\n              autoFocus\r\n              color=\"inherit\"\r\n              onClick={() => history.push(\"/home\")}\r\n            >\r\n              Home\r\n            </Button>\r\n            <Button autoFocus color=\"inherit\" onClick={() => handleSignOut()}>\r\n              Log out\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <NavBar page={1} home={true} />\r\n        )}\r\n\r\n        <HelpPageLeftBox>\r\n          <video autoPlay loop muted className=\"helpVideo\">\r\n            <source src={videoFaq} type=\"video/mp4\"></source>\r\n          </video>\r\n        </HelpPageLeftBox>\r\n        <HelpPageRightBox>\r\n          <div\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"80vh\",\r\n              overflowX: \"hidden\",\r\n              overflowY: \"scroll\",\r\n              padding: \"0 2rem\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            {\" \"}\r\n            <Button\r\n              className=\"mail\"\r\n              style={{\r\n                background: \"rgb(0, 180, 120)\",\r\n                color: \"#fff\",\r\n                width: \"30%\",\r\n                marginTop: \"2rem\",\r\n                marginBottom: \"1rem\",\r\n                overflow: \"hidden\",\r\n              }}\r\n              onClick={() => setOpenEmail(true)}\r\n              startIcon={<EmailIcon />}\r\n            >\r\n              Mail us\r\n            </Button>\r\n            <div className={classes.root}>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    Change Password\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <Typography>Type your email:</Typography>\r\n                  <InputContainer>\r\n                    <input\r\n                      type=\"email\"\r\n                      required\r\n                      placeholder=\"Email...\"\r\n                      onChange={(e) => handleChange(setEmail, e.target.value)}\r\n                    />\r\n                  </InputContainer>\r\n                  <Button\r\n                    disabled={loader}\r\n                    style={{\r\n                      background: \"rgb(0, 180, 120)\",\r\n                      color: \"#fff\",\r\n                      width: \"30%\",\r\n                    }}\r\n                    onClick={handlePasswordChange}\r\n                  >\r\n                    {loader ? \"Check Mail\" : \"Reset\"}\r\n                  </Button>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    How to use: Personal Section\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <Typography>\r\n                    1) Write the todo which you want to add then add a time to\r\n                    it.\r\n                    <br />\r\n                    2) You can all mark the todo completed by clicking on the\r\n                    checkbox in starting of every todo.\r\n                    <br />\r\n                    3) You can see completed todos and not completed todos in\r\n                    their respective sections.\r\n                    <br />\r\n                    4) A Donut chart is also visible at bottom left corner, It\r\n                    tell how much work is their and also show the percentage of\r\n                    work completed by you.\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    How to use: Team Section\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <Typography>\r\n                    1) Create or Join a team, while creating make sure the you\r\n                    have unique team name.\r\n                    <br />\r\n                    2) Add todos to your team, the todo will get appear on every\r\n                    teammate page.\r\n                    <br />\r\n                    3) You can also assign you teammate's name to a particular\r\n                    todo.\r\n                    <br />\r\n                    4) You can also add images to any particular todo, by this\r\n                    you can explain the work more easily.\r\n                    <br />\r\n                    5) If the work is done mark it complete, this check will\r\n                    appear on every teammate page.\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    How to use: Discussion Section\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \" rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <Typography>\r\n                    1) Select the team.\r\n                    <br />\r\n                    2) Start typing the message in th input box at bottom right.\r\n                    <br />\r\n                    3) Your messages can be seen by every member of that\r\n                    particular team.\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    How to use: Profile Section\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \" rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <Typography>\r\n                    1) First setup your profile.\r\n                    <br />\r\n                    2) On the right side you can select a team to get its all\r\n                    members details.\r\n                    <br />\r\n                    3) You can also endorse any group member once for their good\r\n                    work.\r\n                    <br />\r\n                    4) Your endorsements can be seen at the last of your profile\r\n                    in left.\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    Not able to see team todos\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                  }}\r\n                >\r\n                  <Typography>\r\n                    1) Check your internet connection.\r\n                    <br />\r\n                    2) Talk to team leader, may be the team was deleted.\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    Raise an issue\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <Typography>To raise an issue please go to</Typography>\r\n\r\n                  <a href=\"https://github.com/Tushardeepak/slogger-official\">\r\n                    https://github.com/Tushardeepak\r\n                  </a>\r\n\r\n                  <Typography>\r\n                    Create issue, give details and images.\r\n                  </Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n              <Accordion>\r\n                <AccordionSummary\r\n                  expandIcon={<ExpandMoreIcon />}\r\n                  aria-controls=\"panel1a-content\"\r\n                  id=\"panel1a-header\"\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60, 0.2)\",\r\n                    overflow: \"hidden\",\r\n                  }}\r\n                >\r\n                  <Typography className={classes.heading}>\r\n                    Legal Rights\r\n                  </Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails\r\n                  style={{\r\n                    background: \"rgb(0, 90, 60)\",\r\n                    color: \"white\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                  }}\r\n                >\r\n                  <Typography>All rights of Slogger belong to</Typography>\r\n\r\n                  <a href=\"https://github.com/Tushardeepak\">\r\n                    https://github.com/Tushardeepak\r\n                  </a>\r\n\r\n                  <Typography>Feel free to contact/collaborate.</Typography>\r\n                </AccordionDetails>\r\n              </Accordion>\r\n            </div>\r\n          </div>\r\n        </HelpPageRightBox>\r\n      </HelpPageContainer>\r\n      {openEmail && (\r\n        <EmailDialog\r\n          open={openEmail}\r\n          handleClose={handleClose}\r\n          setSent={setSent}\r\n        />\r\n      )}\r\n      {sent && (\r\n        <SnackBar\r\n          open={sent}\r\n          handleClose={() => setSent(false)}\r\n          text={\"Mail Sent, Thank You!\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HelpPage;\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: \"1350px\",\r\n  mdDesktop: \"1150px\",\r\n  tablet: \"960px\",\r\n  smTablet: \"600px\",\r\n});\r\n\r\nconst HelpPageContainer = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  overflow: hidden !important;\r\n`;\r\nconst HelpPageLeftBox = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  .helpVideo {\r\n    margin-top: 2rem;\r\n    object-fit: contain;\r\n    height: 80vh;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n      display:none;\r\n  `}\r\n  }\r\n`;\r\nconst HelpPageRightBox = styled.div`\r\n  width: 50%;\r\n  height: 100%;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  overflow: hidden !important;\r\n\r\n  ${customMedia.lessThan(\"smTablet\")`\r\n      width: 100%;\r\n  `}\r\n\r\n  a {\r\n    text-decoration: none;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    padding: \"1rem 0\";\r\n  }\r\n`;\r\nconst InputContainer = styled.div`\r\n  margin: 0.7rem 0;\r\n\r\n  input {\r\n    width: 90%;\r\n    background: rgb(0, 180, 120);\r\n    color: #fff;\r\n    outline: none;\r\n    border: none;\r\n    height: 2.5rem;\r\n    padding: 0 0.5rem;\r\n    font-size: 0.9rem;\r\n    border-radius: 3px;\r\n  }\r\n  input::placeholder {\r\n    color: #fff;\r\n    font-size: 0.8rem;\r\n  }\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\Dialog.js",["412","413","414","415","416","417"],"import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport \"./style.css\";\r\nimport { db } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport firebase from \"firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./heightMedia.css\";\r\nimport { Fade } from \"@material-ui/core\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Fade direction=\"\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function AddingTeamModal({\r\n  open,\r\n  handleClose,\r\n  make,\r\n  setCurrentTeamName,\r\n  openSnackbar,\r\n  userName,\r\n}) {\r\n  const [inputTeamName, setInputTeamName] = useState(\"\");\r\n  const [teamList, setTeamList] = useState([]);\r\n  const [alreadyExist, setAlreadyExist] = useState(false);\r\n  const [doesNotExist, setDoesNotExist] = useState(false);\r\n  const [already, setAlready] = useState(1);\r\n  const { currentUser } = useAuth();\r\n  const history = useHistory();\r\n\r\n  const handleInputChange = (value) => {\r\n    setInputTeamName(value);\r\n    setAlreadyExist(false);\r\n    setDoesNotExist(false);\r\n  };\r\n\r\n  const handleMakeSubmit = () => {\r\n    db.collection(\"teams\").onSnapshot((snapshot) => {\r\n      const list = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n      }));\r\n      console.log(list);\r\n      var count = 0;\r\n      list.filter((filter) => {\r\n        if (filter.id === inputTeamName) {\r\n          count = count + 1;\r\n        }\r\n      });\r\n      if (count !== 0) {\r\n        setAlreadyExist(true);\r\n      } else {\r\n        makeSubmit();\r\n      }\r\n    });\r\n  };\r\n\r\n  const handleJoinSubmit = () => {\r\n    db.collection(\"teams\").onSnapshot((snapshot) => {\r\n      const list = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n      }));\r\n      console.log(list);\r\n      var count = 0;\r\n      list.filter((filter) => {\r\n        if (filter.id === inputTeamName) {\r\n          count = count + 1;\r\n        }\r\n      });\r\n      if (count !== 0) {\r\n        joinSubmit();\r\n      } else {\r\n        setDoesNotExist(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  const joinSubmit = () => {\r\n    db.collection(\"users\").doc(currentUser.uid).collection(\"joinTeams\").add({\r\n      teamName: inputTeamName,\r\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n\r\n    db.collection(\"teams\").doc(inputTeamName).collection(\"members\").add({\r\n      id: currentUser.uid,\r\n    });\r\n    setCurrentTeamName(inputTeamName);\r\n    history.push(`/home/${inputTeamName}`);\r\n    handleClose();\r\n    openSnackbar(true);\r\n    db.collection(\"teams\").onSnapshot((snapshot) => {\r\n      snapshot.docs.filter(\r\n        (doc) =>\r\n          doc.id === inputTeamName &&\r\n          db\r\n            .collection(\"users\")\r\n            .doc(doc.data().admin)\r\n            .collection(\"notifications\")\r\n            .add({\r\n              memberJoinName: userName,\r\n              notificationType: \"teamJoin\",\r\n              memberJoinId: currentUser.uid,\r\n              teamName: inputTeamName,\r\n              notiDate: new Date().toISOString(),\r\n              timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            })\r\n      );\r\n    });\r\n  };\r\n\r\n  const addTeamNameToUser = () => {\r\n    db.collection(\"users\").doc(currentUser.uid).collection(\"userTeams\").add({\r\n      teamName: inputTeamName,\r\n      admin: currentUser.uid,\r\n      timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    db.collection(\"teams\").doc(inputTeamName).collection(\"members\").add({\r\n      id: currentUser.uid,\r\n    });\r\n    setCurrentTeamName(inputTeamName);\r\n    history.push(`/home/${inputTeamName}`);\r\n    handleClose();\r\n    openSnackbar(true);\r\n  };\r\n\r\n  // const makeTeamCollection = () => {\r\n  //   db.collection(\"teams\").doc(inputTeamName).collection(\"teamTodos\").add({\r\n  //     todoText: \"hello\",\r\n  //   });\r\n  //   addTeamNameToUser();\r\n  // };\r\n\r\n  const makeSubmit = () => {\r\n    db.collection(\"teams\").doc(inputTeamName).set(\r\n      {\r\n        admin: currentUser.uid,\r\n        teamDeleted: false,\r\n      },\r\n      { merge: true }\r\n    );\r\n    addTeamNameToUser();\r\n\r\n    // makeTeamCollection();\r\n  };\r\n\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      onClose={handleClose}\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle id=\"alert-dialog-slide-title\" className=\"title\">\r\n        {make ? \"Make your team\" : \"Join a team\"}\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          {alreadyExist ? (\r\n            <p\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"red\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              This name already exits\r\n            </p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          {doesNotExist ? (\r\n            <p\r\n              style={{\r\n                textAlign: \"center\",\r\n                color: \"red\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              No team found\r\n            </p>\r\n          ) : (\r\n            \"\"\r\n          )}\r\n          <div className=\"inputFieldModal\">\r\n            <input\r\n              className=\"inputModal\"\r\n              value={inputTeamName}\r\n              type=\"text\"\r\n              placeholder={make ? \"Give team name...\" : \"Write team name...\"}\r\n              onChange={(e) => handleInputChange(e.target.value)}\r\n            ></input>\r\n          </div>\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          className=\"addButtonModal\"\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          className=\"addButtonModal\"\r\n          onClick={make ? () => handleMakeSubmit() : () => handleJoinSubmit()}\r\n          color=\"primary\"\r\n        >\r\n          {make ? \"Make\" : \"join\"}\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\BoardTodo.js",["418","419","420","421","422","423","424"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport PostAddIcon from \"@material-ui/icons/PostAdd\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { db, storage } from \"../../firebase\";\r\nimport CustomTooltip from \"../CustomTooltip\";\r\nimport { generateMedia } from \"styled-media-query\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  IconButton,\r\n  makeStyles,\r\n  Slide,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport CalendarModal from \"../Schedular/CalendarModal\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport { AvatarGroup } from \"@material-ui/lab\";\r\nimport TeamMembers from \"../todo/members/TeamMembers\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\nimport Material from \"../todo/Material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  addBtn: {\r\n    minWidth: \"1.5rem\",\r\n    padding: 0,\r\n    height: \"1.5rem\",\r\n  },\r\n}));\r\n\r\nfunction BoardTodo({\r\n  id,\r\n  text,\r\n  startDate,\r\n  endDate,\r\n  checked,\r\n  admin,\r\n  urlTeamName,\r\n  assigned,\r\n  userName,\r\n  transitionDirectionUpcoming,\r\n  setTransitionDirectionUpcoming,\r\n  priority,\r\n  assignedById,\r\n  state,\r\n  setTransitionDirectionCurrent,\r\n  setTabValue,\r\n  profileImage,\r\n  comment,\r\n  checkedBy,\r\n  assignedBy,\r\n  checkedByProfile,\r\n  currTeamAdmin,\r\n}) {\r\n  const { currentUser } = useAuth();\r\n  const [localCheck, setLocalCheck] = useState(checked);\r\n  const [openMaterial, setOpenMaterial] = useState(false);\r\n  const [assignChange, setAssignChange] = useState(false);\r\n  const [transitionIn, setTransitionIn] = useState(true);\r\n  const [openMembers, setOpenMembers] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleShift = (id) => {\r\n    setTransitionDirectionUpcoming(\"left\");\r\n    setTransitionDirectionCurrent(\"right\");\r\n    setTransitionIn(false);\r\n    setTimeout(() => {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(id)\r\n        .set(\r\n          {\r\n            state: \"current\",\r\n          },\r\n          { merge: true }\r\n        );\r\n    }, 200);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (checked === true) {\r\n      setTransitionDirectionUpcoming(\"left\");\r\n    } else {\r\n      setTransitionDirectionUpcoming(\"down\");\r\n    }\r\n    setTransitionIn(false);\r\n    setTimeout(() => {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(id)\r\n        .collection(\"teamTodoImages\")\r\n        .onSnapshot((snapshot) => {\r\n          const list = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            todoImage: doc.data().todoImage,\r\n          }));\r\n          if (list.length !== 0) {\r\n            list.forEach((file) => {\r\n              storage.refFromURL(file.todoImage).delete();\r\n            });\r\n          }\r\n        });\r\n\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(id)\r\n        .delete();\r\n    }, 200);\r\n  };\r\n\r\n  const handleChecked = (id) => {\r\n    setTransitionDirectionCurrent(\"left\");\r\n    setTransitionDirectionUpcoming(\"right\");\r\n    setTransitionIn(false);\r\n    setTimeout(() => {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"teamTodos\")\r\n        .doc(id)\r\n        .set(\r\n          {\r\n            checked: true,\r\n            checkedBy: userName,\r\n            checkedByProfile: profileImage,\r\n          },\r\n          { merge: true }\r\n        );\r\n    }, 200);\r\n  };\r\n\r\n  const emptyFunction = () => {};\r\n\r\n  return (\r\n    <Slide\r\n      in={transitionIn}\r\n      timeout={400}\r\n      direction={transitionDirectionUpcoming}\r\n    >\r\n      <TodoMainCard>\r\n        <TodoTextBox>\r\n          <div\r\n            style={{\r\n              flex: 1,\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <div style={{ display: \"flex\" }}>\r\n              {assignedById === currentUser.uid ? (\r\n                <>\r\n                  {checked === false && (\r\n                    <Button\r\n                      classes={{ root: classes.addBtn }}\r\n                      className=\"uploadView\"\r\n                      style={{\r\n                        fontSize: \"0.65rem\",\r\n                        color: \"#fff\",\r\n                        backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                        marginRight: \"0.4rem\",\r\n                      }}\r\n                      onClick={() => setEdit(true)}\r\n                    >\r\n                      <EditIcon style={{ transform: \"scale(0.7)\" }} />\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    classes={{ root: classes.addBtn }}\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      fontSize: \"0.65rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                      marginRight: \"0.4rem\",\r\n                      marginBottom: \"0.2rem\",\r\n                    }}\r\n                    onClick={() => handleDelete(id)}\r\n                  >\r\n                    <DeleteIcon style={{ transform: \"scale(0.7)\" }} />\r\n                  </Button>\r\n\r\n                  <Button\r\n                    classes={{ root: classes.addBtn }}\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      fontSize: \"0.65rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                      marginRight: \"1rem\",\r\n                      marginBottom: \"0.2rem\",\r\n                    }}\r\n                    onClick={() => setOpenMaterial(true)}\r\n                  >\r\n                    <PostAddIcon style={{ transform: \"scale(0.7)\" }} />\r\n                  </Button>\r\n                </>\r\n              ) : currTeamAdmin ? (\r\n                <>\r\n                  {checked === false && (\r\n                    <Button\r\n                      classes={{ root: classes.addBtn }}\r\n                      className=\"uploadView\"\r\n                      style={{\r\n                        fontSize: \"0.65rem\",\r\n                        color: \"#fff\",\r\n                        backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                        marginRight: \"0.4rem\",\r\n                      }}\r\n                      onClick={() => setEdit(true)}\r\n                    >\r\n                      <EditIcon style={{ transform: \"scale(0.7)\" }} />\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    classes={{ root: classes.addBtn }}\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      fontSize: \"0.65rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                      marginRight: \"0.4rem\",\r\n                      marginBottom: \"0.2rem\",\r\n                    }}\r\n                    onClick={() => handleDelete(id)}\r\n                  >\r\n                    <DeleteIcon style={{ transform: \"scale(0.7)\" }} />\r\n                  </Button>\r\n\r\n                  <Button\r\n                    classes={{ root: classes.addBtn }}\r\n                    className=\"uploadView\"\r\n                    style={{\r\n                      fontSize: \"0.65rem\",\r\n                      color: \"#fff\",\r\n                      backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                      marginRight: \"1rem\",\r\n                      marginBottom: \"0.2rem\",\r\n                    }}\r\n                    onClick={() => setOpenMaterial(true)}\r\n                  >\r\n                    <PostAddIcon style={{ transform: \"scale(0.7)\" }} />\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <Button\r\n                  classes={{ root: classes.addBtn }}\r\n                  className=\"uploadView\"\r\n                  style={{\r\n                    fontSize: \"0.65rem\",\r\n                    color: \"#fff\",\r\n                    backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                    marginRight: \"1rem\",\r\n                    marginBottom: \"0.2rem\",\r\n                  }}\r\n                  onClick={() => setOpenMaterial(true)}\r\n                >\r\n                  <PostAddIcon style={{ transform: \"scale(0.7)\" }} />\r\n                </Button>\r\n              )}\r\n            </div>\r\n            <div style={{ flex: 1 }}></div>\r\n            <div style={{ display: \"flex\" }}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  marginRight: \"0.7rem\",\r\n                }}\r\n              >\r\n                <strong\r\n                  className=\"todoDate\"\r\n                  style={{\r\n                    color: \"rgba(0, 99, 66, 0.668)\",\r\n                  }}\r\n                >\r\n                  Start\r\n                </strong>\r\n                <p\r\n                  className=\"todoDate\"\r\n                  style={{\r\n                    color: \"rgba(0, 99, 66, 0.668)\",\r\n                    paddingBottom: \"0.3rem\",\r\n                  }}\r\n                >\r\n                  {startDate?.substring(8, 10)}\r\n                  {\"/\"}\r\n                  {startDate?.substring(5, 7)}\r\n                  {\"/\"}\r\n                  {startDate?.substring(0, 4)}\r\n                </p>\r\n              </div>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  flexDirection: \"column\",\r\n                  marginRight: \"0.4rem\",\r\n                }}\r\n              >\r\n                <strong\r\n                  className=\"todoDate\"\r\n                  style={{\r\n                    color: \"rgba(0, 99, 66, 0.668)\",\r\n                  }}\r\n                >\r\n                  End\r\n                </strong>\r\n                <p\r\n                  className=\"todoDate\"\r\n                  style={{\r\n                    color: \"rgba(0, 99, 66, 0.668)\",\r\n                    paddingBottom: \"0.3rem\",\r\n                  }}\r\n                >\r\n                  {endDate?.substring(8, 10)}\r\n                  {\"/\"}\r\n                  {endDate?.substring(5, 7)}\r\n                  {\"/\"}\r\n                  {endDate?.substring(0, 4)}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {state === \"current\" && checked === false && (\r\n            <div style={{ width: \"100%\", flex: 1, marginBottom: \"0.5rem\" }}>\r\n              <div className=\"inputField\">\r\n                <p className=\"assignedTo\">Assigned to :</p>\r\n                <div className=\"assignedMembers\">\r\n                  <AvatarGroup max={5} className=\"memberAvatar\">\r\n                    {assigned.map((member) => (\r\n                      <Avatar\r\n                        alt={member.name}\r\n                        src={member.profileImage}\r\n                        className=\"memberAvatar\"\r\n                      />\r\n                    ))}\r\n                  </AvatarGroup>\r\n                </div>\r\n                <div style={{ flex: 1 }}></div>\r\n                {admin === currentUser.uid ? (\r\n                  <AddCircleIcon\r\n                    className=\"assignIcon\"\r\n                    onClick={() => setOpenMembers(true)}\r\n                  />\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          <p\r\n            style={{\r\n              color: \"rgba(0, 99, 66, 0.868)\",\r\n              fontWeight: 400,\r\n              width: \"100%\",\r\n              wordBreak: \"break-word\",\r\n              verticalAlign: \"center\",\r\n              height: \"auto\",\r\n              margin: \"0.5rem 0\",\r\n              fontFamily: \"Times New Roman\",\r\n            }}\r\n          >\r\n            {text}\r\n          </p>\r\n          <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            {state === \"current\" && (\r\n              <div\r\n                style={{\r\n                  borderRadius: \"200%\",\r\n                  height: \"0.7rem\",\r\n                  width: \"0.7rem\",\r\n                  backgroundColor:\r\n                    priority === 3\r\n                      ? \"rgba(185, 5, 5, 0.9)\"\r\n                      : priority === 2\r\n                      ? \"rgba(185, 86, 5, 0.9)\"\r\n                      : \"rgba(0, 99, 66, 0.9)\",\r\n                }}\r\n              ></div>\r\n            )}\r\n            <div style={{ flex: 1 }}></div>\r\n\r\n            {state === \"upcoming\" && checked === false && (\r\n              <Button\r\n                className=\"uploadView\"\r\n                style={{\r\n                  fontSize: \"0.65rem\",\r\n                  height: \"1.2rem\",\r\n                  color: \"#fff\",\r\n                  backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                  marginBottom: \"0.2rem\",\r\n                }}\r\n                onClick={() => handleShift(id)}\r\n              >\r\n                shift to current{\" \"}\r\n                <ArrowForwardIcon style={{ fontSize: \"0.85rem\" }} />\r\n              </Button>\r\n            )}\r\n            {state === \"current\" && checked === false && (\r\n              <Button\r\n                className=\"uploadView\"\r\n                style={{\r\n                  fontSize: \"0.65rem\",\r\n                  height: \"1.2rem\",\r\n                  color: \"#fff\",\r\n                  backgroundColor: \"rgb(5, 185, 125,0.9)\",\r\n                  marginBottom: \"0.2rem\",\r\n                }}\r\n                onClick={() => handleChecked(id)}\r\n              >\r\n                completed <ArrowForwardIcon style={{ fontSize: \"0.85rem\" }} />\r\n              </Button>\r\n            )}\r\n            {checked === true && (\r\n              <div style={{ textAlign: \"end\" }}>\r\n                <p\r\n                  style={{ fontSize: \"0.5rem\", color: \"rgb(5, 185, 125,0.65)\" }}\r\n                >\r\n                  -Completed by\r\n                </p>\r\n                <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                  <Avatar\r\n                    src={checkedByProfile}\r\n                    alt={checkedBy}\r\n                    style={{\r\n                      height: \"1.2rem\",\r\n                      width: \"1.2rem\",\r\n                      marginRight: \"0.5rem\",\r\n                    }}\r\n                  />\r\n                  <p\r\n                    style={{\r\n                      fontSize: \"0.7rem\",\r\n                      color: \"rgb(5, 185, 125,0.9)\",\r\n                    }}\r\n                  >\r\n                    {checkedBy}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </TodoTextBox>\r\n\r\n        {edit && (\r\n          <CalendarModal\r\n            open={edit}\r\n            handleClose={() => setEdit(false)}\r\n            event={{\r\n              title: text,\r\n              backgroundColor:\r\n                priority === 3\r\n                  ? \"rgba(185, 5, 5, 0.8)\"\r\n                  : priority === 2\r\n                  ? \"rgba(185, 86, 5, 0.8)\"\r\n                  : \"rgba(0, 99, 66, 0.8)\",\r\n              start: new Date(startDate),\r\n              end: new Date(endDate),\r\n              _def: {\r\n                publicId: id,\r\n                extendedProps: {\r\n                  teamName: \"\",\r\n                },\r\n              },\r\n            }}\r\n            team={true}\r\n            urlTeamName={urlTeamName}\r\n            setPersonalTabValue={emptyFunction}\r\n            setOpenSchedular={emptyFunction}\r\n            board={state === \"upcoming\" ? true : false}\r\n          />\r\n        )}\r\n        {openMembers && (\r\n          <TeamMembers\r\n            todoId={id}\r\n            open={openMembers}\r\n            handleClose={() => setOpenMembers(false)}\r\n            urlTeamName={urlTeamName}\r\n            assigned={assigned}\r\n          />\r\n        )}\r\n        {openMaterial && (\r\n          <Material\r\n            open={openMaterial}\r\n            handleClose={() => setOpenMaterial(false)}\r\n            id={id}\r\n            admin={admin}\r\n            currentUser={currentUser}\r\n            comment={comment}\r\n            urlTeamName={urlTeamName}\r\n            checkedBy={checkedBy}\r\n            assignedBy={assignedBy}\r\n            todoText={text}\r\n            todoEndDate={endDate}\r\n            profileImage={profileImage}\r\n            userName={userName}\r\n            setTabValue={setTabValue}\r\n            completed={state === \"upcoming\" || checked ? true : false}\r\n          />\r\n        )}\r\n      </TodoMainCard>\r\n    </Slide>\r\n  );\r\n}\r\n\r\nexport default BoardTodo;\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: \"1350px\",\r\n  mdDesktop: \"1150px\",\r\n  tablet: \"1000px\",\r\n  smTablet: \"600px\",\r\n});\r\n\r\nconst TodoMainCard = styled.div`\r\n  margin: 0.7rem 0.2rem;\r\n  box-shadow: 0px 1px 2px rgb(0, 129, 86);\r\n  background-color: rgb(231, 250, 243);\r\n  border-radius: 10px;\r\n  width: 98%;\r\n  height: 3rem;\r\n  min-height: 3rem;\r\n  display: flex;\r\n  word-break: \"break-word\";\r\n  min-height: 4.5rem !important;\r\n  height: auto;\r\n  /* ${customMedia.lessThan(\"smTablet\")`\r\n    width: 98%;\r\n    `}; */\r\n`;\r\n\r\nconst TodoTextBox = styled.div`\r\n  flex: 1;\r\n  width: 100%;\r\n  padding: 0.2rem 0.5rem;\r\n  word-break: \"break-word\";\r\n  height: auto;\r\n\r\n  .assignedTo {\r\n    color: rgb(0, 90, 60);\r\n    font-size: 0.7rem;\r\n    ${customMedia.lessThan(\"tablet\")`\r\n         display:none;\r\n    `};\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n         font-size: 0.5rem;\r\n    `};\r\n  }\r\n\r\n  .assignIcon {\r\n    color: rgb(3, 185, 124);\r\n    font-size: 1.2rem !important;\r\n    padding-right: 0.3rem;\r\n    cursor: pointer;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n         flex:0.2;\r\n         font-size: 1.5rem;\r\n    `};\r\n  }\r\n\r\n  .inputField {\r\n    width: 95%;\r\n    height: 2rem;\r\n    background-color: rgba(3, 185, 124, 0.308);\r\n    border-radius: 5px;\r\n    border: none;\r\n    padding: 0rem 0.2rem;\r\n    padding-left: 0.5rem;\r\n    margin: 0.2rem;\r\n    margin-bottom: 0.2rem;\r\n    margin-left: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    flex: 0.9;\r\n    overflow: hidden;\r\n    ${customMedia.lessThan(\"tablet\")`\r\n        padding: 0rem;\r\n    `};\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n         margin:0.1rem 0;\r\n         height: 1.5rem;\r\n         flex: 0.8;\r\n    `};\r\n  }\r\n  input {\r\n    width: 100%;\r\n    height: 100%;\r\n    outline: none;\r\n    border: none;\r\n    background: transparent;\r\n    color: rgb(0, 90, 60);\r\n    font-size: 0.7rem;\r\n    flex: 0.95;\r\n    padding-left: 0.5rem;\r\n\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n      font-size:0.7rem;\r\n    `};\r\n  }\r\n  input::placeholder {\r\n    color: rgb(3, 185, 124);\r\n    font-size: 0.7rem;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n      font-size:0.7rem;\r\n    `};\r\n  }\r\n\r\n  .todoDate {\r\n    font-size: 10px;\r\n    text-align: center;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n       font-size:7px;\r\n        padding-left:0.1rem !important;\r\n        flex: 0.18 !important;\r\n    `};\r\n  }\r\n\r\n  .uploadView {\r\n    overflow: hidden;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n      font-size:8px !important;\r\n      padding:0.1rem 0 !important;\r\n      width:60% !important;\r\n    `};\r\n  }\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\snackbar\\SnackBar.js",[],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\Feedback.js",["425","426"],"import React, { useEffect, useState } from \"react\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { db } from \"../../firebase\";\r\nimport EndoCards from \"./EndoCards\";\r\nimport nothing from \"../../assets/images/nothing.svg\";\r\nimport { useMediaQuery, useTheme } from \"@material-ui/core\";\r\n\r\nfunction Feedback() {\r\n  const [allEndoIdList, setAllEndoIdList] = useState([]);\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const getAllMembers = () => {\r\n    db.collection(\"users\")\r\n      .doc(currentUser.uid)\r\n      .collection(\"feedback\")\r\n      .orderBy(\"timeStamp\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const endoIdList = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          giverId: doc.data().giverId,\r\n          giverEndorsement: doc.data().giverFeedback,\r\n          task: doc.data().task,\r\n          teamName: doc.data().teamName,\r\n        }));\r\n        setAllEndoIdList(endoIdList);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllMembers();\r\n  }, []);\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        overflowY: \"scroll\",\r\n        marginBottom: \"0.5rem\",\r\n        height: \"74vh\",\r\n      }}\r\n    >\r\n      {allEndoIdList.length === 0 && (\r\n        <div\r\n          style={{\r\n            height: \"60%\",\r\n            width: isSmall ? \"60%\" : \"89%\",\r\n            position: \"absolute\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            flexDirection: \"column\",\r\n            color: \"rgb(5, 185, 125)\",\r\n          }}\r\n        >\r\n          <img src={nothing} style={{ height: \"13rem\", width: \"13rem\" }} />\r\n\r\n          <p style={{ marginLeft: \"2rem\" }}>Nothing to show</p>\r\n        </div>\r\n      )}\r\n      {allEndoIdList?.map((endo) => (\r\n        <EndoCards\r\n          key={endo.id}\r\n          memberId={currentUser.uid}\r\n          giverId={endo.giverId}\r\n          giverEndorsement={endo.giverEndorsement}\r\n          feedback={true}\r\n          task={endo.task}\r\n          id={endo.id}\r\n          teamName={endo.teamName}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feedback;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\TodoCard.js",["427","428","429"],"import React, { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport { db } from \"../../firebase\";\r\nimport moment from \"moment\";\r\nimport CustomTooltip from \"../CustomTooltip\";\r\nimport { generateMedia } from \"styled-media-query\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\nimport CalendarModal from \"../Schedular/CalendarModal\";\r\nimport { Fade, Slide, useMediaQuery, useTheme } from \"@material-ui/core\";\r\n\r\nfunction TodoCard({\r\n  id,\r\n  text,\r\n  todoStartDate,\r\n  todoEndDate,\r\n  checked,\r\n  priority,\r\n  teamTodoText,\r\n  todoTeamName,\r\n  help,\r\n  transitionDirection,\r\n  setTransitionDirection,\r\n  setPersonalTabValue,\r\n}) {\r\n  const { currentUser } = useAuth();\r\n  const [localCheck, setLocalCheck] = useState(checked);\r\n  const [openEdit, setOpenEdit] = useState(false);\r\n  const [transitionIn, setTransitionIn] = useState(true);\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const handleDelete = (todoId) => {\r\n    setTransitionDirection(\"left\");\r\n    setTransitionIn(false);\r\n    setTimeout(() => {\r\n      db.collection(\"users\")\r\n        .doc(currentUser.uid)\r\n        .collection(\"todos\")\r\n        .doc(todoId)\r\n        .delete();\r\n    }, 200);\r\n  };\r\n\r\n  const handleChecked = () => {\r\n    setLocalCheck(!localCheck);\r\n    db.collection(\"users\").doc(currentUser.uid).collection(\"todos\").doc(id).set(\r\n      {\r\n        checked: localCheck,\r\n      },\r\n      { merge: true }\r\n    );\r\n  };\r\n\r\n  const emptyFunction = () => {};\r\n\r\n  return (\r\n    <Slide in={transitionIn} timeout={400} direction={transitionDirection}>\r\n      <TodoMainCard>\r\n        <TodoStartIcon>\r\n          <CustomTooltip title=\"Completed\" arrow placement=\"left\">\r\n            {checked ? (\r\n              <CheckBoxIcon\r\n                className=\"todoStartIcon\"\r\n                onClick={() => handleChecked()}\r\n              />\r\n            ) : (\r\n              <CheckBoxOutlineBlankIcon\r\n                className=\"todoStartIcon\"\r\n                onClick={() => handleChecked()}\r\n              />\r\n            )}\r\n          </CustomTooltip>\r\n        </TodoStartIcon>\r\n\r\n        <TodoTextBox>\r\n          <div\r\n            className=\"todoDate\"\r\n            style={{\r\n              width: \"100%\",\r\n              height: \"20px\",\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <p className=\"startStartDate\">\r\n              Start{isSmall ? \" Date:\" : \":\"}\r\n              <span className=\"startEndDateSpan\">\r\n                {isSmall\r\n                  ? new Date(todoStartDate).toString().substring(0, 15)\r\n                  : new Date(todoStartDate).toString().substring(4, 11)}\r\n              </span>\r\n            </p>\r\n            <p className=\"startEndDate\">\r\n              End{isSmall ? \" Date:\" : \":\"}\r\n              <span className=\"startEndDateSpan\">\r\n                {isSmall\r\n                  ? new Date(todoEndDate).toString().substring(0, 15)\r\n                  : new Date(todoEndDate).toString().substring(4, 11)}\r\n              </span>\r\n            </p>\r\n            {new Date().getTime() - new Date(todoEndDate).getTime() >\r\n              86400000 && !checked ? (\r\n              <p className=\"missed\">missed</p>\r\n            ) : new Date(todoEndDate).toString().substring(0, 15) ===\r\n                new Date().toString().substring(0, 15) && !checked ? (\r\n              <p className=\"missed\">due today</p>\r\n            ) : (\r\n              <p className=\"missed\" style={{ opacity: 0 }}>\r\n                {/* missed for spacing */}\r\n                missed\r\n              </p>\r\n            )}\r\n            <EditIcon\r\n              className=\"editTodoIcon\"\r\n              onClick={() => setOpenEdit(true)}\r\n            />\r\n          </div>\r\n          {help && (\r\n            <p\r\n              style={{\r\n                backgroundColor: \"rgba(0, 99, 66,0.4)\",\r\n                color: \"#fff\",\r\n                fontWeight: 300,\r\n                width: \"auto\",\r\n                wordBreak: \"break-word\",\r\n                verticalAlign: \"center\",\r\n                height: \"auto\",\r\n                padding: \"5px\",\r\n                borderRadius: \"5px\",\r\n                // lineHeight: \"30px\",\r\n                fontFamily: \"Times New Roman\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                marginBottom: \"0.3rem\",\r\n                fontSize: \"13px\",\r\n              }}\r\n            >\r\n              <span style={{ marginBottom: \"5px\" }}>\r\n                <span\r\n                  style={{\r\n                    fontSize: \"10px\",\r\n                    color: \"rgba(0, 99, 66)\",\r\n                    backgroundColor: \"rgba(0, 99, 66,0.2)\",\r\n                    padding: \"2px 10px\",\r\n                    borderRadius: \"5px\",\r\n                  }}\r\n                >\r\n                  {todoTeamName}\r\n                </span>\r\n              </span>\r\n              {teamTodoText}\r\n            </p>\r\n          )}\r\n          <p\r\n            style={{\r\n              color: \"rgba(0, 99, 66, 0.868)\",\r\n              fontWeight: 400,\r\n              width: \"100%\",\r\n              wordBreak: \"break-word\",\r\n              verticalAlign: \"center\",\r\n              height: \"auto\",\r\n              // lineHeight: \"30px\",\r\n              fontFamily: \"Times New Roman\",\r\n            }}\r\n          >\r\n            {text}\r\n          </p>\r\n        </TodoTextBox>\r\n        <TodoActions\r\n          style={{\r\n            backgroundColor:\r\n              priority === 3\r\n                ? \"rgba(185, 5, 5, 0.8)\"\r\n                : priority === 2\r\n                ? \"rgba(185, 86, 5, 0.8)\"\r\n                : \"rgba(0, 99, 66, 0.8)\",\r\n          }}\r\n        >\r\n          <DeleteIcon className=\"delete\" onClick={() => handleDelete(id)} />\r\n        </TodoActions>\r\n        {openEdit && (\r\n          <CalendarModal\r\n            open={openEdit}\r\n            handleClose={() => setOpenEdit(false)}\r\n            event={{\r\n              title: text,\r\n              backgroundColor:\r\n                priority === 3\r\n                  ? \"rgba(185, 5, 5, 0.8)\"\r\n                  : priority === 2\r\n                  ? \"rgba(185, 86, 5, 0.8)\"\r\n                  : \"rgba(0, 99, 66, 0.8)\",\r\n              start: new Date(todoStartDate),\r\n              end: new Date(todoEndDate),\r\n              _def: {\r\n                publicId: id,\r\n                extendedProps: {\r\n                  teamName: todoTeamName,\r\n                },\r\n              },\r\n            }}\r\n            setPersonalTabValue={setPersonalTabValue}\r\n            setOpenSchedular={emptyFunction}\r\n            team={false}\r\n            urlTeamName={\"\"}\r\n          />\r\n        )}\r\n      </TodoMainCard>\r\n    </Slide>\r\n  );\r\n}\r\n\r\nexport default TodoCard;\r\n\r\nconst customMedia = generateMedia({\r\n  lgDesktop: \"1350px\",\r\n  mdDesktop: \"1150px\",\r\n  tablet: \"960px\",\r\n  smTablet: \"600px\",\r\n});\r\n\r\nconst TodoMainCard = styled.div`\r\n  margin: 0.7rem 0rem;\r\n  margin-top: -0.2rem;\r\n  box-shadow: 0px 1px 3px rgb(0, 129, 86);\r\n  background-color: rgb(231, 250, 243);\r\n  border-radius: 20px 10px 30px 10px;\r\n  width: 100%;\r\n  height: 3rem;\r\n  min-height: 3rem;\r\n  display: flex;\r\n  word-break: \"break-word\";\r\n  height: auto;\r\n`;\r\nconst TodoStartIcon = styled.div`\r\n  transform: scale(0.8);\r\n  flex: 0.04;\r\n  width: 100%;\r\n  height: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-right: 2px solid rgba(0, 99, 66, 0.368);\r\n\r\n  ${customMedia.lessThan(\"smTablet\")`\r\n      flex: 0.09;\r\n    `};\r\n\r\n  .todoStartIcon {\r\n    color: rgba(0, 99, 66, 0.568);\r\n    font-size: 1.2rem;\r\n    object-fit: contain;\r\n    cursor: pointer;\r\n\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n      transform:scale(0.8);\r\n      padding:0 0.3rem;\r\n    `};\r\n  }\r\n`;\r\nconst TodoTextBox = styled.div`\r\n  flex: 1;\r\n  width: 100%;\r\n  padding: 0.2rem 0.5rem;\r\n  word-break: \"break-word\";\r\n  height: auto;\r\n\r\n  .todoDate {\r\n    font-size: 13px;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n       font-size:9px;\r\n    `};\r\n  }\r\n  .startStartDate {\r\n    flex: 0.5;\r\n    font-size: 9px;\r\n    color: rgba(4, 126, 85, 0.868);\r\n    font-weight: 700;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n       font-size:8px;\r\n       font-weight: 400;\r\n    `};\r\n  }\r\n  .startEndDate {\r\n    flex: 0.5;\r\n    font-size: 9px;\r\n    color: rgba(4, 126, 85, 0.868);\r\n    font-weight: 700;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n       font-size:8px;\r\n       font-weight: 400;\r\n    `};\r\n  }\r\n  .startEndDateSpan {\r\n    font-weight: 400;\r\n    margin-left: 0.5rem;\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n          margin-left:0.1rem;\r\n    `};\r\n  }\r\n  .missed {\r\n    font-size: 9px;\r\n    color: #fff;\r\n    background-color: rgba(4, 126, 85, 0.65);\r\n    border-radius: 10px;\r\n    padding: 2px 7px;\r\n    width: 3rem;\r\n    text-align: center;\r\n    @media (max-width: 600px) {\r\n      padding: 2px 0px;\r\n      font-size: 8px;\r\n    }\r\n  }\r\n  .editTodoIcon {\r\n    margin-left: 1rem;\r\n    color: rgba(4, 126, 85, 0.568);\r\n    transform: scale(0.7);\r\n    cursor: pointer;\r\n    transition: all 0.2s ease-in-out;\r\n  }\r\n  .editTodoIcon:hover {\r\n    color: rgba(4, 126, 85, 0.868);\r\n    transform: scale(0.8);\r\n  }\r\n`;\r\nconst TodoActions = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #fff;\r\n  flex: 0.03;\r\n  width: 100%;\r\n  height: auto;\r\n  padding: 0.2rem 0.5rem;\r\n  border-radius: 30px 10px 30px 30px;\r\n\r\n  ${customMedia.lessThan(\"smTablet\")`\r\n      flex: 0.09;\r\n    `};\r\n\r\n  .delete {\r\n    cursor: pointer;\r\n    transform: scale(0.8);\r\n    ${customMedia.lessThan(\"smTablet\")`\r\n      transform:scale(0.7);\r\n    `};\r\n  }\r\n`;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\App.js",["430"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\slogger\\ContactUs.js",["431"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\slogger\\Extension.js",["432","433"],"import React from \"react\";\r\nimport \"./contactUs.css\";\r\nimport extension from \"../../assets/images/extension.svg\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport { useHistory } from \"react-router\";\r\nimport zipFile from \"../../assets/sloggerExtension/SloggerExtension.rar\";\r\n\r\nfunction Extension() {\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <div className=\"contactUsPage\">\r\n      <div className=\"contactUsPageBox\">\r\n        <p className=\"contactUsPageHead\">\r\n          <ArrowBackIcon\r\n            className=\"contactUsPageHeadIcon\"\r\n            onClick={() => history.goBack()}\r\n          />\r\n          Slogger Extension\r\n        </p>\r\n        <div className=\"contactPageForm\">\r\n          <h3 className=\"screenContentPara\">\r\n            Follow these 5 easy steps to add\r\n          </h3>\r\n          <h3 className=\"screenContentPara\">\r\n            1) Download the zip folder and extract it.\r\n          </h3>\r\n          <h3 className=\"screenContentPara\">\r\n            2) Go to extension settings in your browser.\r\n            <br />\r\n            (\"chrome://extensions/\" in chrome browser)\r\n          </h3>\r\n          <h3 className=\"screenContentPara\">3) Enable the developer mode.</h3>\r\n          <h3 className=\"screenContentPara\">\r\n            4) Click on Load unpacked button\r\n          </h3>\r\n          <h3 className=\"screenContentPara\">\r\n            5) Select the folder which you have extracted.\r\n          </h3>\r\n          <a\r\n            href={zipFile}\r\n            download\r\n            target=\"_blank\"\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <Button className=\"extensionBtn\">\r\n              Click here to download .zip file\r\n            </Button>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      <img src={extension} className=\"contactUsImage\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Extension;\r\n",["434","435"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\reportWebVitals.js",[],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\imagesModal\\ImagesModal.js",["436","437"],"import React, { useEffect, useState } from \"react\";\r\nimport { AutoRotatingCarousel } from \"material-auto-rotating-carousel\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Divider,\r\n  Typography,\r\n  useMediaQuery,\r\n  useTheme,\r\n} from \"@material-ui/core\";\r\nimport \"./imagesModal.css\";\r\nimport DownloadImageModal from \"./DownloadImageModal\";\r\nimport CancelIcon from \"@material-ui/icons/Cancel\";\r\n\r\nfunction ImagesModal({\r\n  handleOpen,\r\n  setHandleOpen,\r\n  imageList,\r\n  urlTeamName,\r\n  id,\r\n  setImageList,\r\n  todoText,\r\n  userName,\r\n  profileImage,\r\n  setTabValue,\r\n}) {\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const [openDownload, setOpenDownload] = useState(false);\r\n  const [link, setLink] = useState(\"\");\r\n  const [senderId, setSenderId] = useState(\"\");\r\n  const [imageId, setImageId] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    console.log(imageList);\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <AutoRotatingCarousel\r\n        open={handleOpen}\r\n        onClose={() => setHandleOpen(false)}\r\n        autoplay={false}\r\n        mobile={!isSmall}\r\n        style={{ position: \"absolute\" }}\r\n      >\r\n        {imageList?.map((images) => (\r\n          <Card\r\n            key={images.id}\r\n            style={{\r\n              height: isSmall ? \"97%\" : \"100%\",\r\n              overflowY: \"scroll\",\r\n              borderRadius: isSmall ? \"10px\" : 0,\r\n            }}\r\n          >\r\n            {!isSmall && (\r\n              <CancelIcon\r\n                style={{ margin: \"1rem\", color: \"grey\" }}\r\n                onClick={() => setHandleOpen(false)}\r\n              />\r\n            )}\r\n            <p\r\n              style={{\r\n                fontSize: \"1rem\",\r\n                color: \"rgb(1, 87, 1)\",\r\n                margin: \"1rem 0 0 1rem\",\r\n                textAlign: \"center\",\r\n                fontFamily: \"sans-serif\",\r\n              }}\r\n            >\r\n              <span style={{ fontSize: \"0.7rem\" }}>By :</span>{\" \"}\r\n              {images.senderName}\r\n            </p>\r\n            <Divider style={{ margin: \"0.5rem 1rem 0 1rem\" }} />\r\n            <CardContent style={{ borderRadius: \"10px\" }}>\r\n              <img\r\n                src={images.todoImage}\r\n                style={{\r\n                  objectFit: \"contain\",\r\n                  width: \"100%\",\r\n                  height: \"100%\",\r\n                  borderRadius: \"10px\",\r\n                  marginTop: isSmall ? 0 : \"5%\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n                onClick={() => {\r\n                  setImageId(images.id);\r\n                  setSenderId(images.senderId);\r\n                  setLink(images.todoImage);\r\n                  setOpenDownload(true);\r\n                }}\r\n                // onClick={() => window.open(`${images.todoImage}`, \"_blank\")}\r\n              />\r\n              <Divider style={{ margin: \"1rem 0 \" }} />\r\n              <Typography\r\n                variant=\"body2\"\r\n                color=\"textSecondary\"\r\n                component=\"p\"\r\n                style={{\r\n                  marginTop: \"1rem\",\r\n                  color: \"#019966\",\r\n                  margin: \"0rem 1rem 1rem 1rem\",\r\n                }}\r\n              >\r\n                {images.todoImageText}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        ))}\r\n      </AutoRotatingCarousel>\r\n      {openDownload && (\r\n        <DownloadImageModal\r\n          open={openDownload}\r\n          handleClose={() => setOpenDownload(false)}\r\n          link={link}\r\n          senderId={senderId}\r\n          imageId={imageId}\r\n          urlTeamName={urlTeamName}\r\n          id={id}\r\n          imageList={imageList}\r\n          handleCloseImageModal={() => setHandleOpen(false)}\r\n          setImageList={setImageList}\r\n          todoText={todoText}\r\n          userName={userName}\r\n          profileImage={profileImage}\r\n          setTabValue={setTabValue}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImagesModal;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\Schedular\\Schedular.js",["438","439","440"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Calendar as FCalendar } from \"@fullcalendar/core\";\r\nimport listPlugin from \"@fullcalendar/list\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\nimport \"./style.css\";\r\nimport CalendarModal from \"./CalendarModal\";\r\n\r\nfunction Schedular(props) {\r\n  const calendarRef = useRef(null);\r\n  const [event, setEvent] = useState([]);\r\n  const [openCalendarModal, setOpenCalendarModal] = useState(false);\r\n  const day = 60 * 60 * 24 * 1000;\r\n\r\n  const getAllEvents = () => {\r\n    return props.todoList?.map((todo) => {\r\n      if (todo.priority === 3) {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.todoText,\r\n          // start: new Date(new Date(todo.todoStartDate).getTime() + day)\r\n          //   .toISOString()\r\n          //   .replace(/T.*$/, \"\"),\r\n          // end: new Date(new Date(todo.todoEndDate).getTime() + day * 2)\r\n          //   .toISOString()\r\n          //   .replace(/T.*$/, \"\"),\r\n          start: new Date(todo.todoStartDate),\r\n          end: new Date(todo.todoEndDate),\r\n          backgroundColor: \"rgba(185, 5, 5, 0.8)\",\r\n          display: \"block\",\r\n          teamName: todo.todoTeamName,\r\n        };\r\n      }\r\n      if (todo.priority === 2) {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.todoText,\r\n          // start: new Date(new Date(todo.todoStartDate).getTime() + day)\r\n          //   .toISOString()\r\n          //   .replace(/T.*$/, \"\"),\r\n          // end: new Date(new Date(todo.todoEndDate).getTime() + day * 2)\r\n          //   .toISOString()\r\n          //   .replace(/T.*$/, \"\"),\r\n          start: new Date(todo.todoStartDate),\r\n          end: new Date(todo.todoEndDate),\r\n          backgroundColor: \"rgba(185, 86, 5, 0.8)\",\r\n          display: \"block\",\r\n          teamName: todo.todoTeamName,\r\n        };\r\n      }\r\n      if (todo.priority === 1) {\r\n        return {\r\n          id: todo.id,\r\n          title: todo.todoText,\r\n          // start: new Date(new Date(todo.todoStartDate).getTime() + day)\r\n          //   .toISOString()\r\n          //   .replace(/T.*$/, \"\"),\r\n          // end: new Date(new Date(todo.todoEndDate).getTime() + day * 2)\r\n          //   .toISOString()\r\n          //   .replace(/T.*$/, \"\"),\r\n          start: new Date(todo.todoStartDate),\r\n          end: new Date(todo.todoEndDate),\r\n          backgroundColor: \"rgba(0, 99, 66, 0.8)\",\r\n          display: \"block\",\r\n          teamName: todo.todoTeamName,\r\n        };\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getChild(getAllEvents());\r\n    console.log(getAllEvents());\r\n  }, []);\r\n\r\n  const getChild = (data) => {\r\n    var calendarEl = document.getElementById(\"calendar\");\r\n    var calendar = new FCalendar(calendarEl, {\r\n      aspectRatio: 1.8,\r\n      weekends: true,\r\n      contentWidth: \"100%\",\r\n      height: \"auto\",\r\n      themeSystem: \"bootstrap\",\r\n      plugins: [listPlugin, dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n\r\n      headerToolbar: {\r\n        left: \"prev,next,today\",\r\n        center: \"title\",\r\n        right: \"listYear,dayGridMonth\",\r\n        ...props.options,\r\n      },\r\n      views: {\r\n        listYear: { buttonText: \"Schedule\" },\r\n        dayGridMonth: { buttonText: \"Month\" },\r\n      },\r\n      eventClick: function (info) {\r\n        modalFunction(info.event);\r\n\r\n        console.log(info.event);\r\n      },\r\n\r\n      defaultView: \"listWeek\",\r\n      editable: false,\r\n      selectable: false,\r\n      selectMirror: false,\r\n      dayMaxEvents: false,\r\n      customButtons: \"\",\r\n      initialEvents: data,\r\n      navLinks: true,\r\n      initialView: props.initialView,\r\n    });\r\n    console.log(calendar.getOption(\"aspectRatio\"));\r\n    calendar.render();\r\n    calendarRef.current = calendar;\r\n  };\r\n  const modalFunction = (e) => {\r\n    setEvent(e);\r\n    setOpenCalendarModal(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"schedularContainer\">\r\n      <div className=\"demo-app\">\r\n        <div className=\"demo-app-main\">\r\n          <div id=\"calendar\"></div>\r\n        </div>\r\n      </div>\r\n      {openCalendarModal && (\r\n        <CalendarModal\r\n          open={CalendarModal}\r\n          handleClose={() => setOpenCalendarModal(false)}\r\n          event={event}\r\n          getAllEvents={getAllEvents}\r\n          getChild={getChild}\r\n          setPersonalTabValue={props.setPersonalTabValue}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Schedular;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\notification\\FeedbackModal.js",[],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\board\\AddTeamTodo.js",["441","442","443","444"],"import React, { useEffect, useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport { db } from \"../../firebase\";\r\nimport { useAuth } from \"../../context/AuthContext\";\r\nimport firebase from \"firebase\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  createMuiTheme,\r\n  Fade,\r\n  useMediaQuery,\r\n  useTheme,\r\n  withStyles,\r\n} from \"@material-ui/core\";\r\nimport \"./style.css\";\r\nimport { DatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport AlarmIcon from \"@material-ui/icons/AddAlarm\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\n\r\nconst defaultMaterialTheme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"rgb(2, 88, 60)\",\r\n    },\r\n  },\r\n  width: \"100%\",\r\n\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        overflow: \"hidden\",\r\n      },\r\n      input: {\r\n        color: \"rgb(0, 90, 60)\",\r\n        fontSize: \"1.2rem\",\r\n        cursor: \"pointer\",\r\n      },\r\n    },\r\n    MuiDialog: {\r\n      paperWidthSm: {\r\n        width: \"300px !important\",\r\n      },\r\n    },\r\n    MuiPickersDay: {\r\n      daySelected: {\r\n        backgroundColor: \"rgb(2, 88, 60)\",\r\n        [\":hover\"]: {\r\n          backgroundColor: \"rgb(2, 88, 60)\",\r\n        },\r\n      },\r\n    },\r\n    MuiButton: {\r\n      textPrimary: {\r\n        color: \"rgb(2, 88, 60)\",\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  const theme = useTheme();\r\n  return useMediaQuery(theme.breakpoints.down(\"sm\")) ? (\r\n    <Slide direction=\"left\" ref={ref} {...props} />\r\n  ) : (\r\n    <Fade direction=\"\" ref={ref} {...props} />\r\n  );\r\n});\r\n\r\nexport default function AddTeamTodo({\r\n  open,\r\n  handleClose,\r\n  urlTeamName,\r\n  userName,\r\n  setTransitionDirectionUpcoming,\r\n  pri,\r\n  current,\r\n}) {\r\n  const [todoText, setTodoText] = useState(\"\");\r\n  const [selectedStartDate, handleStartDateChange] = useState(new Date());\r\n  const [selectedEndDate, handleEndDateChange] = useState(new Date());\r\n  const [priority, setPriority] = useState(0);\r\n  const { currentUser } = useAuth();\r\n  const theme = useTheme();\r\n  const isSmall = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n\r\n  const PrettoSlider = withStyles({\r\n    root: {\r\n      color:\r\n        priority < 33\r\n          ? \"rgb(1, 112, 75)\"\r\n          : priority > 66\r\n          ? \"rgba(185, 5, 5)\"\r\n          : \"rgba(185, 86, 5)\",\r\n      height: 8,\r\n      transition: \"all 0.5s ease-in-out\",\r\n      transform: \"scale(0.6)\",\r\n      marginLeft: \"1rem\",\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: \"#fff\",\r\n      border: \"2px solid currentColor\",\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      \"&:focus, &:hover, &$active\": {\r\n        boxShadow: \"inherit\",\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: \"calc(-50% + 4px)\",\r\n    },\r\n    track: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);\r\n\r\n  const handleSubmit = () => {\r\n    if (\r\n      todoText !== \"\" &&\r\n      new Date(selectedStartDate).getTime() <=\r\n        new Date(selectedEndDate).getTime()\r\n    ) {\r\n      db.collection(\"teams\")\r\n        .doc(urlTeamName)\r\n        .collection(\"teamTodos\")\r\n        .add({\r\n          todoText: todoText,\r\n          todoEndTime: selectedEndDate.toISOString(),\r\n          todoStartTime: selectedStartDate.toISOString(),\r\n          timeStamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n          admin: currentUser.uid,\r\n          checked: false,\r\n          assignedTo: [],\r\n          todoImage: \"\",\r\n          comment: \"\",\r\n          checkedBy: \"\",\r\n          assignedBy: userName,\r\n          assignedById: currentUser.uid,\r\n          state: current ? \"current\" : \"upcoming\",\r\n          priority: priority < 33 ? 1 : priority > 66 ? 3 : 2,\r\n        });\r\n      handleClose();\r\n      setTransitionDirectionUpcoming(\"down\");\r\n    }\r\n  };\r\n\r\n  function labelText(value) {\r\n    return priority < 33 ? \"Low\" : priority > 66 ? \"Top\" : \"Med\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (\r\n      new Date(selectedEndDate).getTime() <\r\n      new Date(selectedStartDate).getTime()\r\n    ) {\r\n      handleEndDateChange(selectedStartDate);\r\n    }\r\n    // if (new Date(selectedStartDate).getTime() < new Date().getTime()) {\r\n    //   handleStartDateChange(new Date());\r\n    // }\r\n  }, [selectedEndDate]);\r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      TransitionComponent={Transition}\r\n      keepMounted\r\n      onClose={handleClose}\r\n      fullScreen={!isSmall}\r\n      aria-labelledby=\"alert-dialog-slide-title\"\r\n      aria-describedby=\"alert-dialog-slide-description\"\r\n    >\r\n      <DialogTitle\r\n        id=\"alert-dialog-slide-title\"\r\n        className=\"modalTitle\"\r\n        style={{ paddingLeft: \"30px\" }}\r\n      >\r\n        Add Upcoming task\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <DialogContentText id=\"alert-dialog-slide-description\">\r\n          <textarea\r\n            placeholder=\"Write...\"\r\n            className=\"todoTextarea\"\r\n            value={todoText}\r\n            onChange={(e) => setTodoText(e.target.value)}\r\n          />\r\n          <div style={{ display: isSmall && \"flex\" }}>\r\n            <div className=\"dataContainer\">\r\n              <h3 className=\"timeHeading\">Start date</h3>\r\n              <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                <div className=\"dateBox\">\r\n                  <ThemeProvider theme={defaultMaterialTheme}>\r\n                    <DatePicker\r\n                      variant=\"dialog\"\r\n                      // format=\"DD/MM/YYYY\"\r\n                      value={selectedStartDate}\r\n                      orientation=\"portrait\"\r\n                      onChange={handleStartDateChange}\r\n                      style={{\r\n                        width: \"100%\",\r\n                        textAlign: \"center\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: <AlarmIcon className=\"alarmModalIcon\" />,\r\n                        disableUnderline: true,\r\n                      }}\r\n                    />\r\n                  </ThemeProvider>\r\n                </div>\r\n              </MuiPickersUtilsProvider>\r\n            </div>\r\n            <div className=\"dataContainer\" style={{ marginLeft: isSmall && 0 }}>\r\n              <h3 className=\"timeHeading\">End date</h3>\r\n              <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                <div className=\"dateBox\">\r\n                  <ThemeProvider theme={defaultMaterialTheme}>\r\n                    <DatePicker\r\n                      variant=\"dialog\"\r\n                      orientation=\"portrait\"\r\n                      value={selectedEndDate}\r\n                      //  format=\"DD/MM/YYYY\"\r\n                      onChange={handleEndDateChange}\r\n                      style={{\r\n                        width: \"100%\",\r\n                        textAlign: \"center\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      InputProps={{\r\n                        endAdornment: <AlarmIcon className=\"alarmModalIcon\" />,\r\n                        disableUnderline: true,\r\n                      }}\r\n                    />\r\n                  </ThemeProvider>\r\n                </div>\r\n              </MuiPickersUtilsProvider>\r\n            </div>\r\n          </div>\r\n\r\n          {pri && (\r\n            <>\r\n              <p\r\n                style={{\r\n                  color: \"rgb(0, 90, 60)\",\r\n                  fontSize: \"0.6rem\",\r\n                  marginTop: \"0.7rem\",\r\n                  textAlign: \"center\",\r\n                }}\r\n              >\r\n                Set priority\r\n              </p>\r\n              <div style={{ width: \"90%\" }}>\r\n                <PrettoSlider\r\n                  getAriaValueText={labelText}\r\n                  defaultValue={priority}\r\n                  value={priority}\r\n                  valueLabelFormat={labelText}\r\n                  valueLabelDisplay=\"auto\"\r\n                  onChange={(e, data) => {\r\n                    setPriority(data);\r\n                  }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </DialogContentText>\r\n      </DialogContent>\r\n      <DialogActions style={{ paddingRight: \"22px\" }}>\r\n        <Button\r\n          className=\"addButtonModal\"\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          className=\"addButtonModal\"\r\n          color=\"primary\"\r\n          onClick={handleSubmit}\r\n        >\r\n          add\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n}\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\members\\TeamMemberCard.js",["445"],"import { Avatar, Checkbox } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { db } from \"../../../firebase\";\r\nimport PuffLoader from \"react-spinners/PuffLoader\";\r\nimport MemberProfile from \"../../profile/MemberProfile\";\r\n\r\nfunction TeamMemberCard({\r\n  id,\r\n  setSelected,\r\n  selected,\r\n  setTabValue,\r\n  handleTeamMembersModalClose,\r\n}) {\r\n  const [member, setMember] = useState({});\r\n  const [loader, setLoader] = useState(false);\r\n  const [openMemberModal, setOpenMemberModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setLoader(true);\r\n    db.collection(\"users\")\r\n      .doc(id)\r\n      .collection(\"profile\")\r\n      .onSnapshot((snapshot) => {\r\n        const memberDetails = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          name: doc.data().name,\r\n          email: doc.data().email,\r\n          profileImage: doc.data().profileImage,\r\n        }));\r\n\r\n        setMember(memberDetails[0]);\r\n        setLoader(false);\r\n      });\r\n  }, []);\r\n\r\n  const toggle = (memberId, checked) => {\r\n    if (checked) {\r\n      setSelected([...selected, memberId]);\r\n    } else {\r\n      let _checkList = [...selected];\r\n      setSelected(_checkList.filter((check) => check !== memberId));\r\n    }\r\n  };\r\n\r\n  const emptyFunction = () => {};\r\n\r\n  return loader ? (\r\n    <PuffLoader loading={loader} color=\"#2ec592\" size={30} />\r\n  ) : (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        margin: \"0.5rem 0\",\r\n        padding: \"0.3rem\",\r\n        borderBottom: \"1px solid rgb(5, 185, 125,0.2)\",\r\n      }}\r\n    >\r\n      <Checkbox\r\n        checked={selected?.includes(id)}\r\n        style={{ color: \"rgb(5, 185, 125)\" }}\r\n        onChange={(event) => toggle(id, event.target.checked)}\r\n      />\r\n      <Avatar\r\n        src={member.profileImage}\r\n        style={{ marginLeft: \"1.5rem\", marginRight: \"1rem\", cursor: \"pointer\" }}\r\n        onClick={() => setOpenMemberModal(true)}\r\n      />\r\n      <div\r\n        style={{ display: \"flex\", flexDirection: \"column\", cursor: \"pointer\" }}\r\n        onClick={() => setOpenMemberModal(true)}\r\n      >\r\n        <p\r\n          style={{\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            textOverflow: \"ellipsis\",\r\n            color: \"grey\",\r\n          }}\r\n        >\r\n          {member.name}\r\n        </p>\r\n        <p\r\n          style={{\r\n            overflow: \"hidden\",\r\n            whiteSpace: \"nowrap\",\r\n            textOverflow: \"ellipsis\",\r\n            color: \"grey\",\r\n            fontSize: \"x-small\",\r\n          }}\r\n        >\r\n          {member.email}\r\n        </p>\r\n      </div>\r\n      {openMemberModal && (\r\n        <MemberProfile\r\n          open={openMemberModal}\r\n          handleClose={() => setOpenMemberModal(false)}\r\n          id={id}\r\n          setTabValue={setTabValue}\r\n          setDiscussionTabValue={emptyFunction}\r\n          handleTeamMembersModalClose={handleTeamMembersModalClose}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeamMemberCard;\r\n","C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\profile\\MemberProfile.js",["446","447","448","449","450","451","452"],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\utils\\theme.js",[],"C:\\Users\\tushar.deepak\\Desktop\\slogger\\src\\components\\todo\\members\\ChatMemberCard.js",["453","454","455","456","457","458","459"],{"ruleId":"460","severity":1,"message":"461","line":10,"column":8,"nodeType":"462","messageId":"463","endLine":10,"endColumn":19},{"ruleId":"460","severity":1,"message":"464","line":17,"column":8,"nodeType":"462","messageId":"463","endLine":17,"endColumn":16},{"ruleId":"460","severity":1,"message":"465","line":35,"column":9,"nodeType":"462","messageId":"463","endLine":35,"endColumn":16},{"ruleId":"466","severity":1,"message":"467","line":126,"column":6,"nodeType":"468","endLine":126,"endColumn":8,"suggestions":"469"},{"ruleId":"470","severity":1,"message":"471","line":132,"column":11,"nodeType":"472","endLine":132,"endColumn":62},{"ruleId":"473","severity":1,"message":"474","line":223,"column":21,"nodeType":"475","endLine":223,"endColumn":44},{"ruleId":"473","severity":1,"message":"474","line":324,"column":21,"nodeType":"475","endLine":324,"endColumn":44},{"ruleId":"473","severity":1,"message":"474","line":354,"column":21,"nodeType":"475","endLine":354,"endColumn":44},{"ruleId":"460","severity":1,"message":"476","line":1,"column":27,"nodeType":"462","messageId":"463","endLine":1,"endColumn":36},{"ruleId":"460","severity":1,"message":"477","line":17,"column":3,"nodeType":"462","messageId":"463","endLine":17,"endColumn":17},{"ruleId":"460","severity":1,"message":"478","line":65,"column":10,"nodeType":"462","messageId":"463","endLine":65,"endColumn":15},{"ruleId":"460","severity":1,"message":"479","line":67,"column":10,"nodeType":"462","messageId":"463","endLine":67,"endColumn":18},{"ruleId":"460","severity":1,"message":"480","line":67,"column":20,"nodeType":"462","messageId":"463","endLine":67,"endColumn":31},{"ruleId":"460","severity":1,"message":"481","line":120,"column":9,"nodeType":"462","messageId":"463","endLine":120,"endColumn":22},{"ruleId":"466","severity":1,"message":"482","line":174,"column":6,"nodeType":"468","endLine":174,"endColumn":8,"suggestions":"483"},{"ruleId":"484","replacedBy":"485"},{"ruleId":"486","replacedBy":"487"},{"ruleId":"460","severity":1,"message":"464","line":11,"column":8,"nodeType":"462","messageId":"463","endLine":11,"endColumn":16},{"ruleId":"460","severity":1,"message":"488","line":12,"column":10,"nodeType":"462","messageId":"463","endLine":12,"endColumn":20},{"ruleId":"460","severity":1,"message":"489","line":25,"column":10,"nodeType":"462","messageId":"463","endLine":25,"endColumn":15},{"ruleId":"490","severity":1,"message":"491","line":55,"column":9,"nodeType":"492","messageId":"493","endLine":57,"endColumn":10,"fix":"494"},{"ruleId":"466","severity":1,"message":"495","line":199,"column":6,"nodeType":"468","endLine":199,"endColumn":23,"suggestions":"496"},{"ruleId":"484","replacedBy":"497"},{"ruleId":"486","replacedBy":"498"},{"ruleId":"460","severity":1,"message":"499","line":14,"column":8,"nodeType":"462","messageId":"463","endLine":14,"endColumn":15},{"ruleId":"460","severity":1,"message":"500","line":34,"column":10,"nodeType":"462","messageId":"463","endLine":34,"endColumn":31},{"ruleId":"466","severity":1,"message":"501","line":53,"column":6,"nodeType":"468","endLine":53,"endColumn":8,"suggestions":"502"},{"ruleId":"470","severity":1,"message":"471","line":168,"column":17,"nodeType":"472","endLine":176,"endColumn":19},{"ruleId":"460","severity":1,"message":"503","line":49,"column":10,"nodeType":"462","messageId":"463","endLine":49,"endColumn":21},{"ruleId":"460","severity":1,"message":"504","line":51,"column":10,"nodeType":"462","messageId":"463","endLine":51,"endColumn":22},{"ruleId":"460","severity":1,"message":"505","line":63,"column":10,"nodeType":"462","messageId":"463","endLine":63,"endColumn":15},{"ruleId":"460","severity":1,"message":"506","line":63,"column":17,"nodeType":"462","messageId":"463","endLine":63,"endColumn":25},{"ruleId":"460","severity":1,"message":"507","line":64,"column":10,"nodeType":"462","messageId":"463","endLine":64,"endColumn":25},{"ruleId":"460","severity":1,"message":"508","line":65,"column":10,"nodeType":"462","messageId":"463","endLine":65,"endColumn":14},{"ruleId":"460","severity":1,"message":"509","line":65,"column":16,"nodeType":"462","messageId":"463","endLine":65,"endColumn":32},{"ruleId":"460","severity":1,"message":"481","line":68,"column":9,"nodeType":"462","messageId":"463","endLine":68,"endColumn":22},{"ruleId":"460","severity":1,"message":"510","line":152,"column":13,"nodeType":"462","messageId":"463","endLine":152,"endColumn":23},{"ruleId":"460","severity":1,"message":"511","line":177,"column":9,"nodeType":"462","messageId":"463","endLine":177,"endColumn":22},{"ruleId":"466","severity":1,"message":"512","line":224,"column":6,"nodeType":"468","endLine":224,"endColumn":8,"suggestions":"513"},{"ruleId":"466","severity":1,"message":"512","line":241,"column":6,"nodeType":"468","endLine":241,"endColumn":8,"suggestions":"514"},{"ruleId":"484","replacedBy":"515"},{"ruleId":"486","replacedBy":"516"},{"ruleId":"460","severity":1,"message":"517","line":15,"column":10,"nodeType":"462","messageId":"463","endLine":15,"endColumn":23},{"ruleId":"460","severity":1,"message":"481","line":155,"column":9,"nodeType":"462","messageId":"463","endLine":155,"endColumn":22},{"ruleId":"466","severity":1,"message":"482","line":242,"column":6,"nodeType":"468","endLine":242,"endColumn":19,"suggestions":"518"},{"ruleId":"466","severity":1,"message":"482","line":297,"column":6,"nodeType":"468","endLine":297,"endColumn":8,"suggestions":"519"},{"ruleId":"466","severity":1,"message":"520","line":317,"column":6,"nodeType":"468","endLine":317,"endColumn":19,"suggestions":"521"},{"ruleId":"460","severity":1,"message":"522","line":6,"column":14,"nodeType":"462","messageId":"463","endLine":6,"endColumn":21},{"ruleId":"460","severity":1,"message":"477","line":13,"column":3,"nodeType":"462","messageId":"463","endLine":13,"endColumn":17},{"ruleId":"460","severity":1,"message":"489","line":22,"column":8,"nodeType":"462","messageId":"463","endLine":22,"endColumn":13},{"ruleId":"460","severity":1,"message":"523","line":64,"column":10,"nodeType":"462","messageId":"463","endLine":64,"endColumn":19},{"ruleId":"460","severity":1,"message":"478","line":149,"column":10,"nodeType":"462","messageId":"463","endLine":149,"endColumn":15},{"ruleId":"460","severity":1,"message":"524","line":160,"column":10,"nodeType":"462","messageId":"463","endLine":160,"endColumn":15},{"ruleId":"460","severity":1,"message":"525","line":160,"column":17,"nodeType":"462","messageId":"463","endLine":160,"endColumn":25},{"ruleId":"466","severity":1,"message":"482","line":318,"column":6,"nodeType":"468","endLine":318,"endColumn":19,"suggestions":"526"},{"ruleId":"527","severity":1,"message":"528","line":328,"column":34,"nodeType":"529","messageId":"530","endLine":328,"endColumn":36},{"ruleId":"466","severity":1,"message":"482","line":338,"column":6,"nodeType":"468","endLine":338,"endColumn":19,"suggestions":"531"},{"ruleId":"527","severity":1,"message":"528","line":350,"column":28,"nodeType":"529","messageId":"530","endLine":350,"endColumn":30},{"ruleId":"466","severity":1,"message":"532","line":359,"column":6,"nodeType":"468","endLine":359,"endColumn":8,"suggestions":"533"},{"ruleId":"466","severity":1,"message":"495","line":371,"column":6,"nodeType":"468","endLine":371,"endColumn":23,"suggestions":"534"},{"ruleId":"535","severity":1,"message":"536","line":506,"column":19,"nodeType":"475","endLine":506,"endColumn":34},{"ruleId":"535","severity":1,"message":"536","line":584,"column":23,"nodeType":"475","endLine":584,"endColumn":38},{"ruleId":"470","severity":1,"message":"471","line":745,"column":17,"nodeType":"472","endLine":748,"endColumn":19},{"ruleId":"470","severity":1,"message":"471","line":776,"column":19,"nodeType":"472","endLine":783,"endColumn":21},{"ruleId":"470","severity":1,"message":"471","line":824,"column":19,"nodeType":"472","endLine":831,"endColumn":21},{"ruleId":"470","severity":1,"message":"471","line":865,"column":19,"nodeType":"472","endLine":872,"endColumn":21},{"ruleId":"527","severity":1,"message":"537","line":910,"column":34,"nodeType":"529","messageId":"538","endLine":910,"endColumn":36},{"ruleId":"527","severity":1,"message":"537","line":930,"column":34,"nodeType":"529","messageId":"538","endLine":930,"endColumn":36},{"ruleId":"460","severity":1,"message":"539","line":11,"column":17,"nodeType":"462","messageId":"463","endLine":11,"endColumn":23},{"ruleId":"460","severity":1,"message":"540","line":101,"column":7,"nodeType":"462","messageId":"463","endLine":101,"endColumn":27},{"ruleId":"460","severity":1,"message":"541","line":122,"column":10,"nodeType":"462","messageId":"463","endLine":122,"endColumn":26},{"ruleId":"460","severity":1,"message":"542","line":125,"column":9,"nodeType":"462","messageId":"463","endLine":125,"endColumn":26},{"ruleId":"466","severity":1,"message":"482","line":195,"column":6,"nodeType":"468","endLine":195,"endColumn":19,"suggestions":"543"},{"ruleId":"544","severity":1,"message":"545","line":198,"column":21,"nodeType":"546","messageId":"547","endLine":198,"endColumn":23},{"ruleId":"466","severity":1,"message":"482","line":252,"column":6,"nodeType":"468","endLine":252,"endColumn":19,"suggestions":"548"},{"ruleId":"527","severity":1,"message":"528","line":261,"column":34,"nodeType":"529","messageId":"530","endLine":261,"endColumn":36},{"ruleId":"466","severity":1,"message":"549","line":284,"column":6,"nodeType":"468","endLine":284,"endColumn":19,"suggestions":"550"},{"ruleId":"466","severity":1,"message":"482","line":298,"column":6,"nodeType":"468","endLine":298,"endColumn":8,"suggestions":"551"},{"ruleId":"470","severity":1,"message":"471","line":415,"column":15,"nodeType":"472","endLine":418,"endColumn":17},{"ruleId":"460","severity":1,"message":"552","line":747,"column":7,"nodeType":"462","messageId":"463","endLine":747,"endColumn":17},{"ruleId":"460","severity":1,"message":"553","line":754,"column":7,"nodeType":"462","messageId":"463","endLine":754,"endColumn":16},{"ruleId":"490","severity":1,"message":"491","line":48,"column":9,"nodeType":"492","messageId":"493","endLine":50,"endColumn":10,"fix":"554"},{"ruleId":"555","severity":1,"message":"556","line":103,"column":48,"nodeType":"546","messageId":"557","endLine":103,"endColumn":49},{"ruleId":"466","severity":1,"message":"558","line":150,"column":6,"nodeType":"468","endLine":150,"endColumn":12,"suggestions":"559"},{"ruleId":"484","replacedBy":"560"},{"ruleId":"486","replacedBy":"561"},{"ruleId":"466","severity":1,"message":"512","line":108,"column":6,"nodeType":"468","endLine":108,"endColumn":19,"suggestions":"562"},{"ruleId":"470","severity":1,"message":"471","line":125,"column":7,"nodeType":"472","endLine":125,"endColumn":75},{"ruleId":"460","severity":1,"message":"563","line":14,"column":3,"nodeType":"462","messageId":"463","endLine":14,"endColumn":13},{"ruleId":"460","severity":1,"message":"478","line":133,"column":10,"nodeType":"462","messageId":"463","endLine":133,"endColumn":15},{"ruleId":"466","severity":1,"message":"482","line":285,"column":6,"nodeType":"468","endLine":285,"endColumn":8,"suggestions":"564"},{"ruleId":"466","severity":1,"message":"565","line":301,"column":6,"nodeType":"468","endLine":301,"endColumn":23,"suggestions":"566"},{"ruleId":"460","severity":1,"message":"567","line":303,"column":9,"nodeType":"462","messageId":"463","endLine":303,"endColumn":22},{"ruleId":"527","severity":1,"message":"537","line":611,"column":30,"nodeType":"529","messageId":"538","endLine":611,"endColumn":32},{"ruleId":"527","severity":1,"message":"537","line":634,"column":30,"nodeType":"529","messageId":"538","endLine":634,"endColumn":32},{"ruleId":"470","severity":1,"message":"471","line":673,"column":15,"nodeType":"472","endLine":673,"endColumn":55},{"ruleId":"527","severity":1,"message":"537","line":702,"column":29,"nodeType":"529","messageId":"538","endLine":702,"endColumn":31},{"ruleId":"527","severity":1,"message":"537","line":707,"column":28,"nodeType":"529","messageId":"538","endLine":707,"endColumn":30},{"ruleId":"527","severity":1,"message":"537","line":729,"column":28,"nodeType":"529","messageId":"538","endLine":729,"endColumn":30},{"ruleId":"527","severity":1,"message":"537","line":773,"column":29,"nodeType":"529","messageId":"538","endLine":773,"endColumn":31},{"ruleId":"527","severity":1,"message":"537","line":778,"column":28,"nodeType":"529","messageId":"538","endLine":778,"endColumn":30},{"ruleId":"527","severity":1,"message":"537","line":800,"column":28,"nodeType":"529","messageId":"538","endLine":800,"endColumn":30},{"ruleId":"460","severity":1,"message":"568","line":10,"column":8,"nodeType":"462","messageId":"463","endLine":10,"endColumn":17},{"ruleId":"460","severity":1,"message":"569","line":13,"column":8,"nodeType":"462","messageId":"463","endLine":13,"endColumn":14},{"ruleId":"466","severity":1,"message":"570","line":100,"column":6,"nodeType":"468","endLine":100,"endColumn":8,"suggestions":"571"},{"ruleId":"466","severity":1,"message":"570","line":107,"column":6,"nodeType":"468","endLine":107,"endColumn":8,"suggestions":"572"},{"ruleId":"460","severity":1,"message":"476","line":1,"column":17,"nodeType":"462","messageId":"463","endLine":1,"endColumn":26},{"ruleId":"460","severity":1,"message":"464","line":11,"column":8,"nodeType":"462","messageId":"463","endLine":11,"endColumn":16},{"ruleId":"490","severity":1,"message":"491","line":51,"column":9,"nodeType":"492","messageId":"493","endLine":53,"endColumn":10,"fix":"573"},{"ruleId":"460","severity":1,"message":"574","line":85,"column":11,"nodeType":"462","messageId":"463","endLine":85,"endColumn":22},{"ruleId":"555","severity":1,"message":"556","line":119,"column":50,"nodeType":"546","messageId":"557","endLine":119,"endColumn":51},{"ruleId":"490","severity":1,"message":"491","line":49,"column":9,"nodeType":"492","messageId":"493","endLine":51,"endColumn":10,"fix":"575"},{"ruleId":"555","severity":1,"message":"556","line":106,"column":48,"nodeType":"546","messageId":"557","endLine":106,"endColumn":49},{"ruleId":"466","severity":1,"message":"558","line":145,"column":6,"nodeType":"468","endLine":145,"endColumn":12,"suggestions":"576"},{"ruleId":"460","severity":1,"message":"577","line":1,"column":17,"nodeType":"462","messageId":"463","endLine":1,"endColumn":25},{"ruleId":"460","severity":1,"message":"464","line":11,"column":8,"nodeType":"462","messageId":"463","endLine":11,"endColumn":16},{"ruleId":"527","severity":1,"message":"528","line":53,"column":34,"nodeType":"529","messageId":"530","endLine":53,"endColumn":36},{"ruleId":"466","severity":1,"message":"578","line":66,"column":6,"nodeType":"468","endLine":66,"endColumn":8,"suggestions":"579"},{"ruleId":"460","severity":1,"message":"580","line":143,"column":10,"nodeType":"462","messageId":"463","endLine":143,"endColumn":28},{"ruleId":"460","severity":1,"message":"581","line":167,"column":9,"nodeType":"462","messageId":"463","endLine":167,"endColumn":23},{"ruleId":"527","severity":1,"message":"582","line":173,"column":20,"nodeType":"529","messageId":"530","endLine":173,"endColumn":22},{"ruleId":"473","severity":1,"message":"474","line":280,"column":11,"nodeType":"475","endLine":282,"endColumn":12},{"ruleId":"484","replacedBy":"583"},{"ruleId":"486","replacedBy":"584"},{"ruleId":"527","severity":1,"message":"528","line":129,"column":28,"nodeType":"529","messageId":"530","endLine":129,"endColumn":30},{"ruleId":"466","severity":1,"message":"482","line":151,"column":6,"nodeType":"468","endLine":151,"endColumn":8,"suggestions":"585"},{"ruleId":"460","severity":1,"message":"586","line":152,"column":7,"nodeType":"462","messageId":"463","endLine":152,"endColumn":8},{"ruleId":"466","severity":1,"message":"501","line":28,"column":6,"nodeType":"468","endLine":28,"endColumn":8,"suggestions":"587"},{"ruleId":"470","severity":1,"message":"471","line":51,"column":11,"nodeType":"472","endLine":51,"endColumn":76},{"ruleId":"588","severity":1,"message":"589","line":41,"column":7,"nodeType":"462","messageId":"590","endLine":41,"endColumn":11},{"ruleId":"466","severity":1,"message":"591","line":79,"column":6,"nodeType":"468","endLine":79,"endColumn":8,"suggestions":"592"},{"ruleId":"535","severity":1,"message":"536","line":201,"column":17,"nodeType":"475","endLine":201,"endColumn":32},{"ruleId":"470","severity":1,"message":"471","line":204,"column":17,"nodeType":"472","endLine":215,"endColumn":19},{"ruleId":"470","severity":1,"message":"471","line":225,"column":13,"nodeType":"472","endLine":233,"endColumn":15},{"ruleId":"460","severity":1,"message":"593","line":300,"column":7,"nodeType":"462","messageId":"463","endLine":300,"endColumn":18},{"ruleId":"460","severity":1,"message":"594","line":4,"column":8,"nodeType":"462","messageId":"463","endLine":4,"endColumn":21},{"ruleId":"460","severity":1,"message":"595","line":6,"column":8,"nodeType":"462","messageId":"463","endLine":6,"endColumn":25},{"ruleId":"460","severity":1,"message":"596","line":7,"column":8,"nodeType":"462","messageId":"463","endLine":7,"endColumn":19},{"ruleId":"535","severity":1,"message":"536","line":156,"column":28,"nodeType":"475","endLine":156,"endColumn":43},{"ruleId":"460","severity":1,"message":"597","line":23,"column":43,"nodeType":"462","messageId":"463","endLine":23,"endColumn":47},{"ruleId":"460","severity":1,"message":"465","line":30,"column":9,"nodeType":"462","messageId":"463","endLine":30,"endColumn":16},{"ruleId":"460","severity":1,"message":"598","line":31,"column":10,"nodeType":"462","messageId":"463","endLine":31,"endColumn":16},{"ruleId":"460","severity":1,"message":"599","line":31,"column":18,"nodeType":"462","messageId":"463","endLine":31,"endColumn":27},{"ruleId":"466","severity":1,"message":"467","line":45,"column":6,"nodeType":"468","endLine":45,"endColumn":8,"suggestions":"600"},{"ruleId":"470","severity":1,"message":"471","line":84,"column":9,"nodeType":"472","endLine":84,"endColumn":48},{"ruleId":"470","severity":1,"message":"471","line":347,"column":9,"nodeType":"472","endLine":347,"endColumn":73},{"ruleId":"470","severity":1,"message":"471","line":350,"column":9,"nodeType":"472","endLine":350,"endColumn":66},{"ruleId":"470","severity":1,"message":"471","line":408,"column":9,"nodeType":"472","endLine":408,"endColumn":61},{"ruleId":"466","severity":1,"message":"601","line":41,"column":6,"nodeType":"468","endLine":41,"endColumn":18,"suggestions":"602"},{"ruleId":"527","severity":1,"message":"537","line":44,"column":39,"nodeType":"529","messageId":"538","endLine":44,"endColumn":41},{"ruleId":"466","severity":1,"message":"482","line":67,"column":6,"nodeType":"468","endLine":67,"endColumn":8,"suggestions":"603"},{"ruleId":"460","severity":1,"message":"604","line":3,"column":3,"nodeType":"462","messageId":"463","endLine":3,"endColumn":13},{"ruleId":"460","severity":1,"message":"605","line":16,"column":7,"nodeType":"462","messageId":"463","endLine":16,"endColumn":16},{"ruleId":"544","severity":1,"message":"606","line":66,"column":18,"nodeType":"546","messageId":"547","endLine":66,"endColumn":20},{"ruleId":"466","severity":1,"message":"607","line":37,"column":6,"nodeType":"468","endLine":37,"endColumn":8,"suggestions":"608"},{"ruleId":"460","severity":1,"message":"609","line":14,"column":9,"nodeType":"462","messageId":"463","endLine":14,"endColumn":12},{"ruleId":"466","severity":1,"message":"610","line":18,"column":6,"nodeType":"468","endLine":18,"endColumn":8,"suggestions":"611"},{"ruleId":"527","severity":1,"message":"612","line":21,"column":39,"nodeType":"529","messageId":"538","endLine":21,"endColumn":41},{"ruleId":"466","severity":1,"message":"613","line":58,"column":6,"nodeType":"468","endLine":58,"endColumn":8,"suggestions":"614"},{"ruleId":"460","severity":1,"message":"615","line":15,"column":8,"nodeType":"462","messageId":"463","endLine":15,"endColumn":16},{"ruleId":"460","severity":1,"message":"616","line":16,"column":8,"nodeType":"462","messageId":"463","endLine":16,"endColumn":24},{"ruleId":"460","severity":1,"message":"617","line":61,"column":25,"nodeType":"462","messageId":"463","endLine":61,"endColumn":41},{"ruleId":"460","severity":1,"message":"510","line":85,"column":13,"nodeType":"462","messageId":"463","endLine":85,"endColumn":23},{"ruleId":"466","severity":1,"message":"618","line":186,"column":6,"nodeType":"468","endLine":186,"endColumn":8,"suggestions":"619"},{"ruleId":"460","severity":1,"message":"620","line":2,"column":8,"nodeType":"462","messageId":"463","endLine":2,"endColumn":14},{"ruleId":"460","severity":1,"message":"594","line":4,"column":8,"nodeType":"462","messageId":"463","endLine":4,"endColumn":21},{"ruleId":"460","severity":1,"message":"621","line":23,"column":10,"nodeType":"462","messageId":"463","endLine":23,"endColumn":21},{"ruleId":"460","severity":1,"message":"622","line":23,"column":23,"nodeType":"462","messageId":"463","endLine":23,"endColumn":37},{"ruleId":"460","severity":1,"message":"623","line":4,"column":8,"nodeType":"462","messageId":"463","endLine":4,"endColumn":14},{"ruleId":"460","severity":1,"message":"465","line":27,"column":9,"nodeType":"462","messageId":"463","endLine":27,"endColumn":16},{"ruleId":"460","severity":1,"message":"567","line":96,"column":9,"nodeType":"462","messageId":"463","endLine":96,"endColumn":22},{"ruleId":"527","severity":1,"message":"537","line":116,"column":30,"nodeType":"529","messageId":"538","endLine":116,"endColumn":32},{"ruleId":"527","severity":1,"message":"537","line":171,"column":30,"nodeType":"529","messageId":"538","endLine":171,"endColumn":32},{"ruleId":"527","severity":1,"message":"537","line":226,"column":30,"nodeType":"529","messageId":"538","endLine":226,"endColumn":32},{"ruleId":"460","severity":1,"message":"624","line":8,"column":8,"nodeType":"462","messageId":"463","endLine":8,"endColumn":21},{"ruleId":"460","severity":1,"message":"604","line":13,"column":3,"nodeType":"462","messageId":"463","endLine":13,"endColumn":13},{"ruleId":"460","severity":1,"message":"478","line":37,"column":10,"nodeType":"462","messageId":"463","endLine":37,"endColumn":15},{"ruleId":"460","severity":1,"message":"625","line":29,"column":10,"nodeType":"462","messageId":"463","endLine":29,"endColumn":18},{"ruleId":"460","severity":1,"message":"626","line":29,"column":20,"nodeType":"462","messageId":"463","endLine":29,"endColumn":31},{"ruleId":"460","severity":1,"message":"627","line":32,"column":10,"nodeType":"462","messageId":"463","endLine":32,"endColumn":17},{"ruleId":"460","severity":1,"message":"628","line":32,"column":19,"nodeType":"462","messageId":"463","endLine":32,"endColumn":29},{"ruleId":"527","severity":1,"message":"528","line":49,"column":28,"nodeType":"529","messageId":"530","endLine":49,"endColumn":30},{"ruleId":"527","severity":1,"message":"528","line":69,"column":28,"nodeType":"529","messageId":"530","endLine":69,"endColumn":30},{"ruleId":"460","severity":1,"message":"624","line":8,"column":8,"nodeType":"462","messageId":"463","endLine":8,"endColumn":21},{"ruleId":"460","severity":1,"message":"604","line":13,"column":3,"nodeType":"462","messageId":"463","endLine":13,"endColumn":13},{"ruleId":"460","severity":1,"message":"629","line":59,"column":10,"nodeType":"462","messageId":"463","endLine":59,"endColumn":20},{"ruleId":"460","severity":1,"message":"630","line":59,"column":22,"nodeType":"462","messageId":"463","endLine":59,"endColumn":35},{"ruleId":"460","severity":1,"message":"631","line":61,"column":10,"nodeType":"462","messageId":"463","endLine":61,"endColumn":22},{"ruleId":"460","severity":1,"message":"632","line":61,"column":24,"nodeType":"462","messageId":"463","endLine":61,"endColumn":39},{"ruleId":"460","severity":1,"message":"465","line":66,"column":9,"nodeType":"462","messageId":"463","endLine":66,"endColumn":16},{"ruleId":"466","severity":1,"message":"501","line":32,"column":6,"nodeType":"468","endLine":32,"endColumn":8,"suggestions":"633"},{"ruleId":"470","severity":1,"message":"471","line":55,"column":11,"nodeType":"472","endLine":55,"endColumn":76},{"ruleId":"460","severity":1,"message":"476","line":1,"column":17,"nodeType":"462","messageId":"463","endLine":1,"endColumn":26},{"ruleId":"460","severity":1,"message":"569","line":8,"column":8,"nodeType":"462","messageId":"463","endLine":8,"endColumn":14},{"ruleId":"460","severity":1,"message":"634","line":13,"column":10,"nodeType":"462","messageId":"463","endLine":13,"endColumn":14},{"ruleId":"470","severity":1,"message":"471","line":28,"column":13,"nodeType":"472","endLine":28,"endColumn":75},{"ruleId":"470","severity":1,"message":"471","line":76,"column":7,"nodeType":"472","endLine":76,"endColumn":57},{"ruleId":"535","severity":1,"message":"536","line":44,"column":13,"nodeType":"475","endLine":44,"endColumn":28},{"ruleId":"470","severity":1,"message":"471","line":53,"column":7,"nodeType":"472","endLine":53,"endColumn":57},{"ruleId":"484","replacedBy":"635"},{"ruleId":"486","replacedBy":"636"},{"ruleId":"466","severity":1,"message":"637","line":36,"column":6,"nodeType":"468","endLine":36,"endColumn":8,"suggestions":"638"},{"ruleId":"470","severity":1,"message":"471","line":75,"column":15,"nodeType":"472","endLine":92,"endColumn":17},{"ruleId":"460","severity":1,"message":"609","line":14,"column":9,"nodeType":"462","messageId":"463","endLine":14,"endColumn":12},{"ruleId":"527","severity":1,"message":"612","line":17,"column":39,"nodeType":"529","messageId":"538","endLine":17,"endColumn":41},{"ruleId":"466","severity":1,"message":"613","line":75,"column":6,"nodeType":"468","endLine":75,"endColumn":8,"suggestions":"639"},{"ruleId":"460","severity":1,"message":"488","line":12,"column":10,"nodeType":"462","messageId":"463","endLine":12,"endColumn":20},{"ruleId":"460","severity":1,"message":"489","line":25,"column":10,"nodeType":"462","messageId":"463","endLine":25,"endColumn":15},{"ruleId":"490","severity":1,"message":"491","line":55,"column":9,"nodeType":"492","messageId":"493","endLine":57,"endColumn":10,"fix":"640"},{"ruleId":"466","severity":1,"message":"565","line":176,"column":6,"nodeType":"468","endLine":176,"endColumn":23,"suggestions":"641"},{"ruleId":"466","severity":1,"message":"642","line":34,"column":6,"nodeType":"468","endLine":34,"endColumn":8,"suggestions":"643"},{"ruleId":"460","severity":1,"message":"644","line":36,"column":10,"nodeType":"462","messageId":"463","endLine":36,"endColumn":17},{"ruleId":"466","severity":1,"message":"501","line":77,"column":6,"nodeType":"468","endLine":77,"endColumn":8,"suggestions":"645"},{"ruleId":"466","severity":1,"message":"642","line":108,"column":6,"nodeType":"468","endLine":108,"endColumn":8,"suggestions":"646"},{"ruleId":"535","severity":1,"message":"536","line":190,"column":38,"nodeType":"475","endLine":190,"endColumn":53},{"ruleId":"535","severity":1,"message":"536","line":197,"column":39,"nodeType":"475","endLine":197,"endColumn":54},{"ruleId":"535","severity":1,"message":"536","line":204,"column":36,"nodeType":"475","endLine":204,"endColumn":51},{"ruleId":"535","severity":1,"message":"536","line":211,"column":38,"nodeType":"475","endLine":211,"endColumn":53},{"ruleId":"460","severity":1,"message":"647","line":1,"column":18,"nodeType":"462","messageId":"463","endLine":1,"endColumn":26},{"ruleId":"466","severity":1,"message":"642","line":40,"column":6,"nodeType":"468","endLine":40,"endColumn":8,"suggestions":"648"},{"ruleId":"544","severity":1,"message":"545","line":61,"column":21,"nodeType":"546","messageId":"547","endLine":61,"endColumn":23},{"ruleId":"466","severity":1,"message":"649","line":79,"column":6,"nodeType":"468","endLine":79,"endColumn":8,"suggestions":"650"},{"ruleId":"460","severity":1,"message":"651","line":81,"column":9,"nodeType":"462","messageId":"463","endLine":81,"endColumn":15},{"ruleId":"466","severity":1,"message":"652","line":93,"column":6,"nodeType":"468","endLine":93,"endColumn":8,"suggestions":"653"},{"ruleId":"544","severity":1,"message":"545","line":115,"column":23,"nodeType":"546","messageId":"547","endLine":115,"endColumn":25},"no-unused-vars","'signUpImage' is defined but never used.","Identifier","unusedVar","'firebase' is defined but never used.","'isSmall' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'currentUser' and 'history'. Either include them or remove the dependency array.","ArrayExpression",["654"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useEffect' is defined but never used.","'DateTimePicker' is defined but never used.","'error' is assigned a value but never used.","'todoList' is assigned a value but never used.","'setTodoList' is assigned a value but never used.","'handleSignOut' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.",["655"],"no-native-reassign",["656"],"no-negated-in-lhs",["657"],"'useHistory' is defined but never used.","'green' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\":hover\"] found.","Property","unnecessarilyComputedProperty",{"range":"658","text":"659"},"React Hook React.useEffect has a missing dependency: 'selectedStartDate'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'handleEndDateChange' needs the current value of 'selectedStartDate'.",["660"],["656"],["657"],"'emailjs' is defined but never used.","'allSelectedMemberList' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllMembers'. Either include it or remove the dependency array.",["661"],"'profilePath' is assigned a value but never used.","'profileError' is assigned a value but never used.","'teams' is assigned a value but never used.","'setTeams' is assigned a value but never used.","'allMemberIdList' is assigned a value but never used.","'team' is assigned a value but never used.","'handleChangeTeam' is assigned a value but never used.","'uploadTask' is assigned a value but never used.","'getAllMembers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.",["662"],["663"],["656"],["657"],"'generateMedia' is defined but never used.",["664"],["665"],"React Hook React.useEffect has a missing dependency: 'chatListWith'. Either include it or remove the dependency array.",["666"],"'storage' is defined but never used.","'a11yProps' is defined but never used.","'value' is assigned a value but never used.","'setValue' is assigned a value but never used.",["667"],"array-callback-return","Array.prototype.filter() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["668"],"React Hook React.useEffect has missing dependencies: 'currentUser.uid' and 'setDiscussionLock'. Either include them or remove the dependency array. If 'setDiscussionLock' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["669"],["670"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'useRef' is defined but never used.","'defaultMaterialTheme' is assigned a value but never used.","'currChatMemberId' is assigned a value but never used.","'handleSubmitEnter' is assigned a value but never used.",["671"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["672"],"React Hook React.useEffect has a missing dependency: 'deleteTeam'. Either include it or remove the dependency array.",["673"],["674"],"'ChatScreen' is assigned a value but never used.","'ChatInput' is assigned a value but never used.",{"range":"675","text":"659"},"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","React Hook useEffect has a missing dependency: 'urlTeamName'. Either include it or remove the dependency array.",["676"],["656"],["657"],["677"],"'withStyles' is defined but never used.",["678"],"React Hook useEffect has a missing dependency: 'selectedStartDate'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'handleEndDateChange' needs the current value of 'selectedStartDate'.",["679"],"'emptyFunction' is assigned a value but never used.","'ClearIcon' is defined but never used.","'moment' is defined but never used.","React Hook useEffect has a missing dependency: 'getNotificationList'. Either include it or remove the dependency array.",["680"],["681"],{"range":"682","text":"659"},"'currentUser' is assigned a value but never used.",{"range":"683","text":"659"},["684"],"'useState' is defined but never used.","React Hook React.useEffect has missing dependencies: 'currentUser.uid' and 'teamName'. Either include them or remove the dependency array.",["685"],"'databaseSideDelete' is assigned a value but never used.","'databaseDelete' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.",["656"],["657"],["686"],"'c' is assigned a value but never used.",["687"],"no-redeclare","'date' is already defined.","redeclared","React Hook React.useEffect has a missing dependency: 'checkImage'. Either include it or remove the dependency array.",["688"],"'TodoActions' is assigned a value but never used.","'DialogActions' is defined but never used.","'DialogContentText' is defined but never used.","'DialogTitle' is defined but never used.","'Zoom' is defined but never used.","'openEx' is assigned a value but never used.","'setOpenEx' is assigned a value but never used.",["689"],"React Hook useEffect has missing dependencies: 'array' and 'colors'. Either include them or remove the dependency array.",["690"],["691"],"'IconButton' is defined but never used.","'useStyles' is assigned a value but never used.","Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'giverId'. Either include it or remove the dependency array.",["692"],"'day' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props.todoList'. Either include it or remove the dependency array.",["693"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'getAllEvents' and 'getChild'. Either include them or remove the dependency array.",["694"],"'DoneIcon' is defined but never used.","'ArrowForwardIcon' is defined but never used.","'setAdminTodoText' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllImages'. Either include it or remove the dependency array.",["695"],"'Button' is defined but never used.","'senderEmail' is assigned a value but never used.","'setSenderEmail' is assigned a value but never used.","'styled' is defined but never used.","'CustomTooltip' is defined but never used.","'teamList' is assigned a value but never used.","'setTeamList' is assigned a value but never used.","'already' is assigned a value but never used.","'setAlready' is assigned a value but never used.","'localCheck' is assigned a value but never used.","'setLocalCheck' is assigned a value but never used.","'assignChange' is assigned a value but never used.","'setAssignChange' is assigned a value but never used.",["696"],"'Fade' is defined but never used.",["656"],["657"],"React Hook useEffect has a missing dependency: 'imageList'. Either include it or remove the dependency array.",["697"],["698"],{"range":"699","text":"659"},["700"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["701"],"'contact' is assigned a value but never used.",["702"],["703"],"'Checkbox' is defined but never used.",["704"],"React Hook useEffect has missing dependencies: 'UrlTeamName', 'chatId', and 'currentUser.uid'. Either include them or remove the dependency array.",["705"],"'toggle' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'UrlTeamName'. Either include it or remove the dependency array.",["706"],{"desc":"707","fix":"708"},{"desc":"709","fix":"710"},"no-global-assign","no-unsafe-negation",[1612,1622],"\":hover\"",{"desc":"711","fix":"712"},{"desc":"713","fix":"714"},{"desc":"709","fix":"715"},{"desc":"709","fix":"716"},{"desc":"717","fix":"718"},{"desc":"709","fix":"719"},{"desc":"720","fix":"721"},{"desc":"717","fix":"722"},{"desc":"717","fix":"723"},{"desc":"724","fix":"725"},{"desc":"711","fix":"726"},{"desc":"717","fix":"727"},{"desc":"717","fix":"728"},{"desc":"729","fix":"730"},{"desc":"709","fix":"731"},[1449,1459],{"desc":"732","fix":"733"},{"desc":"734","fix":"735"},{"desc":"709","fix":"736"},{"desc":"711","fix":"737"},{"desc":"738","fix":"739"},{"desc":"738","fix":"740"},[1472,1482],[1318,1328],{"desc":"732","fix":"741"},{"desc":"742","fix":"743"},{"desc":"709","fix":"744"},{"desc":"713","fix":"745"},{"desc":"746","fix":"747"},{"desc":"707","fix":"748"},{"desc":"749","fix":"750"},{"desc":"709","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},{"desc":"756","fix":"757"},{"desc":"758","fix":"759"},{"desc":"713","fix":"760"},{"desc":"761","fix":"762"},{"desc":"756","fix":"763"},[1634,1644],{"desc":"711","fix":"764"},{"desc":"765","fix":"766"},{"desc":"713","fix":"767"},{"desc":"765","fix":"768"},{"desc":"765","fix":"769"},{"desc":"770","fix":"771"},{"desc":"772","fix":"773"},"Update the dependencies array to be: [currentUser, history]",{"range":"774","text":"775"},"Update the dependencies array to be: [currentUser.uid]",{"range":"776","text":"777"},"Update the dependencies array to be: [selectedEndDate, selectedStartDate]",{"range":"778","text":"779"},"Update the dependencies array to be: [getAllMembers]",{"range":"780","text":"781"},{"range":"782","text":"777"},{"range":"783","text":"777"},"Update the dependencies array to be: [UrlTeamName, currentUser.uid]",{"range":"784","text":"785"},{"range":"786","text":"777"},"Update the dependencies array to be: [UrlTeamName, chatListWith]",{"range":"787","text":"788"},{"range":"789","text":"785"},{"range":"790","text":"785"},"Update the dependencies array to be: [currentUser.uid, setDiscussionLock]",{"range":"791","text":"792"},{"range":"793","text":"779"},{"range":"794","text":"785"},{"range":"795","text":"785"},"Update the dependencies array to be: [UrlTeamName, deleteTeam]",{"range":"796","text":"797"},{"range":"798","text":"777"},"Update the dependencies array to be: [sort, urlTeamName]",{"range":"799","text":"800"},"Update the dependencies array to be: [currentUser.uid, urlTeamName]",{"range":"801","text":"802"},{"range":"803","text":"777"},{"range":"804","text":"779"},"Update the dependencies array to be: [getNotificationList]",{"range":"805","text":"806"},{"range":"807","text":"806"},{"range":"808","text":"800"},"Update the dependencies array to be: [currentUser.uid, teamName]",{"range":"809","text":"810"},{"range":"811","text":"777"},{"range":"812","text":"781"},"Update the dependencies array to be: [checkImage]",{"range":"813","text":"814"},{"range":"815","text":"775"},"Update the dependencies array to be: [array, colors, todoLength]",{"range":"816","text":"817"},{"range":"818","text":"777"},"Update the dependencies array to be: [giverId]",{"range":"819","text":"820"},"Update the dependencies array to be: [props.todoList]",{"range":"821","text":"822"},"Update the dependencies array to be: [getAllEvents, getChild]",{"range":"823","text":"824"},"Update the dependencies array to be: [getAllImages]",{"range":"825","text":"826"},{"range":"827","text":"781"},"Update the dependencies array to be: [imageList]",{"range":"828","text":"829"},{"range":"830","text":"824"},{"range":"831","text":"779"},"Update the dependencies array to be: [id]",{"range":"832","text":"833"},{"range":"834","text":"781"},{"range":"835","text":"833"},{"range":"836","text":"833"},"Update the dependencies array to be: [UrlTeamName, chatId, currentUser.uid]",{"range":"837","text":"838"},"Update the dependencies array to be: [UrlTeamName]",{"range":"839","text":"840"},[4084,4086],"[currentUser, history]",[5060,5062],"[currentUser.uid]",[5383,5400],"[selectedEndDate, selectedStartDate]",[1798,1800],"[getAllMembers]",[7590,7592],[8118,8120],[7133,7146],"[UrlTeamName, currentUser.uid]",[8455,8457],[9067,9080],"[UrlTeamName, chatListWith]",[9581,9594],[10174,10187],[10720,10722],"[currentUser.uid, setDiscussionLock]",[11054,11071],[5528,5541],[7679,7692],[8552,8565],"[UrlTeamName, deleteTeam]",[8923,8925],[4350,4356],"[sort, urlTeamName]",[2705,2718],"[currentUser.uid, urlTeamName]",[7868,7870],[8301,8318],[3336,3338],"[getNotificationList]",[3495,3497],[4166,4172],[1953,1955],"[currentUser.uid, teamName]",[3907,3909],[945,947],[2014,2016],"[checkImage]",[1917,1919],[1109,1121],"[array, colors, todoLength]",[1762,1764],[1096,1098],"[giverId]",[692,694],"[props.todoList]",[1794,1796],"[getAllEvents, getChild]",[5705,5707],"[getAllImages]",[1079,1081],[909,911],"[imageList]",[2706,2708],[4828,4845],[993,995],"[id]",[2673,2675],[3735,3737],[1211,1213],[2445,2447],"[UrlTeamName, chatId, currentUser.uid]",[2770,2772],"[UrlTeamName]"]